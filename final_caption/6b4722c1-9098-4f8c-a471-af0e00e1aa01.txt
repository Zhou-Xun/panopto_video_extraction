1
00:00:02,330 --> 00:00:05,430
I'm going to make another recording. I don't know what happened. Okay.

2
00:00:07,110 --> 00:00:10,910
Okay. So, uh. Okay.

3
00:00:11,900 --> 00:00:16,230
So. So these are you.

4
00:00:16,800 --> 00:00:26,370
You call this factory. So your return value is that you're calling this factory a function again, if a factory function and that the times end.

5
00:00:26,400 --> 00:00:34,280
That's that's exactly the refining that defining it this way and the return value whatever return values just return it.

6
00:00:34,290 --> 00:00:37,470
That's, that's how I would define it.

7
00:00:38,360 --> 00:00:51,320
Okay. Ken, if you look at the factory with ten is going to you're going to have this value.

8
00:00:52,100 --> 00:00:58,790
If you don't remember what the picture of of ten is, you can do a smaller number like five and it should be still working fine.

9
00:01:00,050 --> 00:01:09,860
Okay. So I get that this function works, but this, if you're having problems with the recording before this is extremely confusing.

10
00:01:09,860 --> 00:01:13,220
How does this work? Right. The extremely confusing.

11
00:01:13,880 --> 00:01:22,040
So let's try it on this thing. Okay. Now what I'm doing here is that same function.

12
00:01:22,040 --> 00:01:32,000
But I added this to like what I'm doing is that I'm printing some messages when the function is called to try to understand how this works.

13
00:01:32,750 --> 00:01:40,670
So I'm printing, I'm printing a message. When the function starts, I'm printing a message when function ends, okay?

14
00:01:41,420 --> 00:01:49,580
And otherwise is exactly same function. Okay, so you should still return the value, but this will print out some messages.

15
00:01:50,090 --> 00:01:53,900
Let's see what happens. So this is what happens.

16
00:01:54,950 --> 00:01:58,670
I call the factory open. So factory L10 is starting.

17
00:02:00,020 --> 00:02:04,070
But before this function ends, factory nine is starting.

18
00:02:04,100 --> 00:02:09,620
Why? Because, in fact, out of ten is calling factory of nine.

19
00:02:10,610 --> 00:02:17,910
Okay. And when you ten before this function starts, you know,

20
00:02:17,990 --> 00:02:25,760
inside this factory or nine it's calling under the function factory of eight factory seven, six, five, so on.

21
00:02:25,760 --> 00:02:30,210
It keeps calling on to factory of zero. Okay.

22
00:02:30,860 --> 00:02:36,010
So all before all these other functions and it keeps calling on the function.

23
00:02:37,130 --> 00:02:41,660
And at the end factory with zero, it's a terminated condition.

24
00:02:41,900 --> 00:02:47,420
So it doesn't call other function. So now written there is one and read it.

25
00:02:47,780 --> 00:02:55,310
The function ends. Factory zero ends now because the factory's you know, and indeed it returns some value.

26
00:02:55,400 --> 00:02:59,900
Now, factory one can end. Factory one started, factory one ends.

27
00:03:00,360 --> 00:03:06,889
Okay, so it's all nested then. And these functions are called with inside the function.

28
00:03:06,890 --> 00:03:14,180
Inside the function in a sort of mysterious. If you if you didn't know that this could happen in computer.

29
00:03:14,540 --> 00:03:18,350
But this happens a lot in actual programing.

30
00:03:19,730 --> 00:03:26,180
So it works pretty much similar to how you would imagine in mathematical imagination.

31
00:03:26,480 --> 00:03:29,960
Actually, this can be translated in computation step.

32
00:03:31,370 --> 00:03:37,490
So that's how this works. And it returns this. Does this make sense?

33
00:03:37,760 --> 00:03:44,310
Is it still computing? Okay. So that's.

34
00:03:45,680 --> 00:03:49,270
That. Okay.

35
00:03:49,780 --> 00:03:53,110
So I hope that I can explain how I had a list.

36
00:03:54,640 --> 00:03:58,870
So how many of you know our 100 problem?

37
00:04:00,670 --> 00:04:08,049
Oh, okay. You probably did a very good reading in your high school or, you know, or in college.

38
00:04:08,050 --> 00:04:12,670
I guess so. Or elementary school.

39
00:04:12,850 --> 00:04:17,170
If you're if you if you like reading a lot, you get so.

40
00:04:18,790 --> 00:04:26,600
So here. The problem here is that you have a set of disk.

41
00:04:27,070 --> 00:04:33,850
Okay. Ordered by size and your task is then moving the stack of desk to another road.

42
00:04:34,180 --> 00:04:41,620
So to the left, currently in the rough, to most of the road. Let's let's say that the problem is moving to the right one.

43
00:04:42,370 --> 00:04:47,169
But the you cannot move multiple this at a time.

44
00:04:47,170 --> 00:04:59,350
You can move one disk at a time and you cannot you can use only these three roads and you cannot place a disk on top of a smaller disk.

45
00:04:59,860 --> 00:05:02,950
Okay. You can place a disk only on top of the larger disk.

46
00:05:03,610 --> 00:05:05,260
That is the rule.

47
00:05:06,430 --> 00:05:19,150
And if you wanted to move all this stack of disk to the other 1/1, is it possible in the second half, what is the right sequence to do that?

48
00:05:19,870 --> 00:05:22,960
Third, how much move does it does it require?

49
00:05:23,140 --> 00:05:27,160
So that that those are the questions. Okay.

50
00:05:28,190 --> 00:05:33,800
So if you know the answer, uh, you may not be curious about this is an interesting problem.

51
00:05:35,750 --> 00:05:46,550
Okay, so this is YouTube video we can watch. Okay, just so I'm going to I think I don't think I can I connect to the audio.

52
00:05:47,150 --> 00:05:50,270
So you probably don't hear the audio and that's fine.

53
00:05:50,840 --> 00:05:56,450
Let me let me just show how this works in in this example.

54
00:05:56,730 --> 00:06:04,910
Okay. So this is this is how how these people solve solve this problem.

55
00:06:06,170 --> 00:06:15,050
And can you understand how what they're doing? Why why do they do it this way and why this is solution?

56
00:06:19,830 --> 00:06:24,000
So the thing I want you to think about is that how do you.

57
00:06:25,080 --> 00:06:29,460
Well, you need to come up with your solution first in your in your brain.

58
00:06:30,360 --> 00:06:39,030
And second, can you describe the describe the step in idealism in a very specific way the computer can understand.

59
00:06:54,880 --> 00:06:58,750
So this this looks like very arbitrary if you don't know the rule.

60
00:06:59,200 --> 00:07:01,930
But if you understood the rule, this is not arbitrary.

61
00:07:06,000 --> 00:07:13,350
That they're they're solving their looks like it's like they're looks they are solving the problem.

62
00:07:13,350 --> 00:07:18,989
But it's sometimes it doesn't look like it's solving the problem. I mean I mean, this takes a long time.

63
00:07:18,990 --> 00:07:26,020
So let me let me just move on here. And it eventually they come up with a solution, okay?

64
00:07:26,700 --> 00:07:31,230
Like this works okay, but takes a really long time.

65
00:07:32,790 --> 00:07:37,380
It says it takes 255 move to do that.

66
00:07:39,340 --> 00:07:43,720
Why? 255. What's happening here in the in that algorithm?

67
00:07:46,070 --> 00:07:55,870
Oh, okay. So does the solution here.

68
00:07:58,030 --> 00:08:01,300
Oh, is that so? You can.

69
00:08:01,330 --> 00:08:04,840
You need to solve this problem. You need to think recursively.

70
00:08:05,080 --> 00:08:09,610
So that's the easiest way to solve it. Okay, so how do you do it?

71
00:08:10,300 --> 00:08:20,230
I mean, in mathematics, we do it a lot. Suppose that we know how to move and minus one disk from one road to another.

72
00:08:20,270 --> 00:08:23,830
What? Let's say we know the solution. Okay.

73
00:08:24,340 --> 00:08:27,850
And let's try to focus on how to move the largest disk.

74
00:08:30,710 --> 00:08:41,840
Then this is the step you need to do Google and minus one disk two from the left left tower to the middle tower and move the largest,

75
00:08:41,960 --> 00:08:51,140
largest disk to the right power and move, move those M11 disk again from the middle tower to the rightmost tower.

76
00:08:51,560 --> 00:08:54,740
So that's the solution mathematically.

77
00:08:55,310 --> 00:09:00,070
And if you have time at home, try to think about how to implement this.

78
00:09:00,080 --> 00:09:04,850
Are getting them in actual working like programing languages.

79
00:09:05,330 --> 00:09:09,260
Okay, that's all I have today and thank you.

80
00:09:09,500 --> 00:09:15,200
And we'll have office hours. If you have questions, feel free to follow me in a meeting.

81
00:09:15,200 --> 00:09:15,740
My office.

