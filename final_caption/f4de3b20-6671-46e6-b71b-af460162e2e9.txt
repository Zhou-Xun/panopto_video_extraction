1
00:00:21,900 --> 00:00:39,980
Okay. These are indeed some of the things.

2
00:00:41,700 --> 00:00:45,180
Well, see, 2022.

3
00:00:45,250 --> 00:00:49,020
So I used to go through the Civil War.

4
00:00:49,690 --> 00:00:57,620
This is similar to the other modules, if you will.

5
00:01:00,450 --> 00:01:07,019
There's a few new people. At the same time, it does.

6
00:01:07,020 --> 00:01:11,960
It's supposed to go slightly longer, just the official class time.

7
00:01:13,110 --> 00:01:19,100
So an extra 15 minutes just because we have and there's only eight lecture times and nine.

8
00:01:22,170 --> 00:01:28,590
That's really the only difference. And a lot of the same office hours also she assigned like the same office hours

9
00:01:28,650 --> 00:01:33,570
and you can come in the hall of the office for a while and also my resume.

10
00:01:33,960 --> 00:01:42,420
You should be able to see the resumes. I didn't have it yet, but I will have zoom link shown here on here.

11
00:01:45,070 --> 00:01:57,209
That's about it. The other only other main difference is I guess we since we only have a lecturers in the last two one,

12
00:01:57,210 --> 00:02:03,390
we're just going to have three homeworks instead instead of two homeworks in the quiz.

13
00:02:04,170 --> 00:02:09,900
So let us be three relatively short homeworks, at least most of them.

14
00:02:11,040 --> 00:02:20,470
And then one longer assignment, which is kind of just not like a longer homework.

15
00:02:22,650 --> 00:02:31,150
And then then 2 to 2 online quizzes, which is again, pass fail.

16
00:02:31,160 --> 00:02:37,300
Like, like we had in the other one, it's 70% or more.

17
00:02:37,860 --> 00:02:52,890
You kind of get the full credit. So that's the three homeworks, kind of a final assignment, which is like a longer homework and short,

18
00:02:53,790 --> 00:03:01,740
short quizzes, which are usually 70% or more, which again, all with all the points.

19
00:03:05,770 --> 00:03:14,740
The questions about this or. There's a chasm still here.

20
00:03:16,430 --> 00:03:20,570
I saw that regime change was a threat to change.

21
00:03:22,010 --> 00:03:25,910
Oh, yeah. 69 remains. Yeah, it's still here.

22
00:03:25,950 --> 00:03:33,530
Should be here, too. The whole thing's version of insanity.

23
00:03:33,560 --> 00:03:37,730
I mean, there's another point. How much time do we have for each your homework or what assignment?

24
00:03:40,180 --> 00:03:44,200
Usually at least a week. I usually post them a week before it's doable.

25
00:03:45,250 --> 00:03:49,540
So at least a week. Yeah. That's at least a week in most cases.

26
00:03:49,660 --> 00:04:00,560
You know, for the longer one, the last one might slow down or maybe a little bit more than a week and a half.

27
00:04:01,180 --> 00:04:07,120
Yeah. Is there not a final in-class quiz like with the other?

28
00:04:07,370 --> 00:04:09,850
No, there's no final in-class quiz.

29
00:04:11,030 --> 00:04:22,540
So that's really the main difference between this and the previous modules, which is basically is replacing an in-class quiz with a no.

30
00:04:26,690 --> 00:04:34,880
Questions are. If not one's.

31
00:04:38,960 --> 00:04:46,550
It's cool, really. So, yeah, let's get going. Okay, so this is the first lecture.

32
00:04:47,780 --> 00:04:54,049
So just do an overview of this in the other modules.

33
00:04:54,050 --> 00:05:02,800
Let's see. So a reminder what a computer program is.

34
00:05:02,810 --> 00:05:13,160
It's just what you do. It's just kind of a formal language to give kind of a series of instructions to the computer.

35
00:05:13,160 --> 00:05:17,209
It's basically what it is when you're writing for formal language,

36
00:05:17,210 --> 00:05:23,360
for updating kind of instructions to the computer to do some some type of calculation.

37
00:05:23,540 --> 00:05:30,380
Okay. That's what we're doing when we're kind of writing in programing language.

38
00:05:31,460 --> 00:05:45,680
So I just thought I'd mention a few things about C++ that we should know a little bit about what to expect if you haven't done any C++ before.

39
00:05:46,760 --> 00:05:55,459
So I guess the main advantage of C++ is that at least, at least for some things,

40
00:05:55,460 --> 00:06:03,030
it's kind of much more computationally efficient than maybe R Python know.

41
00:06:04,070 --> 00:06:09,620
It's not always a lot more ready for a certain type, especially for certain types of computations.

42
00:06:09,620 --> 00:06:10,970
It can be a lot more efficient.

43
00:06:11,620 --> 00:06:21,680
You know, this is really, I would say, useful if you do it, kind of if you're really for it, kind of programing your own methods.

44
00:06:21,690 --> 00:06:34,190
And in a sense that's really we might find C++ useful if you're not if you never really need that and it's not,

45
00:06:34,190 --> 00:06:38,600
but not as useful as just of the python.

46
00:06:39,860 --> 00:06:43,879
Okay. So kind of an advantage of C++.

47
00:06:43,880 --> 00:06:48,380
It's kind of you need a lot of tools to kind of control.

48
00:06:48,390 --> 00:06:56,720
Exactly. I guess the resource use, you might call it some kind of exactly how much memory is being used to store certain objects.

49
00:07:00,830 --> 00:07:05,570
Probably the kind of the main difference between maybe C++ and or Python.

50
00:07:06,230 --> 00:07:14,720
So you can if you kind of do everything carefully, you can kind of make your computation a lot more efficient.

51
00:07:15,140 --> 00:07:20,030
Okay. So it does have that extra capabilities.

52
00:07:20,330 --> 00:07:28,850
However, I would say because of that, it kind of makes things I'd say it's just not as easy to do the same types of things.

53
00:07:28,850 --> 00:07:31,520
You have to kind of you have to know certain,

54
00:07:31,820 --> 00:07:40,490
I guess you might have to know more things to do that to do an equivalent thing in C++ versus R, for example.

55
00:07:41,070 --> 00:07:46,160
So it's a little bit different. It's a little bit, but not quite as user friendly.

56
00:07:46,780 --> 00:07:56,380
I'll say that. And I guess the other main difference is it's kind of in most cases, it's not as easy to debug,

57
00:07:56,390 --> 00:08:01,280
so it's not as easy to maybe find, find and fix errors in your company.

58
00:08:03,620 --> 00:08:16,970
So it's just a little bit harder to get started. And I think probably for most people, I think that's probably why we did this analysis.

59
00:08:17,700 --> 00:08:27,320
Um, so I guess, you know, one advantage is at least if we're talking about kind of, you know,

60
00:08:27,440 --> 00:08:33,800
C++ for statistics or, or data science is that it can be kind of integrated with other languages.

61
00:08:34,470 --> 00:08:40,310
So talk about that, I guess in the last lecture to more specifically.

62
00:08:40,310 --> 00:08:49,270
Ah, we'll talk about that in more detail, but it can be integrated with Python.

63
00:08:52,670 --> 00:08:57,590
And then I guess the last one, I mean, it's kind of freely available.

64
00:08:59,330 --> 00:09:08,120
The other big advantages and it's also it's kind of been around a long time and we kind of a high view of a large

65
00:09:08,120 --> 00:09:16,010
user base and it's not hard to find kind of answers to certain questions if you just kind of Google around to us.

66
00:09:16,760 --> 00:09:20,480
So there's a lot of.

67
00:09:23,840 --> 00:09:30,690
There's just a big community of people that have used for and continue to use it less and less.

68
00:09:31,710 --> 00:09:43,710
So I just had a kind of a little this table was comparing the C and Python with maybe a few others.

69
00:09:45,480 --> 00:09:53,430
I guess the main thing, if you were to compare programing languages across different criteria,

70
00:09:53,430 --> 00:10:00,510
I guess just the main probably the main advantages of C++, it's basically just computing speed.

71
00:10:01,860 --> 00:10:15,190
And then I guess here, maybe the scalability is you can kind of write it so you can scale to very large data sets for everything else.

72
00:10:15,210 --> 00:10:19,590
I don't really think is there's an advantage of C++,

73
00:10:21,650 --> 00:10:26,850
but it's definitely it's kind of computing speed and it's kind of efficiency at least in

74
00:10:26,850 --> 00:10:33,600
handling larger data sets is really kind of the main be the main advantage for using C++.

75
00:10:34,410 --> 00:10:42,629
Okay. So let's just go just a little bit of over just just kind of, you know,

76
00:10:42,630 --> 00:10:50,820
what to expect when you if if you're going to take this module, you simply select each.

77
00:10:52,520 --> 00:11:08,630
We got through this. This is more for your own use if you're if you're if you need to install kind of development tools for using C++.

78
00:11:11,490 --> 00:11:18,390
So I did this thing for. This is just one way to do it is to.

79
00:11:20,920 --> 00:11:32,970
Kind of install the tools that mean for C++, kind of if you haven't done it before, just in kind of one series of steps I think works pretty well.

80
00:11:34,340 --> 00:11:37,010
So that this is Windows that you're doing kind of a mac,

81
00:11:40,350 --> 00:11:50,890
you basically have to open a terminal or I guess if Xcode is not installed, you have to install that.

82
00:11:50,900 --> 00:11:57,440
So I think that can be installed from the App Store or I guess directly from directly from the terminal as well.

83
00:12:00,770 --> 00:12:08,690
So the terminal is kind of already terminal is should already be there if you if you have a mac.

84
00:12:10,770 --> 00:12:18,110
So if you just search for terminals, if you haven't done that before, something should open up.

85
00:12:20,550 --> 00:12:25,330
Okay. So usually you would, right?

86
00:12:25,340 --> 00:12:28,850
So the terminal is kind of I'll show an example in a little while.

87
00:12:28,850 --> 00:12:37,499
The terminal is where you can execute commands, for example, to like run your, your C++ program,

88
00:12:37,500 --> 00:12:55,120
but where you're going to write kind of your C++ programing is usually in a text editor, something like this Param or VM or Emacs or sublime.

89
00:12:55,130 --> 00:13:02,300
I mean, I just list and a few of a handful of similar, more well known ones.

90
00:13:02,300 --> 00:13:06,960
But I think there's a lot of people out there.

91
00:13:06,980 --> 00:13:13,730
But this is an editor for where you would actually write the code for the program itself.

92
00:13:14,090 --> 00:13:17,989
Okay. This is just an example of the little known ones.

93
00:13:17,990 --> 00:13:23,810
You can use something else if you prefer. Okay.

94
00:13:24,470 --> 00:13:27,850
So something else I've mentioned. So I like this as well.

95
00:13:27,920 --> 00:13:31,370
This is a short example.

96
00:13:31,370 --> 00:13:37,490
I mean, I do think it is useful to know how to do coding from, you know, directly from the terminal.

97
00:13:39,230 --> 00:13:48,860
But if you just want to try out a few programs, if you just want to kind of get started, if you don't want to mess with any of the terminal stuff,

98
00:13:49,370 --> 00:13:58,020
you can actually use this directly because pretty well it's kind of an online editor and compiling,

99
00:13:59,360 --> 00:14:03,830
compiling, run C++ directly and kind of just a single website.

100
00:14:08,120 --> 00:14:16,010
So I think it's just, it's just useful, especially if you're just looking for someone, if you just want to run some examples in the class.

101
00:14:16,490 --> 00:14:22,670
So these are a lot of the examples that we have are just kind of short, you know, small C++ programs.

102
00:14:23,280 --> 00:14:30,860
And I think this is, you know, this works perfectly fine for that if you just kind of play it around and kind of run,

103
00:14:32,150 --> 00:14:36,890
run and experiment with short C++ programs, that is pretty good.

104
00:14:39,290 --> 00:14:45,110
So even in the class, I think I have a lot of screenshots just because I like this one.

105
00:14:45,650 --> 00:14:49,960
Probably the best thing is because I kind of like the way it looks.

106
00:14:49,970 --> 00:14:56,930
You know, you have the code on the left and kind of the output on the right, so it's easy to take screenshots.

107
00:14:56,930 --> 00:15:03,499
So the way it works is you kind of have your this would be the C++ program here and then just

108
00:15:03,500 --> 00:15:08,780
use you would just click the button run and it kind of compiles it and runs it directly.

109
00:15:09,050 --> 00:15:20,990
Okay. So she's kind of that nice to it, at least for like a shorter C++ program that we might have like as examples in class.

110
00:15:23,900 --> 00:15:31,340
Okay. So let's see. Okay.

111
00:15:31,340 --> 00:15:43,069
So let's just start with that exact an example of how I guess, I mean, we'll talk later on about what that what these specific commands are.

112
00:15:43,070 --> 00:15:48,740
But this is a list of examples to show, like what a C++ program looks like.

113
00:15:50,450 --> 00:15:59,840
So this is kind of a very short one. And just this is kind of the classic one you always start with as a first program in a language.

114
00:16:00,650 --> 00:16:05,020
So this just prints out kind of the message, a little biostatistics.

115
00:16:08,360 --> 00:16:14,599
So this is. We'll talk about other ways of getting to the screen.

116
00:16:14,600 --> 00:16:21,980
But this is kind of a common way in C++. You study colon colon cancer and then you kind of.

117
00:16:24,380 --> 00:16:29,690
Yes. You can separate certain items using these other things.

118
00:16:31,580 --> 00:16:39,800
Double. Less than science, I guess. And then this is just it's just this command here just to notice that it's and it's ending the line.

119
00:16:40,310 --> 00:16:44,510
So if we get another message down here, it was trying it out on a new line.

120
00:16:45,740 --> 00:16:55,880
And then I guess we'll talk about this. This is how you include certain libraries that are, I guess not part of like the built in C++.

121
00:16:56,510 --> 00:17:00,989
So IO stream. Yeah, we'll talk about it today.

122
00:17:00,990 --> 00:17:09,890
It's a certain library. So for that we're using kind of see out from the Dido Stream Library.

123
00:17:10,280 --> 00:17:17,480
So that's what that's what that means. This is including a specific library, but we'll talk about that more later.

124
00:17:20,630 --> 00:17:24,980
So yeah, this this is just an example to kind of show what it would look like,

125
00:17:24,980 --> 00:17:32,350
like if you're doing this on your computer at home, this is, I think the ad on my text editor is what I use.

126
00:17:32,350 --> 00:17:36,440
So this is kind of a screenshot of what it looks like on my computer.

127
00:17:37,780 --> 00:17:45,770
And it's a program that we just had, which is a screenshot of what it looks like in my text editor.

128
00:17:46,790 --> 00:17:51,770
And I kind of see that as at a certain location. This is just the same thing.

129
00:17:52,920 --> 00:18:01,130
And so the next step, at least if you have kind of everything installed already, you would have the term.

130
00:18:01,550 --> 00:18:07,280
So this is a screenshot of what the terminal looks like, at least on a mac.

131
00:18:08,150 --> 00:18:23,300
It's the same thing on windows or anything that is pretty similar and usually have some prompt on each line with the computer.

132
00:18:24,020 --> 00:18:27,530
So let's see. I guess pWt is a command.

133
00:18:27,530 --> 00:18:33,020
If you type it, it tells you like the current directory that you're in.

134
00:18:34,010 --> 00:18:39,120
So when you run certain commands you're like located in a certain direction.

135
00:18:40,610 --> 00:18:48,479
PWT Which tells you the current directory. So this is like the home directory for me, meetings just using something, you see.

136
00:18:48,480 --> 00:18:51,890
Handler That's kind of like the home directory on my computer.

137
00:18:52,430 --> 00:18:58,249
So TWD just tells you kind of where you are and which directory you're in.

138
00:18:58,250 --> 00:19:07,250
So if you want to change your directory, you could as it stands for Change Directory.

139
00:19:07,760 --> 00:19:15,230
So if I want to go to this this directory where the file is saved, you just do see the documents.

140
00:19:16,160 --> 00:19:21,200
So this goes to this folder. So this is this is like a folder here.

141
00:19:21,200 --> 00:19:26,900
And then this is a folder within that folder that's just changing the directory.

142
00:19:27,350 --> 00:19:32,450
And if I do TWD now, now it shows that, I mean, just directories.

143
00:19:32,520 --> 00:19:40,700
Okay. So that's kind of that's the directory where, where the example C++ program was saved.

144
00:19:42,290 --> 00:19:46,760
Okay. So something else.

145
00:19:46,880 --> 00:19:50,630
At least if you haven't done much terminal stuff before,

146
00:19:51,290 --> 00:19:56,570
another useful command is less so that just tell us that just prints out basically all of the

147
00:19:57,170 --> 00:20:04,700
basically the files and folders that are in kind of the current directory that you're in.

148
00:20:04,700 --> 00:20:12,589
So I'm in this directory, so this has a bunch of files and other folders in that directory.

149
00:20:12,590 --> 00:20:18,660
So if I just kind of want to make sure that the program that I'm interested in is there,

150
00:20:18,730 --> 00:20:24,350
it's sometimes it's useful to just type in else and in turn, okay, so print it out.

151
00:20:24,350 --> 00:20:28,850
So these are all the ones that don't have an extension or folder.

152
00:20:28,860 --> 00:20:33,020
So like zip code is a folder, data is a folder.

153
00:20:33,800 --> 00:20:38,560
I have a couple of files I think Python notebooks know.

154
00:20:38,600 --> 00:20:49,370
So this is kind of everything that's there but first I think it was in another over the that yeah.

155
00:20:49,380 --> 00:20:58,190
So if you want to go in kind of a further folder down and so within this outlet since

156
00:20:58,190 --> 00:21:04,190
located in this folder is where the the C++ program that I'm interested in this folder.

157
00:21:04,190 --> 00:21:10,940
So you just do need another CD selected through another that just goes from my current directory to that.

158
00:21:11,330 --> 00:21:13,740
So that folder within the registry.

159
00:21:15,860 --> 00:21:30,379
So if I just do CDC, PPE code and I do else with that, that just shows this shows this link shows that I have the c, p, c p files.

160
00:21:30,380 --> 00:21:35,360
It's just called like one underscore how old I c p, okay.

161
00:21:36,080 --> 00:21:46,730
That's kind of how to at least locate files and change directories over kind of using the terminal.

162
00:21:47,060 --> 00:21:56,459
Okay. So that's. Okay, so now let's just get to kind of what's, you know, compiling and running a program.

163
00:21:56,460 --> 00:22:08,180
So to compile and using the compiler, the kind of the command that you have to use is this G plus plus dash zero.

164
00:22:08,780 --> 00:22:22,200
So that's just telling it to compile, it's just telling it to compile this program kind of this is going to be the command we use to actually run it.

165
00:22:22,740 --> 00:22:29,770
Okay. Which is compiling a little bit more about that.

166
00:22:31,630 --> 00:22:34,990
You have to compile it first and C++ before you actually run it.

167
00:22:36,820 --> 00:22:40,200
And then it's actually run and you just do this dot slash like one level.

168
00:22:42,520 --> 00:22:46,540
So I've just done that here in the terminal window.

169
00:22:46,960 --> 00:22:50,050
First, compile it and run it and then it just runs it.

170
00:22:51,130 --> 00:23:00,120
And then if it printed out something, it should print out. So if your program has some nice touch that it prints out, it should print it out here.

171
00:23:00,130 --> 00:23:04,930
So here it is, throwing out this whole message right here.

172
00:23:06,310 --> 00:23:18,730
So it's kind of just setting a small example of how to run a run and compile a C++ program file saved and kind of run it from the terminal.

173
00:23:25,200 --> 00:23:29,549
Making some more examples in other classmates.

174
00:23:29,550 --> 00:23:38,970
I think that's just a good example. It started with so let's not mention talked about compiling a program.

175
00:23:38,970 --> 00:23:45,900
So let's say something about compiler or at least I don't know, four actually get into a lot of detail,

176
00:23:45,900 --> 00:23:50,400
but at least kind of be up to the basics of what the compiler is doing.

177
00:23:50,400 --> 00:24:07,830
So basically, I mean, you're running a program or you're on kind of the base level, you have to use kind of binary code, right?

178
00:24:08,910 --> 00:24:19,200
Eventually for a computer to be able to execute something, you have to kind of convert everything to zeros and ones.

179
00:24:20,910 --> 00:24:29,780
So that's kind of all of the instructions that are written in your program.

180
00:24:30,630 --> 00:24:33,990
It has to be converted in some way into zeros and ones.

181
00:24:33,990 --> 00:24:39,450
So that kind of the computer can interpret, the computer can actually use that.

182
00:24:40,290 --> 00:24:46,890
So basically what it compilers doing is converting the code that you've written into binary

183
00:24:47,910 --> 00:24:54,450
so that you know the instructions that you have in your code can be executed by the computer.

184
00:24:54,570 --> 00:25:07,500
Okay. So it's, I guess compile code is basically the, the entire program gets converted into binary code before it's actually run.

185
00:25:07,500 --> 00:25:14,220
So when you use when you do this, when you do this step,

186
00:25:14,310 --> 00:25:22,410
when you run this command that's basically converting your C++ programing to kind of binary code.

187
00:25:22,710 --> 00:25:30,570
Okay. And and then in this step, that's kind of actually the binary code is actually executed.

188
00:25:31,260 --> 00:25:35,129
Okay. So typically,

189
00:25:35,130 --> 00:25:46,080
I would say at least once it's compiled and everything is in kind of binary compile code is typically faster than code that needs to be interpreted.

190
00:25:46,230 --> 00:25:51,930
So the power of Python are in Python or interpreted languages.

191
00:25:54,210 --> 00:25:58,530
So I'll talk about the distinction on the next slide.

192
00:25:58,530 --> 00:26:11,879
But if you have compiled code kind of at least once it's compiled and it's already in binary once it's that once you execute that,

193
00:26:11,880 --> 00:26:15,690
it's typically going to be faster than the code that has to be interpreted.

194
00:26:16,740 --> 00:26:30,330
Okay. So this is just talk about kind of this kind of rough difference between interpreted and compile languages.

195
00:26:32,610 --> 00:26:39,450
Okay. So tons of details, but programing languages like are basically interpreting languages.

196
00:26:39,970 --> 00:26:46,650
I guess the main way to like is think about the difference is that, you know,

197
00:26:47,130 --> 00:26:54,030
like in interpreting language, you kind of rate each line of code one by one, one at a time.

198
00:26:58,390 --> 00:27:02,980
And then they'll stop kind of whatever, you know, kind of the first line that it hits.

199
00:27:02,980 --> 00:27:12,190
And you're basically like, if you run our script, you can kind of run one line one at a time.

200
00:27:12,190 --> 00:27:22,030
That's perfectly fine. And it'll kind of, it'll stop whenever it hit, whenever it, whenever it encounters kind of an error of some kind.

201
00:27:22,280 --> 00:27:35,080
Okay. So it's not like you compile the entire program or script, for example, before, before it's executed, it's kind of kind of executing everything.

202
00:27:35,920 --> 00:27:44,050
Even if you have a separate script file and you run it, it's still kind of executing every the lines of that script kind of one at a time.

203
00:27:46,810 --> 00:27:57,680
So an advantage of, I would say, interpreted languages that are usually easier to find the errors because you can usually because usually it'll,

204
00:27:57,730 --> 00:28:11,020
it'll, it'll stop or it'll pronounce an error message kind of the first time I at the first line where some error is encountered.

205
00:28:11,590 --> 00:28:21,090
So you know, interpretive languages are kind of a little bit easier to find where the errors are over there.

206
00:28:21,120 --> 00:28:33,940
They're slower, at least for a lot of things, um, especially if you're using groups of about this content later.

207
00:28:34,270 --> 00:28:40,659
But if you're using some, if you're using loops, especially if you have loops with a lot of iterations,

208
00:28:40,660 --> 00:28:45,820
that can be a lot slower than doing kind of the equivalent thing in C++.

209
00:28:46,480 --> 00:28:56,080
So if you have kind of code where you at least you're forced to use the loops with a lot of iterations, that's, that's a.

210
00:28:59,590 --> 00:29:07,540
I guess an indication that you could get a lot of efficiency gains if you moved it to C++.

211
00:29:09,640 --> 00:29:25,420
Sometimes you can avoid loops in our python by being clever, but by, I guess, using the other capabilities in our python in a certain way.

212
00:29:26,200 --> 00:29:30,579
So sometimes you can avoid it, but for some, some types of computations,

213
00:29:30,580 --> 00:29:35,650
it's pretty it's pretty much unavoidable to use kind of loops with a lot of iterations.

214
00:29:37,480 --> 00:29:46,240
So in those cases, you know, you could gain a lot of efficiency if you switch over to C++.

215
00:29:47,620 --> 00:29:50,980
Okay. So let's I a link here.

216
00:29:51,010 --> 00:29:54,579
And I don't think this gets into a lot of technical details,

217
00:29:54,580 --> 00:30:04,960
but it's just a kind of high level description of the difference between compiler languages versus interpreting languages.

218
00:30:05,800 --> 00:30:13,840
Okay. So that's kind of just a prime example of how to run a program in the terminal.

219
00:30:17,320 --> 00:30:25,840
So now let's actually like talk about actually how to write, you know, specific C++ programs.

220
00:30:26,440 --> 00:30:36,540
So the basic at least, you know, all C++ programs generally have this type of structure where you have a main you have into name.

221
00:30:36,550 --> 00:30:41,890
So if you see something like that. And that's pretty common with C++.

222
00:30:42,580 --> 00:30:54,130
So that's that's going to be the main is kind of the thing it's called main because it's like the main function at least in a in a standalone C++.

223
00:30:56,560 --> 00:31:09,070
It's a program that you can kind of execute by itself. Basically, this return zero is usually just a common way, common thing to use,

224
00:31:09,070 --> 00:31:16,600
because return zero denotes that it's the program has executed successfully.

225
00:31:16,600 --> 00:31:26,140
So you can successful usually usually put return zero at the bottom of the of the function so that it returns zero.

226
00:31:28,450 --> 00:31:31,690
We know that the program has finished successfully. Okay.

227
00:31:32,260 --> 00:31:35,979
So basically, I mean, this doesn't really. So this program really doesn't do anything.

228
00:31:35,980 --> 00:31:40,750
I guess it just I guess it just returns zero without doing anything else.

229
00:31:40,750 --> 00:31:47,559
But once you start coding, you're going to basically you're just going to add you're going to add code.

230
00:31:47,560 --> 00:31:50,890
Here is basically what what you're going to do, at least when we start out.

231
00:31:54,340 --> 00:31:56,319
Once again, I guess more complicated things.

232
00:31:56,320 --> 00:32:04,000
You can have kind of other functions or other kind of other functions, maybe in other files that you can import.

233
00:32:06,310 --> 00:32:13,090
But you would you're you're still going to kind of run the main, main part of the program by executing.

234
00:32:18,350 --> 00:32:26,930
Oh. Oh, I think.

235
00:32:31,930 --> 00:32:39,050
Oh, I think I need to give them a bigger interest. Yeah, this is just another example of this actually says anything and say,

236
00:32:39,380 --> 00:32:44,360
I see this as a minimal example that CPR and it doesn't it doesn't do anything.

237
00:32:47,270 --> 00:32:50,480
This is just another example just to show how to run things from the terminal.

238
00:32:51,080 --> 00:32:55,460
So, again, if I'm in that, I just checked. I just go to the right directory.

239
00:32:56,300 --> 00:32:59,390
I sometimes do else just to make sure that the program is there.

240
00:32:59,920 --> 00:33:08,600
It's a minimal example that C, p, and then to compile it, you just do the same thing.

241
00:33:09,410 --> 00:33:14,090
That's G plus plus dash zero zero dash.

242
00:33:14,090 --> 00:33:18,020
Oh, and then this.

243
00:33:18,020 --> 00:33:29,450
All right, so I, it doesn't really do anything, which is another kind of another example just to show how to run things from the terminal.

244
00:33:30,140 --> 00:33:34,490
So this M.M. example, I mean, it runs, but it doesn't, it doesn't really do anything.

245
00:33:34,490 --> 00:33:39,470
It just runs main and returns zero. It doesn't turn anything else on the screen is.

246
00:33:41,370 --> 00:33:45,720
Okay. So let's see. Okay.

247
00:33:46,770 --> 00:33:50,610
So here's just a, I guess a few things to know to get started.

248
00:33:52,560 --> 00:33:56,460
So any comment or comments that you can write down?

249
00:33:59,310 --> 00:34:05,220
But basically, they don't do anything. They're just kind of comments that you haven't seen in the human language.

250
00:34:06,450 --> 00:34:10,379
So you can write both comments that are only comments for a single line.

251
00:34:10,380 --> 00:34:17,490
Or you can write you can actually write multi line comments in C++ so that the comments

252
00:34:17,490 --> 00:34:28,020
like on a single line side issues this double what word slash example for comments.

253
00:34:30,180 --> 00:34:37,090
I'll show some comments somewhere.

254
00:34:37,300 --> 00:34:43,680
Okay. Okay. So these are comments. So comments on a single line mark.

255
00:34:43,810 --> 00:34:46,410
This is this double forward slash.

256
00:34:46,440 --> 00:34:57,060
Again, like here, if I use do something like this, this is actual C++ code and then you just want to write down kind of a note.

257
00:34:57,930 --> 00:35:03,030
You can use this double slash and that that's a valid comment for a single line.

258
00:35:03,030 --> 00:35:14,910
So that works and everything after and to the right of double slash on this line is that is treated as a common a comment that's ignored by the

259
00:35:15,450 --> 00:35:26,250
compiler you can actually write blocks of code like if you have a comment that's I don't know for some reason it needs to be like 20 lines.

260
00:35:27,030 --> 00:35:37,739
You just started by this forward slash star and then you end in the block by this star for, you know, treat everything,

261
00:35:37,740 --> 00:35:50,820
all of the text in those 20 lines, for example, those that that will be treated as kind of one big common hash mark.

262
00:35:54,330 --> 00:36:02,229
You know, for me to talk about it a lot right now, I think this is going to be at least through this course.

263
00:36:02,230 --> 00:36:05,610
I think this is mostly just importing libraries.

264
00:36:05,620 --> 00:36:16,240
Basically, we're importing code, C++ code that you have in other files, for example, and we usually have something like hash mark included.

265
00:36:16,390 --> 00:36:25,330
It's usually used for that purpose. And if you remember the example we had before, we had included IO stream that was importing the IO stream library.

266
00:36:25,750 --> 00:36:29,050
So that was we had the hash mark included there.

267
00:36:29,350 --> 00:36:39,819
Yeah. So the next important thing to keep in mind, especially if you are a python, you have to be in the kind of every statement.

268
00:36:39,820 --> 00:36:44,560
So basically every line we want to make sure it ends up in the semicolon.

269
00:36:45,730 --> 00:36:49,510
That's a kind of a big difference. Otherwise you're going to have errors.

270
00:36:49,510 --> 00:36:54,219
So every line, every line has to end with a semicolon.

271
00:36:54,220 --> 00:37:00,550
So it's easy to forget, but that's a requirement in every line with a semicolon.

272
00:37:03,610 --> 00:37:07,540
Okay. So basically there's four functions.

273
00:37:07,540 --> 00:37:18,940
Once we start writing functions, other kind of code blocks like inside of a for losing a file statements, order in close by curly braces.

274
00:37:19,090 --> 00:37:30,730
Okay. So kind of stuff you put inside of a function, you should have an open closed and currently braces or like a for a loop or a cell statement,

275
00:37:31,090 --> 00:37:38,770
you should have kind of a list of it's a multi line. We should have kind of an opening, curly braces and a code closing current prices.

276
00:37:40,430 --> 00:37:51,549
Okay. So the other another big difference between like C++ or Python, you have to when you use both variables and functions.

277
00:37:51,550 --> 00:38:04,750
So like when you know, before you use them, you have to declare the type, so you have to she doesn't like automatically infer the type.

278
00:38:05,320 --> 00:38:08,860
So you can't just say like a m equals two.

279
00:38:08,860 --> 00:38:14,140
For example, like you can in r python, you have to declare that it's an integer.

280
00:38:14,530 --> 00:38:18,970
It's an integer type before you use it, before you kind of assigning a value.

281
00:38:20,500 --> 00:38:27,520
So that's also true for functions. You have to declare kind of the type of variable that it's at.

282
00:38:27,520 --> 00:38:39,190
It's going to return. So that's yeah, it's just a big a big difference between C++ and R or Python.

283
00:38:39,190 --> 00:38:43,420
You have to kind of declare the type of a variable or a function before you use.

284
00:38:44,860 --> 00:38:51,879
Okay. And then I guess the question for me is, yeah, I guess this is a big difference between this and our python.

285
00:38:51,880 --> 00:38:59,470
You have to compile your code before you run it, compile your entire program before you run.

286
00:39:00,490 --> 00:39:04,479
All right. So that's I mean, there's a lot of other things you have to know,

287
00:39:04,480 --> 00:39:12,010
but I think these are some a few key things to know before we start writing programs, C++ programs.

288
00:39:12,940 --> 00:39:21,790
Oh, the other thing I mean, I just mention this quickly before we get started is the rules for variable names.

289
00:39:22,750 --> 00:39:30,210
Basically, they have to have everything has to be a letter, a number or underscore.

290
00:39:31,020 --> 00:39:33,179
So you can't really put anything else.

291
00:39:33,180 --> 00:39:42,670
So shoot all of your variable names should have just either the letter number or underscore or something and then they can't,

292
00:39:43,600 --> 00:39:54,700
they can't start with a with a number and it's really the same can have a variable that starts with a number three, for example.

293
00:39:56,080 --> 00:40:02,409
And I think as with most I languages, I think the variable names are case sensitive,

294
00:40:02,410 --> 00:40:10,360
just meaning that you can have a variable called little X and a variable called Capital Max.

295
00:40:10,360 --> 00:40:15,370
And those those those can refer to two different things. So going to be two different variables.

296
00:40:16,450 --> 00:40:20,679
So I think these are in the selection of the same variable name rules.

297
00:40:20,680 --> 00:40:35,999
As for Python letter underscore number basically digits from zero nine, some examples.

298
00:40:36,000 --> 00:40:39,579
So this is invalid. It's starting with two.

299
00:40:39,580 --> 00:40:43,750
This is invalid. It starts with the ad or it has the symbol.

300
00:40:44,620 --> 00:40:50,770
This is invalid because it has a period and then this is also invalid since it has a period.

301
00:40:51,550 --> 00:41:01,290
So that's why all of these for. Invalid. You absolutely have to go with this.

302
00:41:01,290 --> 00:41:05,460
But I think this is helpful to know because we're going to talk about that.

303
00:41:06,150 --> 00:41:09,360
There's like different there's several different types of.

304
00:41:11,620 --> 00:41:19,680
Well, they're not all called floating points, but there are different types that store a kind of,

305
00:41:20,220 --> 00:41:25,710
I guess, numbers that are like it's not integer numbers, the numbers that have decimals.

306
00:41:27,390 --> 00:41:30,240
So I think I just mentioned this just so you kind of know,

307
00:41:30,960 --> 00:41:37,470
you can interpret what they mean because there's like a certain amount of storage that they have for four different types.

308
00:41:38,010 --> 00:41:46,710
So to interpret that just better to remind ourselves about kind of binary digits.

309
00:41:47,340 --> 00:41:50,990
Okay. So like. Okay.

310
00:41:52,560 --> 00:41:56,490
And in computer world, we have bits and bytes.

311
00:41:57,060 --> 00:42:01,670
So a bit is just like a, it's just a single binary digit, it's just a zero.

312
00:42:01,680 --> 00:42:06,690
Our one byte is just kind of a string of eight bits.

313
00:42:07,620 --> 00:42:10,710
So that's just eight bits.

314
00:42:11,560 --> 00:42:16,680
So have zeros and ones. Okay, so how many?

315
00:42:16,740 --> 00:42:21,930
So if you're trying to think of integers, I guess positive for non negative integers from zero.

316
00:42:22,620 --> 00:42:27,990
How many, how many integers can you represent with this with a single byte.

317
00:42:28,830 --> 00:42:35,890
So I guess the answer is zero 255. So why is that so?

318
00:42:36,490 --> 00:42:44,200
Let's think about what kind of an arbitrary representation of a bite that would be eight digits.

319
00:42:44,200 --> 00:42:47,290
I've just labeled it from being zero up to be seven.

320
00:42:47,890 --> 00:42:54,220
Okay, so this is this is a bite. So each of these bouquets are zeros or ones, right?

321
00:42:56,110 --> 00:43:01,090
So the way to kind of convert this to base ten is just the following, I guess.

322
00:43:01,720 --> 00:43:10,450
So like if you have let's say all of the peaks are zero, that that converts to zero and base ten,

323
00:43:12,550 --> 00:43:19,060
let's say the zero is one and all of the rest are zero.

324
00:43:19,070 --> 00:43:30,960
I think that would be that would be like one since you just have to be one times two to the zero power, etc., etc.

325
00:43:30,980 --> 00:43:46,870
We've had some examples here like this is byte zero zero and then one zero that would be two because it's basically only B one is equal to one.

326
00:43:47,740 --> 00:43:51,580
Okay, so bb1 times two at the first power.

327
00:43:51,580 --> 00:44:02,379
So that would be two. So this number here, this by here would be basically one times two, two, zero plus one times two to the one.

328
00:44:02,380 --> 00:44:07,960
So that's three. Okay. That's kind of how you convert binary into base ten.

329
00:44:10,060 --> 00:44:15,670
And then the largest value of this is just where all of the books are equal to one.

330
00:44:16,330 --> 00:44:25,180
So in that case, if you could actually compute compute it, it turns out to be 255.

331
00:44:25,330 --> 00:44:32,860
Okay. So that's why kind of a binary can represent the numbers from zero up to 255.

332
00:44:33,040 --> 00:44:39,520
Okay. So that's kind of the number of possible integers that you can represent with a white.

333
00:44:42,410 --> 00:44:42,730
Okay.

334
00:44:42,740 --> 00:44:56,260
So I think I mentioned that just because we're going to talk about different types of storage possibilities for like decimal numbers that C++ uses.

335
00:44:56,830 --> 00:45:01,360
So there is like the float double and then the long double.

336
00:45:04,840 --> 00:45:12,550
So floats, doubles, long doubles. These are just basically different variable types that we used to store decimal numbers.

337
00:45:12,730 --> 00:45:19,870
Okay. So I guess float is used as the least amount of storage that uses four bytes.

338
00:45:21,070 --> 00:45:34,090
So it's 32 bits and four lines. It's basically just 32 string of 32 zero string, 32 elements long,

339
00:45:34,090 --> 00:45:40,770
which is either zero once the double is eight bytes and it's like 64 bits long double.

340
00:45:40,780 --> 00:45:44,919
I think there's actually difference and I'm sure it uses that much,

341
00:45:44,920 --> 00:45:52,830
but I think there's even a difference sometimes of double you can page or bytes or even more than nine.

342
00:45:52,840 --> 00:46:04,120
So this is you might use this if you want to have like a lot of precision when you're doing very radical calculations.

343
00:46:04,660 --> 00:46:09,790
So the kind of the greater numbers that the larger number of bytes that you have in your variable type,

344
00:46:10,090 --> 00:46:21,610
that's basically the greater precision that you can have when you're storing numbers or doing math with with with your different numbers.

345
00:46:21,670 --> 00:46:36,130
Okay. So I just wanted to mention how exactly kind of the floating point numbers are are stored.

346
00:46:36,640 --> 00:46:41,020
Okay. So the floating point numbers are stored in kind of this system.

347
00:46:43,840 --> 00:46:49,930
They break up a number into with the sign of a number, whether or not it's positive or negative.

348
00:46:50,500 --> 00:47:05,260
You have this experiment part and you have this fraction are sort of at least I mean, it's kind of similar for 32 bit versus 64 bit.

349
00:47:07,330 --> 00:47:19,360
So I just mentioned 32 bit. The only difference you just have kind of greater you have greater number of bits for the exponent or a fractional part.

350
00:47:19,870 --> 00:47:22,990
You're comparing 64 bit versus 32 bit.

351
00:47:23,610 --> 00:47:30,519
Like we have the 32 bits in the way.

352
00:47:30,520 --> 00:47:35,500
It's representing a floating point number. It has a sign part that's just one bit.

353
00:47:36,340 --> 00:47:40,480
There's just there's only some binary information there.

354
00:47:41,080 --> 00:47:46,810
So either positive or negative, there's an exponent part. I'll mention what exactly that is on the next slide.

355
00:47:47,230 --> 00:47:51,550
And then there's a fractional part which has 23 bits for storage.

356
00:47:52,000 --> 00:48:01,980
Okay. So as is the sign, I'm calling it Hamlet, but I called it the.

357
00:48:06,390 --> 00:48:15,840
This is the eighth complaint of digits in the exponent part after being converted to base ten.

358
00:48:15,840 --> 00:48:20,280
So you ten can be from 0 to 255.

359
00:48:23,580 --> 00:48:34,560
I mean, so can you can think of E10 as being a number from zero up to 255 and then it would be changed from 1 to 23.

360
00:48:35,130 --> 00:48:38,250
R isn't binary digits. Okay.

361
00:48:38,970 --> 00:48:46,020
So this is offline cop. This is a fractional part of an anti American analysis of it.

362
00:48:48,360 --> 00:48:58,230
Okay. So the way it converts this into like a base ten number, it just does it has a sign so as can be zero or one.

363
00:48:58,620 --> 00:49:03,990
So if it's zero, this becomes kind of one. So again, this will be a positive number.

364
00:49:04,470 --> 00:49:16,590
If it's one, it'll be a negative number. And then it does this type of thing, the multiplier you raise to to the power of either the ten -127.

365
00:49:17,820 --> 00:49:21,790
So can actually be pretty large or vice versa pretty small.

366
00:49:21,810 --> 00:49:29,250
So if you ten is the maximum number 55, this is like two to the 128th power.

367
00:49:29,970 --> 00:49:34,950
So it's a fairly large number. You know, vice versa can be very small.

368
00:49:35,460 --> 00:49:51,090
If this is 810, a zero seems quite small or quite large, even if even though the ten can only go from 0 to 255 and then multiply it by one plus this,

369
00:49:51,120 --> 00:50:00,240
then this is kind of some fraction is one plus some kind of fraction from decimals.

370
00:50:01,350 --> 00:50:09,000
So this is just kind of a absolutely have to know this for this class, but it's just know why.

371
00:50:09,120 --> 00:50:15,290
Why can you store a wide range of numbers with only 32, 32.

372
00:50:15,500 --> 00:50:19,319
So flow uses 32 bits. Okay.

373
00:50:19,320 --> 00:50:23,610
That's not that's not a ton of numbers.

374
00:50:23,620 --> 00:50:29,279
Maybe it's not a ton of binary digits, but kind of using this type of conversion,

375
00:50:29,280 --> 00:50:38,100
you can kind of represent a pretty wide range of of numbers just with binary, you know, 32 binary digits that.

376
00:50:41,900 --> 00:50:51,160
All right. So if you're do this using 64 bits, which is a similar type of conversion adjuster for the details,

377
00:50:51,170 --> 00:50:58,970
it just uses the fact that you have a little bit more storage from either the fractional part and the exposed part.

378
00:50:59,780 --> 00:51:04,980
Okay. I don't think we actually have to know this for this class.

379
00:51:04,990 --> 00:51:10,370
I just thought I'd put the table there, like at least what we've talked about so far.

380
00:51:10,390 --> 00:51:18,610
Floats double as longs are long double. These are the number of bytes that they use.

381
00:51:18,970 --> 00:51:28,350
So 32 bits, four bytes. This is kind of the numerical precision ones.

382
00:51:29,830 --> 00:51:40,209
Oh, this is the range. Sorry. They can go from ten to the -38 up to ten to the 30th power even with a float,

383
00:51:40,210 --> 00:51:46,780
if you need something larger than that, you know, I think doubles are actually pretty commonly used in C++.

384
00:51:47,500 --> 00:51:53,380
So the doubles are pretty common. You have a pretty, pretty big range in terms of the numbers that you can represent.

385
00:51:53,860 --> 00:51:58,690
You can go up to ten, ten, ten to the 380 power.

386
00:51:58,840 --> 00:52:04,290
I'm going to. Cynthia I think, yeah,

387
00:52:04,290 --> 00:52:10,740
I think couples work pretty well for a lot of most numerical computations for the

388
00:52:10,760 --> 00:52:15,670
wide range of numbers that you can represent just with these these looping bytes.

389
00:52:18,330 --> 00:52:27,900
Okay. So I don't I don't I don't think you have to memorize all of these, at least for now.

390
00:52:28,920 --> 00:52:32,730
I just put it as kind of a reference as the as a different types.

391
00:52:34,440 --> 00:52:38,970
So let's see. Yeah.

392
00:52:39,060 --> 00:52:48,870
Like I said before, I think, you know, C++ allows you kind of a lot of control of exactly how much memory is.

393
00:52:49,320 --> 00:52:54,300
So that's kind of the difference is different integer types.

394
00:52:54,760 --> 00:53:00,270
If you kind of know the allowable set of integers, you can save space on memory.

395
00:53:00,810 --> 00:53:07,410
So if you really just use as little memory as possible,

396
00:53:07,410 --> 00:53:13,960
you might want to read all of this documentation on different types of ends or different types of characters.

397
00:53:14,010 --> 00:53:18,500
Okay. So I think we need to I don't think you need to know that right now.

398
00:53:18,510 --> 00:53:27,400
I think probably what you need to know now is just the, you know, floats and doubles are mostly going to be used for kind of decimal numbers.

399
00:53:28,320 --> 00:53:34,620
Talk about Boolean types and then the main integer type is the.

400
00:53:38,600 --> 00:53:43,880
This. It's kind of the basic integer unsigned in it.

401
00:53:44,480 --> 00:53:48,309
And it also talk about characters a little bit later. Okay.

402
00:53:48,310 --> 00:53:56,380
So this is I didn't put this inside of a program, but this is just once we start writing a program, this is how you declare variables.

403
00:53:57,190 --> 00:54:03,760
Okay. So the way you declare variables is kind of like this.

404
00:54:03,770 --> 00:54:08,049
So let's say we want to use the variable A somewhere in our program.

405
00:54:08,050 --> 00:54:14,410
Before we use it, we have to declare it. So you have to say like a semicolon.

406
00:54:14,620 --> 00:54:23,320
Okay. You you you can give it an an initial value kind of before you use it.

407
00:54:24,820 --> 00:54:31,950
So you can give it an initial value on the same line that you declare it so that that that is allowed.

408
00:54:31,960 --> 00:54:44,080
So if you want to declare an integer called B and give it an initial value of one in the display, to say and B is equal to one semicolon.

409
00:54:48,260 --> 00:54:53,059
And another way to do it is this. And you can also do it this way.

410
00:54:53,060 --> 00:54:58,090
And this is also another way of declaring an integer and giving it an initial value.

411
00:54:58,900 --> 00:55:07,629
So C is equal to two. Here are some other examples of other types of a boolean variable.

412
00:55:07,630 --> 00:55:11,680
So we'll talk about that a little later.

413
00:55:13,270 --> 00:55:17,230
So Boolean variables in C++ are just like true and false values.

414
00:55:17,650 --> 00:55:25,150
So if I want to declare it and give it an initial value of true I studious bool equals true.

415
00:55:25,930 --> 00:55:34,399
But. If I want to declare a double, you can do it this way.

416
00:55:34,400 --> 00:55:42,690
So you can actually, if you want to use kind of the, the scientific notation ten to certain power.

417
00:55:43,070 --> 00:55:50,510
So if I want to say 6.0 to 2 times ten to the 23rd, that's the double I want to declare.

418
00:55:50,510 --> 00:55:57,979
You can do it this way. 622 to 23 is kind of the syntax you use.

419
00:55:57,980 --> 00:56:05,540
If you want to use that. You want to declare numbers like as times ten to a certain power.

420
00:56:05,600 --> 00:56:22,630
That's kind of a syntax you have to use. So if you can set it equal to like another variable actually in the declaration as well.

421
00:56:22,660 --> 00:56:31,090
You could do it as equals B. I mean, it does have to be the same type B as an integer.

422
00:56:31,100 --> 00:56:35,469
So this is this is kind of valid. It's an integer.

423
00:56:35,470 --> 00:56:40,160
And you set it equal to be. So B is since B is an integer, this is valid.

424
00:56:40,960 --> 00:56:48,910
You can actually convert types actually when you declare it.

425
00:56:48,970 --> 00:56:55,870
So if if it's not the same type you could declare, you couldn't do the conversion when you when you declare.

426
00:56:55,950 --> 00:57:00,850
So sometimes that's called casting. So if I want to.

427
00:57:02,200 --> 00:57:07,960
So here is a double variable.

428
00:57:11,080 --> 00:57:18,850
And if you want to convert it to a float, you just have to do the kind of this thing not subject equal to that.

429
00:57:20,050 --> 00:57:24,520
So you can you can type conversion.

430
00:57:24,520 --> 00:57:29,169
This is kind of in this syntax. Okay.

431
00:57:29,170 --> 00:57:36,380
So. Yes.

432
00:57:36,420 --> 00:57:42,980
Okay. So that's that's like variable declaration and doubles and floats.

433
00:57:43,690 --> 00:57:47,000
The next thing I wanted to talk about was strings. I guess it's not really like a.

434
00:57:49,090 --> 00:58:00,710
Which means it's not really a fundamental. Obviously it's not a fundamental data type, I guess you would say, in C++.

435
00:58:01,430 --> 00:58:05,270
It's really like an array of characters.

436
00:58:05,540 --> 00:58:09,320
So I'll talk about arrays a little bit later on.

437
00:58:11,660 --> 00:58:18,530
Arrays are just kind of just a collection of items, more or less so you can think of as just a collection of characters.

438
00:58:18,530 --> 00:58:27,530
So strings are usually used to represent words or a collection of words, so you can think of those as just an array of characters.

439
00:58:31,430 --> 00:58:35,240
So in C++, strings are enclosed by double quotes.

440
00:58:35,960 --> 00:58:40,760
So for example, if you wanted to store in like the text C++,

441
00:58:42,270 --> 00:58:51,259
you would you would usually store that as a string and you would put it inside double quotes and then for

442
00:58:51,260 --> 00:58:58,700
single characters so that the character here is a char is the it's kind of like a fundamental data type.

443
00:58:59,480 --> 00:59:07,940
So you charge just a single, single character like the letter A for example, usually put that in single quotes.

444
00:59:11,530 --> 00:59:15,820
So yeah, single plotter usually used to represent individual character.

445
00:59:19,040 --> 00:59:38,290
It's here first, so. I go to the notice string, you have to put opening chords and closing chords.

446
00:59:38,830 --> 00:59:45,730
If your string, as I quote inside of it, like you want to put the symbol quotes inside of your string.

447
00:59:46,150 --> 00:59:55,540
Usually you have to put this kind of backslash before the quotation marks so that it treats as part of the string and it doesn't close the string.

448
00:59:56,050 --> 01:00:04,780
So that's something to be aware of. Sometimes you want your string to have a line break that's might be useful.

449
01:00:04,780 --> 01:00:11,109
If you're printing something out, it knows where. After this, to to start a new line.

450
01:00:11,110 --> 01:00:17,290
So if you use the backslash and that denotes a kind of a line break, like a new line is starting.

451
01:00:23,050 --> 01:00:29,970
So a backslash is like a special. So this represents tab and sometimes you,

452
01:00:31,560 --> 01:00:40,480
you don't know what your backslash to represent a state character you want the backslash to be part of the string.

453
01:00:40,480 --> 01:00:44,200
So you want the character backslash to be part of your string.

454
01:00:44,200 --> 01:00:48,280
In that case, you just use kind of double backslash. Okay, so these are just.

455
01:00:52,100 --> 01:00:58,460
These are just things that might might come in handy later on if you if you have kind of a specific type of.

456
01:01:03,250 --> 01:01:06,510
Weird thing that they want to include as part of their stream.

457
01:01:07,120 --> 01:01:11,130
Okay, look, I mentioned Strange first.

458
01:01:20,830 --> 01:01:25,620
They couldn't put it after that, but I think we'll have some examples with strings later.

459
01:01:25,620 --> 01:01:29,790
So I think the other thing I wanted to talk about is is extreme.

460
01:01:30,400 --> 01:01:36,120
So I mean, I think I'm just talking about this just because these are useful things to know,

461
01:01:36,120 --> 01:01:41,459
at least to start writing kind of basic C++ programs like the example that we had

462
01:01:41,460 --> 01:01:46,230
at the beginning where we just printed a message that use the extreme library.

463
01:01:46,230 --> 01:01:51,530
So it's good to know at least some of the basic functions from this library.

464
01:01:52,090 --> 01:01:58,560
There's just kind of convenient ways to get either like input from the user or to print certain messages.

465
01:01:59,130 --> 01:02:05,190
So I'm kind of starting mentioning that first, just in case you want to play.

466
01:02:05,190 --> 01:02:08,640
Starting, right? Start writing some basic programs.

467
01:02:09,100 --> 01:02:17,399
Okay. So I know Stream is kind of just a library for your input output capabilities.

468
01:02:17,400 --> 01:02:32,050
It's basically things that can display messages on the screen when you run the program or or either get input from a user, for example, you know,

469
01:02:32,100 --> 01:02:43,050
you can have a program or if it prompts the user to input something and then I can take what input in the keyboard as your input to your program.

470
01:02:43,180 --> 01:02:55,059
Okay. There's also some. There's also some useful functions I think we'll talk about later in terms of know writing output to certain files.

471
01:02:55,060 --> 01:03:03,040
So in many cases, your C++ program computes something and you want to save the results to a to a file.

472
01:03:03,040 --> 01:03:06,970
So you either streamline some functions for that. Okay.

473
01:03:15,420 --> 01:03:19,380
I don't know if I mean, extra things are that clear.

474
01:03:20,210 --> 01:03:31,790
I'm just saying that. Can the standards include alcohol or you putting food on a screen or getting on the keyboard?

475
01:03:32,960 --> 01:03:40,820
Okay. So to use extreme stream, you have to do this, including this hash include IO stream at the top of your program.

476
01:03:44,580 --> 01:03:51,000
Okay. So you have to include that. That's you you put this at the top of your program before and main.

477
01:03:51,060 --> 01:03:58,860
That's where you would have to put put this. So once you do that, you can use at least some of these kind of key functions.

478
01:03:58,860 --> 01:04:07,200
I would say these are probably the most important things, at least starting out.

479
01:04:07,410 --> 01:04:18,660
There's a lot of other things, but on the scene it's how you get to kind of prompt the user to input data to the keyboard.

480
01:04:19,830 --> 01:04:23,220
See out is how you print messages to the screen.

481
01:04:24,330 --> 01:04:30,310
See, error is how you do it.

482
01:04:30,400 --> 01:04:39,690
Turn out an error message and l is how you do how you just tell it.

483
01:04:40,110 --> 01:04:46,250
To note that this is the end of the line. After this, you should kind of print things out on the line.

484
01:04:49,450 --> 01:04:59,969
Okay, so these double is less, less than sign.

485
01:04:59,970 --> 01:05:08,310
It's just kind of a thing that you basically do after this is what you put after.

486
01:05:08,310 --> 01:05:11,430
This is the thing that you want to print on the screen is kind of how it works.

487
01:05:11,880 --> 01:05:15,720
It's more or less telling it, sending the message to that see out function.

488
01:05:15,720 --> 01:05:19,770
And then if you're getting input from the user, you want to use kind of the reverse symbol.

489
01:05:20,370 --> 01:05:32,250
I think it'll be clear. It'll be clear when you see some examples and the reason for using this s t d so io stream is kind of.

490
01:05:34,440 --> 01:05:38,820
It's part of this standard template library.

491
01:05:43,120 --> 01:05:46,950
So you're kind of telling it that the function is from that that libraries that

492
01:05:46,960 --> 01:05:51,640
way that works there's a there's a way to actually include using namespace

493
01:05:51,640 --> 01:05:57,160
hosted you actually don't have to write STD double colon every time I see you

494
01:05:57,160 --> 01:06:01,690
don't always have to use this but if you only include put include IO stream,

495
01:06:01,690 --> 01:06:05,080
you'd have to put included as CD Double Colon.

496
01:06:05,650 --> 01:06:11,410
Well, we'll see. Yeah, we'll see some examples of this. Okay. So this is just in a little example.

497
01:06:11,410 --> 01:06:17,430
I think this should this probably make things a bit more clear.

498
01:06:17,440 --> 01:06:22,900
So this is just a small C++ program that uses IO stream.

499
01:06:23,780 --> 01:06:27,040
So here again, I put the include IO stream at the top.

500
01:06:27,700 --> 01:06:33,559
So you have to put this before Main. And here I've just put some examples of the comments.

501
01:06:33,560 --> 01:06:45,970
So we have comments using this double slash, double forward slash of these two lines are just comments and then main and this is the main function.

502
01:06:46,810 --> 01:06:50,080
So this first line, it's going to print out Hello World.

503
01:06:50,800 --> 01:06:57,940
So the way this works, you just have C out. You kind of after this, these two symbols.

504
01:06:58,540 --> 01:07:02,860
This is kind of just telling you what to print out.

505
01:07:03,070 --> 01:07:13,000
Okay. And here to put this just to say that we're ending the line in the next hour should print everything on a different line.

506
01:07:13,760 --> 01:07:20,140
Okay. So the way the CIA works, the way it works, you usually do different type.

507
01:07:20,290 --> 01:07:28,870
Different data types are separated by these less than symbols.

508
01:07:29,440 --> 01:07:34,620
So if I want to mix kind of numbers and strings, you should have.

509
01:07:37,210 --> 01:07:41,110
You should separate those items with different less than symbols.

510
01:07:41,660 --> 01:07:50,260
Okay. So if I would just want to say three times eight is oh, you could put I mean, you could put the eight actually in inside of the string.

511
01:07:50,260 --> 01:07:57,270
But I'm just saying, if you want to put the actual integers themselves, you could do it this way.

512
01:07:57,280 --> 01:08:01,590
So I'm just saying three times eight is three times eight.

513
01:08:01,600 --> 01:08:05,260
So this is useful if you, if you have like variables.

514
01:08:09,440 --> 01:08:14,610
That store certain numbers so you can print those out directly.

515
01:08:14,800 --> 01:08:19,160
Okay. So in this case, this is kind of an example of this.

516
01:08:19,160 --> 01:08:24,800
I'm actually doing the multiplication inside here, so it should print out 24.

517
01:08:25,220 --> 01:08:30,350
So I have three times eight. I mean, I, I could have written it directly.

518
01:08:30,350 --> 01:08:36,860
Like three times eight is written out 24 and you know, big thing in quotes.

519
01:08:36,860 --> 01:08:46,639
But I'm just showing an example of if you're mixing kind of integer types and string types and a single statement, this is how you would use it.

520
01:08:46,640 --> 01:09:01,410
You kind of separate them by these different double arrow symbols and less than symbols equals like point.

521
01:09:03,290 --> 01:09:12,000
Okay. So there's this alternative?

522
01:09:14,850 --> 01:09:23,670
Yeah, there's an alternative, basically. So see out is, I guess something that's kind of used with that of the C++,

523
01:09:24,780 --> 01:09:33,989
which is maybe if I want to call it more user friendly, maybe it has some extra some more nice capabilities.

524
01:09:33,990 --> 01:09:43,950
But this there's an alternative which is print F and this is kind of a I don't know, this is a holdover from C.

525
01:09:43,950 --> 01:09:44,950
So print F was,

526
01:09:45,300 --> 01:09:55,440
was actually something that's available in the ah kind of the original C language and that's kind of a system for printing out things to the screen.

527
01:09:56,560 --> 01:09:58,040
So I'm kind of doing both in this class.

528
01:09:58,070 --> 01:10:08,070
I don't know if it's you should do both, but I think just because you often see print F or related things in C++ code,

529
01:10:08,070 --> 01:10:17,040
so it might be good to be able to know how to use both, both both ways of C out versus print.

530
01:10:17,090 --> 01:10:27,600
F So if you're using kind of print. F, you want to include this C studio instead of I o st.

531
01:10:28,110 --> 01:10:36,719
So C studio is kind of like the original C language type of system for input.

532
01:10:36,720 --> 01:10:42,000
Um, so C io is kind of what that refers to.

533
01:10:42,630 --> 01:10:48,090
Okay. So print f is kind of one of them and would be one of the main functions from that library.

534
01:10:48,690 --> 01:10:54,060
So the way this works is you have when you're using an F, you'll often see these percent signs.

535
01:10:57,750 --> 01:11:04,920
Okay. So maybe it's maybe the examples make it a little clearer.

536
01:11:06,420 --> 01:11:16,680
So the way you do it is you you print out something, and then you have this person sign some type of letter or something.

537
01:11:17,820 --> 01:11:29,250
And so that's telling you that you want to, at least in this case, the s is telling you that you want to print out a string variable.

538
01:11:32,520 --> 01:11:37,919
Okay. So it's it's going to print out something that's represented by the string variable.

539
01:11:37,920 --> 01:11:41,010
And then then after that, it's going to kind of skip a line.

540
01:11:41,670 --> 01:11:52,110
And so this is kind of the arguments that follow in the function that's going to it kind of treats that as the the string variable here.

541
01:11:52,530 --> 01:11:56,259
Okay. So this is actually not for an out hello world.

542
01:11:56,260 --> 01:12:05,680
So it kind of uses this, uh, this text here in this position, I guess is the kind of the way it works.

543
01:12:06,970 --> 01:12:15,420
Another example, isn't it? As if we're printing out like integers you use percent D instead of percent.

544
01:12:15,610 --> 01:12:20,470
So percent s is for strings or d is for integers.

545
01:12:21,190 --> 01:12:26,259
We can see later percent f is for doubles. This is an example of integers.

546
01:12:26,260 --> 01:12:31,840
So here you can have kind of multiple integers.

547
01:12:32,680 --> 01:12:36,490
So percent d that means it's going to use the first integer that we give it.

548
01:12:37,450 --> 01:12:45,130
And here this next one is going to print the second integer that we give it, and here it's going to print the third integer that we give it.

549
01:12:46,090 --> 01:12:50,530
Okay. Okay.

550
01:12:50,530 --> 01:12:58,450
So that's yeah, that's just an example like in the full description, I don't know if I don't really have this memorized,

551
01:12:59,440 --> 01:13:04,839
but I put it there for reference because we can give it kind of a lot more options.

552
01:13:04,840 --> 01:13:12,370
So I think that the only thing that you have to give it is the percent percent symbol and then you have to give it the specifying.

553
01:13:13,090 --> 01:13:16,749
So the specify is really the type of conversion type.

554
01:13:16,750 --> 01:13:24,580
So it's like the specifiers and as if it's a string, it's a D, if it's an integer and it's an F, for example.

555
01:13:24,940 --> 01:13:31,120
Okay, there's other things that you can give it if you wanted to print it out.

556
01:13:31,120 --> 01:13:38,889
Like if you have a very specific format that you want to print out in, like the precision,

557
01:13:38,890 --> 01:13:44,470
for example, the decimal precision and a float that's kind of this type of thing.

558
01:13:44,560 --> 01:13:53,860
You put it in brackets before, like you put it in brackets before the specify or you can give it the length or other things.

559
01:13:54,910 --> 01:14:02,440
And we have some examples later, but I usually know I don't really have this memorized.

560
01:14:03,790 --> 01:14:08,980
I usually with most most of the time it would be something fun or not in a certain format.

561
01:14:09,910 --> 01:14:19,030
I think the thing to maybe memorize is like the percent and the specify or if you want to if you want to print it out in a very specific format,

562
01:14:19,540 --> 01:14:24,940
you might want to just refer to this. Right? So it's more this is more for reference.

563
01:14:25,510 --> 01:14:35,670
This is really just these are just things that you would have to know if you have kind of a very specific format that you want to print things out.

564
01:14:36,850 --> 01:14:41,440
Okay. So this is just this is another thing and that's my mostly just for reference.

565
01:14:44,320 --> 01:14:45,490
So I think, I mean,

566
01:14:47,770 --> 01:14:56,140
things that you're going to be mostly using is like I don't think this has s it's going to be S for string percent C for character,

567
01:14:56,770 --> 01:15:06,940
percent F for floating points or percent D for for integers.

568
01:15:06,970 --> 01:15:19,690
Okay. That's probably what you're mostly going to be have to keep in mind if you're using an F, there are other formats,

569
01:15:19,690 --> 01:15:25,870
but I think if you're dealing with other types of variables, you could just you could just look it up.

570
01:15:26,080 --> 01:15:28,299
Okay. So this is more just like a reference.

571
01:15:28,300 --> 01:15:38,650
If you need if you need to look up kind of the kind of the F syntax for that type, you could just you can just look it up.

572
01:15:38,650 --> 01:15:43,000
I don't think you have to you don't have to memorize it. I don't think it's useful to memorize that.

573
01:15:46,340 --> 01:15:56,110
Okay. So maybe you'll notice in a lot of detail.

574
01:16:00,530 --> 01:16:03,770
We'll get to strings, but it's okay.

575
01:16:04,010 --> 01:16:06,200
So I think I'll just do at least a few more,

576
01:16:06,740 --> 01:16:14,750
a few more slides we'll wrap up today and we'll try and we'll try to implement this in more examples next time.

577
01:16:15,950 --> 01:16:28,730
So basically, okay, this is just to repeat a little bit of the previous one that was just repeated.

578
01:16:29,060 --> 01:16:43,760
So I was trying. Okay. So here is a preview for some reason that, oh, I go back to far or something in here.

579
01:16:43,790 --> 01:16:48,650
This is the length. Yes.

580
01:16:48,950 --> 01:16:52,250
This is. Let's let's go here.

581
01:16:52,700 --> 01:16:55,790
Okay. So I think this is just another example of using practice.

582
01:16:56,990 --> 01:17:02,570
So this is using perhaps mean we have to use includes C studio.

583
01:17:03,350 --> 01:17:07,190
That's that's kind of the header. That was the thing that got that on top.

584
01:17:08,600 --> 01:17:20,910
Okay. So this is just an example of a few, few different ways of putting out those.

585
01:17:21,290 --> 01:17:26,390
Right. Here we have here we've declared three different double variables, A, B, and C.

586
01:17:28,970 --> 01:17:32,720
Okay. So I'm just declaring them. And we've also given them initial values.

587
01:17:33,200 --> 01:17:43,730
So we just want to print out like the float itself without really worrying about how many digits are going to be printed out.

588
01:17:44,150 --> 01:17:49,100
We could just do this print f so we just do print percent effort.

589
01:17:49,850 --> 01:17:53,660
So we can see that.

590
01:17:54,450 --> 01:17:58,310
Yeah. So this turns out the value c.

591
01:17:59,000 --> 01:18:02,659
Okay. So this actually is. Okay. So what is C?

592
01:18:02,660 --> 01:18:06,770
It's actually like something that's very close to one or less.

593
01:18:08,440 --> 01:18:13,690
So see, it's 1.0 minus one times to the negative nine.

594
01:18:13,720 --> 01:18:19,450
So this is like almost exactly equals 1199999 something.

595
01:18:20,740 --> 01:18:27,570
So that's going to print depending on how many digits of precision we give it later.

596
01:18:27,580 --> 01:18:31,200
Print out like 1.04.999 something.

597
01:18:31,450 --> 01:18:43,419
Okay. So the first case I have percent f so just kind of as a default, I think it points out this this many digits of precision.

598
01:18:43,420 --> 01:18:48,430
So it prints out at 1.0 with like six zeros.

599
01:18:49,960 --> 01:18:55,150
If I do 0.3% in.

600
01:18:55,180 --> 01:19:00,940
Okay. I mean, point three, if that turns out 1.00.

601
01:19:02,200 --> 01:19:05,800
Okay. So that's at least doesn't show that it's less than one.

602
01:19:06,400 --> 01:19:12,820
If I do point ten, that gives it kind of ten digits of precision.

603
01:19:13,420 --> 01:19:13,790
Okay.

604
01:19:14,440 --> 01:19:29,020
So that's kind of how how you can modify the precision of of of the number that it turns out you give it like point something before the before the F.

605
01:19:29,110 --> 01:19:39,880
Okay. I think that would be the most common thing you might do, at least if you're modifying the default print statement, at least for floats.

606
01:19:42,190 --> 01:19:49,900
Okay. So you actually notice I just gave an example like we talked about the for like the flow to use 32 bits rather than 64 bits.

607
01:19:50,560 --> 01:19:59,140
So even if I did the same exact program, but I just defined A, B and C as flats instead of doubles,

608
01:20:01,270 --> 01:20:09,410
it doesn't have enough precision to kind of distinguish between, I guess, C and B, let's C and I guess.

609
01:20:11,770 --> 01:20:25,389
Right. Like if we print everything out. So even if we try to give it ten digits of precision, it still does the 1.0 because it's only 32 bits.

610
01:20:25,390 --> 01:20:31,990
We don't really have enough precision to kind of represent this number.

611
01:20:32,260 --> 01:20:36,550
Okay. We represent as something different from one.

612
01:20:37,620 --> 01:20:44,229
So. So using doubles is probably a little safer if you're doing kind of computations

613
01:20:44,230 --> 01:20:51,130
that have that that need a lot of precision to a high number of decimal places.

614
01:20:52,070 --> 01:21:00,430
Okay. So I probably should have put the introduction the strings before this slide.

615
01:21:00,450 --> 01:21:05,110
So there's a separate.

616
01:21:08,620 --> 01:21:18,480
There's actually a separate kind of a class that you can use to to to represent strengths.

617
01:21:19,030 --> 01:21:25,570
So, again, it's not it's not like a string. These are not like a fundamental data type in C++.

618
01:21:25,990 --> 01:21:38,710
There's kind of the set you can use a a separate string class 2 to 2 to create and use string variables.

619
01:21:39,430 --> 01:21:47,440
Okay. So this is something else that is also there's of the standard library.

620
01:21:47,860 --> 01:21:51,850
So if you use it, you have to use this STD double colon.

621
01:21:53,710 --> 01:22:01,690
So the way you can declare a string in C++ is just to use a steady double colon string.

622
01:22:02,580 --> 01:22:07,600
That's that's kind of the word you have to use first. It's kind of like the same thing as using it.

623
01:22:08,080 --> 01:22:11,290
And then you give it the name of the variable.

624
01:22:11,290 --> 01:22:12,700
So this is like the variable name.

625
01:22:13,720 --> 01:22:21,700
If you want to give it an initial value, you just put what kind of the text that you want inside of the double quotation.

626
01:22:25,600 --> 01:22:30,190
Okay. So the length of the string you can I think I have some examples of this.

627
01:22:30,190 --> 01:22:38,559
If you just put it like the, the dot length method after the name of the variable, that's the way to get the length of the string.

628
01:22:38,560 --> 01:22:41,690
So that's really just the number of characters that are in the string.

629
01:22:41,720 --> 01:22:48,040
That's the length of the string to access individual components of the string.

630
01:22:49,510 --> 01:22:55,450
You just use this bracket that's just if you want to get certain letters from the string, for example.

631
01:22:57,070 --> 01:23:06,610
So if I want to see what the first letter is, you would just use the name of the string bracket zero, actually.

632
01:23:06,760 --> 01:23:10,600
If you want to do the third of the letter P, that would be bracket two.

633
01:23:11,200 --> 01:23:14,590
So with C++, the kind of the indexing starts from zero.

634
01:23:15,070 --> 01:23:19,630
So if you want to look at the first letter, you do the bracket zero.

635
01:23:24,620 --> 01:23:40,690
So if you want to convert this special string type of to string and use a string that C to use, you have to use this C conversion.

636
01:23:40,700 --> 01:23:44,150
So there's a separate like that.

637
01:23:44,690 --> 01:23:46,460
We'll talk about a little bit more later.

638
01:23:46,880 --> 01:23:56,810
There's a separate string, I guess, class that C++ uses, and you can use that if you load this string library.

639
01:23:58,040 --> 01:24:04,760
The way C would usually use a string is as as kind of a raw array of characters.

640
01:24:04,910 --> 01:24:15,860
Okay. So there's, I think, the distinction between thinking of a string as a raw array of characters versus using a special data type for strings.

641
01:24:16,160 --> 01:24:23,270
But I think we'll talk a little bit more about this when we talk about strings.

642
01:24:23,980 --> 01:24:27,330
Okay. Okay.

643
01:24:27,950 --> 01:24:35,540
I think we'll stop right after this, this slide. So let's just let's just have.

644
01:24:35,960 --> 01:24:39,200
Oh, just shows what it show what it prints out.

645
01:24:39,200 --> 01:24:43,790
So. Okay. So what is this example saying?

646
01:24:43,830 --> 01:24:49,760
So I'm including both IO stream in as C.

647
01:24:49,760 --> 01:24:53,720
S studio and I'm also including the string language.

648
01:24:54,860 --> 01:24:58,790
So in this first line, I'm declaring the string s,

649
01:24:59,600 --> 01:25:09,050
so the string s as it's really this special string type that's made available through the string library.

650
01:25:10,940 --> 01:25:16,100
So that's what I'm basically doing in this line nine, six or five,

651
01:25:17,480 --> 01:25:25,760
and this next line on ferreting out kind of the contents of the string in the next line, I'm printing it out.

652
01:25:25,790 --> 01:25:30,680
You just, I'm also printing it out, but just using that the C style printing.

653
01:25:32,600 --> 01:25:36,630
And after that, the next line I'm putting out the length of the strings.

654
01:25:36,650 --> 01:25:44,660
And in this case, it should be should be five there's five, five letters in the string here.

655
01:25:46,220 --> 01:25:52,010
Yeah. This is kind of like sometimes in C++.

656
01:25:52,010 --> 01:25:55,100
There's a lot of little details to be aware of.

657
01:25:58,730 --> 01:26:05,420
So if you wanted to print it out so that yeah, this is one reason why sometimes SIA is a little bit more user friendly.

658
01:26:06,500 --> 01:26:11,480
You don't really have to know these special type conversion things.

659
01:26:12,260 --> 01:26:19,420
It kind of automatically does it. If you were to do this in print, I don't really know if you need to know this, but yeah,

660
01:26:19,460 --> 01:26:23,780
just an example of kind of the little details that are sometimes involved so that

661
01:26:23,990 --> 01:26:35,060
the length to send out in the length attribute I guess of the of the string is not,

662
01:26:35,240 --> 01:26:39,319
it's not stored as a it's not stored as an integer.

663
01:26:39,320 --> 01:26:47,510
It's like this set. It's a separate type of when you're looking at something,

664
01:26:47,690 --> 01:26:56,510
it's a separate type anyway to convert that, it's just it's a special Z you conversion of that.

665
01:26:56,780 --> 01:27:04,850
So it's a, if you look at the type of stuff like you printed out as something that looks like an integer, but it's, it's not actually an integer.

666
01:27:05,570 --> 01:27:13,129
So that's why, that's why we have this percent Z and then this last one, this example,

667
01:27:13,130 --> 01:27:18,800
I'm just shining an example of you can print out like individual letters from a string.

668
01:27:18,800 --> 01:27:27,200
So this is going to print out the letter, the something you can see out of as one I should point out that letter key.

669
01:27:27,620 --> 01:27:34,580
Okay, since that's like the second letter and then indexing starts from zero.

670
01:27:35,060 --> 01:27:40,580
And then here's just an example of how we can do that with the C style print out.

671
01:27:44,450 --> 01:27:50,630
So this should else the should also print out, you know, are using the C add conversion since that's the character,

672
01:27:50,930 --> 01:27:54,830
the individual components of a string or our characters.

673
01:27:56,000 --> 01:28:02,510
Okay. So yeah, so this is just kind of showing it for us out.

674
01:28:02,540 --> 01:28:06,529
Hello? Hello. Yeah,

675
01:28:06,530 --> 01:28:11,419
those are just two different ways of turning out a hello C out versus perhaps the next

676
01:28:11,420 --> 01:28:18,530
two are just pointing out the length using the kind of the worst case we had turned out,

677
01:28:18,530 --> 01:28:22,430
the length which is printing out a C++. Versus the person.

678
01:28:23,700 --> 01:28:28,170
Different style and kind of the last two ones were printing out the letter.

679
01:28:28,200 --> 01:28:32,060
Is that something? Second component of the string or just doing it to different ways?

680
01:28:33,380 --> 01:28:37,150
Hello? Hello. Five, five. Okay.

681
01:28:37,160 --> 01:28:40,750
So I think I'm a positive thing.

682
01:28:43,700 --> 01:28:47,270
I think we'll just stop there. It's kind of getting a little tedious.

683
01:28:48,200 --> 01:28:51,530
Yeah, maybe I'll just mention this. So you know about it for next time.

684
01:28:51,950 --> 01:28:56,330
Like, if you don't want to keep printing out, if you don't want to keep using this STD,

685
01:28:56,600 --> 01:29:01,060
colon, colon, every time you use it, you use a function from the STD library.

686
01:29:02,810 --> 01:29:08,690
You can just use this. You put this title before main using namespace as STD.

687
01:29:09,470 --> 01:29:15,770
Okay. In that case, you don't have to do STC out every time you see also.

688
01:29:15,770 --> 01:29:24,080
So it's probably something useful. But now we're just out there for today.

689
01:29:27,830 --> 01:29:34,210
Is there any question? If not yet, we're stop for today.

690
01:29:34,250 --> 01:29:37,640
We're going to start historically on.

691
01:29:41,260 --> 01:29:47,710
We know this is a country.

