1
00:00:08,860 --> 00:00:32,840
Because really the first thing, as far as I know, it's not like want to repeat this we've got to start with I mean, we're better than I am.

2
00:00:33,300 --> 00:00:49,360
Did you do it like a lot away from that place? And then you get to say, oh, well, let's get started.

3
00:00:49,710 --> 00:01:06,420
So. Oh, yeah. I'm not you know, recently all the office hours are the same.

4
00:01:07,500 --> 00:01:38,820
We are mindful of, you know, my life is now 3 to 4 and 1 to 2 on Friday to -3 to 4 years of the regular house missions are over the color of the air,

5
00:01:38,910 --> 00:01:45,930
but it will be a lot of overlap, I guess at least that like our Typekit,

6
00:01:46,590 --> 00:01:59,220
we do a lot of things in my bones, a little bit different art and a lot of similar ideas I guess.

7
00:01:59,250 --> 00:02:02,340
Yeah, I mean, basics, python, syntax,

8
00:02:02,340 --> 00:02:17,999
just the way you express certain expressions in Python and rules and expressions and Python and talk about the different types of variables in Python.

9
00:02:18,000 --> 00:02:29,910
So I guess one thing to note, I guess you didn't have to take the arm module that if you did take the arm module kind of the way the pipeline set up,

10
00:02:30,810 --> 00:02:40,760
you have to set a distinction between kind of the type of variables and memory

11
00:02:40,770 --> 00:02:49,649
arrays or matrices as well as are other factors pretty much built in to are

12
00:02:49,650 --> 00:02:59,309
likely to define a number by itself to kind of automatically treat it as a vector if you define a few numbers automatically considered to be a vector,

13
00:02:59,310 --> 00:03:02,340
since that's not the case with Python.

14
00:03:02,340 --> 00:03:07,530
So Python, there are separate variables.

15
00:03:07,650 --> 00:03:11,010
You can pick a single number that's single string.

16
00:03:11,520 --> 00:03:19,559
And then there's also collections of items in Python lists which are good to know,

17
00:03:19,560 --> 00:03:32,070
but they don't because they don't exactly behave like you would want them to if you were treating them as kind of linear algebra objects,

18
00:03:32,070 --> 00:03:35,580
like adding and multiplying vectors.

19
00:03:35,580 --> 00:03:40,700
So that's kind of where no pain comes at no time is really I mean,

20
00:03:42,240 --> 00:03:49,730
you're doing the kind of numerical stuff that you would do in a data analysis that's you really want to be storing your rings and matrices for them.

21
00:03:50,880 --> 00:03:55,920
So that's kind of just one thing to keep in mind. At least if you took if you took the other module,

22
00:03:55,960 --> 00:04:06,960
it's not be as confusing and then some are just kind of the is the basic are just kind of the key

23
00:04:06,960 --> 00:04:15,120
kind of programing types of logic that you need to know just how statements functions and loops,

24
00:04:19,130 --> 00:04:26,640
if you think of it as just kind of the core of programing knowledge and then and then we'll definitely talk

25
00:04:26,640 --> 00:04:37,820
about arrays and matrices like factorization in called arrays and no pi or nobody ever been involved with.

26
00:04:37,890 --> 00:04:47,100
And after that, we'll talk about data for things. PANDAS is just a particular interest on the library in Python.

27
00:04:47,450 --> 00:04:57,660
And the main feature of Pandas in that is that it has data frames and these are pretty similar to data frames in are.

28
00:05:00,450 --> 00:05:07,120
At the time. The main reason for using pandas is for basically storage data is data.

29
00:05:09,130 --> 00:05:15,760
And then I guess we'll just talk, try to finish up with some ideas.

30
00:05:15,760 --> 00:05:22,630
Python for practical data analysis of reading and files and making graphs.

31
00:05:24,280 --> 00:05:31,690
I think the main kind of Python library for visualization is in that plot line.

32
00:05:32,610 --> 00:05:39,700
So there's a few there's a bunch of them, actually, but that's kind of the classic Python library for data visualization.

33
00:05:39,700 --> 00:05:47,770
So we're trying to finish up with to show you more emphasis on using Python for for for data analysis.

34
00:05:54,430 --> 00:05:59,409
Oh yeah. I thought the same thing. Beginning of the ah course.

35
00:05:59,410 --> 00:06:08,559
Just a note about just kind of the expectations for the class are what you hope to get in.

36
00:06:08,560 --> 00:06:18,820
The class is basically from no knowledge or beginner to kind of just roughly intermediate I think is that is kind of the goal.

37
00:06:19,270 --> 00:06:21,790
And I think the only thing I'd mention is, well,

38
00:06:21,790 --> 00:06:31,059
there's definitely going to be at least since a lot of the topics obviously to a lot of overlap between each one of our in Python.

39
00:06:31,060 --> 00:06:38,740
So just be aware of that that maybe a good or a bad thing and we respect them,

40
00:06:38,740 --> 00:06:44,740
but we should we should cover it just because there's there's some there's some at

41
00:06:44,740 --> 00:06:49,750
least slight differences between our in Python in that we need to know about it.

42
00:06:50,590 --> 00:06:53,740
All right. So this is a rating type of thing.

43
00:06:53,750 --> 00:06:58,900
So it's if you took the our module, it should be exactly the same.

44
00:06:59,950 --> 00:07:02,200
If not, we'll just mention it quickly.

45
00:07:02,240 --> 00:07:13,180
If we haven't had like two online quizzes, if you have ten questions and just more for practice in the call, because if again,

46
00:07:13,540 --> 00:07:25,329
we just need to get 70% correct to get kind of the full credit, one of two homeworks, I mean, we'll see the exact dates when we go there,

47
00:07:25,330 --> 00:07:32,560
but it's probably something like this October 15th or 14, October 26 around there,

48
00:07:33,310 --> 00:07:43,300
and then this and then we'll have a thing us to brainstorm at the second and final thoughts and then the final assignment,

49
00:07:43,570 --> 00:07:53,410
which will be do a little bit after the final one, two or something like that.

50
00:07:55,480 --> 00:08:12,430
And then we assign this to keep in mind for our two online courses, two homeworks, one clock quiz and a final summary, and then the final assignment.

51
00:08:12,430 --> 00:08:16,780
It's kind of like a place to go on this list.

52
00:08:16,780 --> 00:08:19,510
The types of questions are sort of similar to the homeworks.

53
00:08:20,290 --> 00:08:27,880
It's just a little bit longer and try to put a little bit more emphasis on analyzing a dataset just so you can.

54
00:08:28,800 --> 00:08:39,060
And we practice kind of using everything we learn to in the module two is at least a little bit of data analysis.

55
00:08:39,990 --> 00:08:49,170
All right. So I just start on getting started.

56
00:08:49,170 --> 00:08:54,150
And it is similar to the announcement yesterday about installing Python on your own computer.

57
00:08:55,590 --> 00:09:01,100
I mean, you don't have to do with the exact way I suggested, but it is this one.

58
00:09:01,170 --> 00:09:12,780
I think it's a good option. So basically, we're basically going to use Python three and assume that, which means Python three in this class.

59
00:09:15,540 --> 00:09:22,100
So there's a Python two before that, which has some a reasonable amount of differences not.

60
00:09:24,330 --> 00:09:28,860
For some kind of it works in Python two may not work exactly the same.

61
00:09:28,930 --> 00:09:33,540
Python threes already use python three.

62
00:09:33,540 --> 00:09:39,840
That's basically if you download anything that's labeled Python three point something.

63
00:09:41,280 --> 00:09:49,709
Basically it's basically a five on three.

64
00:09:49,710 --> 00:09:56,580
So I think anything I thought 3.5 should was perfectly fine for this for me to lose the latest.

65
00:09:56,790 --> 00:10:10,040
When I asked where you want to turn on? So if you haven't installed type three yet, I mean, I would.

66
00:10:10,560 --> 00:10:15,990
This is the way I would do it. I didn't always do it, but this is the way I would do it.

67
00:10:15,990 --> 00:10:29,010
I just put some links for it and I think of Anaconda distribution of Python and ah and plus

68
00:10:29,010 --> 00:10:35,340
a bunch of a bunch of other I guess development into environments that you could install.

69
00:10:38,770 --> 00:10:50,010
So yeah, these are some of the things that I can use Finder which is like an integrated development environment usually used for Python.

70
00:10:50,670 --> 00:10:54,510
There's pie chart, which is also kind of the same thing.

71
00:10:54,510 --> 00:11:07,499
Brian's a spider, so if you don't as I would, you install that if you have to, unless you have a preference for something else.

72
00:11:07,500 --> 00:11:13,500
So this is like if you open up anaconda, once you install it, it should look like it should look something like this.

73
00:11:13,500 --> 00:11:19,380
And then I think I already installed Spider.

74
00:11:19,920 --> 00:11:24,600
So I guess when you first opened it up, we asked you to install the spider.

75
00:11:24,780 --> 00:11:28,380
Nonsense. Install this button says to launch it.

76
00:11:30,310 --> 00:11:42,780
So I tell you, kind of open spider once everything's installed, even that is ah stupid is mostly downhill downloading separately somewhere else.

77
00:11:42,780 --> 00:11:56,459
But it does, it does come with our studio. So we have spider on the computer here.

78
00:11:56,460 --> 00:12:05,580
But this is like a lot of screenshots, but it's like this is what's spider looks like.

79
00:12:05,580 --> 00:12:14,430
So this is, it's kind of small here, but this is least the way I've sat on way with this would be like the console or the article would show up.

80
00:12:15,240 --> 00:12:27,660
Oh, sorry. I think it would be kind of executed in front of anything how we would show up here or if you did like in line coding code line by line.

81
00:12:28,260 --> 00:12:36,150
I'm kind of on this panel. You would like if you're writing out a like a Python script, really write a bunch of Python going to say,

82
00:12:37,830 --> 00:12:47,240
here's some other things that would show up when you're running Python like maybe stored in your story,

83
00:12:47,290 --> 00:12:51,480
your environment says, okay, different plots and things like that.

84
00:12:52,410 --> 00:12:59,070
So this is kind of the same, a similar format.

85
00:12:59,790 --> 00:13:05,460
So our studio use that. So this is an integrated development environment.

86
00:13:08,460 --> 00:13:13,200
So here's another option which I think is is pretty popular,

87
00:13:14,130 --> 00:13:22,380
especially if you want to think about using Python to create kind of reports like maybe data analysis reports.

88
00:13:22,980 --> 00:13:27,690
These are Jupyter notebooks where they're available as like a release tool.

89
00:13:27,690 --> 00:13:34,709
So you don't really even have to install anything you can use them in your web browser.

90
00:13:34,710 --> 00:13:42,810
I mean, the advantage of this is that you can kind of combine Python code and text in a single document.

91
00:13:43,980 --> 00:13:53,520
So if you're doing like a data analysis, you can have your kind of your python code that computes the numbers that you're interested in,

92
00:13:53,520 --> 00:13:59,520
any kind of kind of text describing certain results all in the same document.

93
00:13:59,520 --> 00:14:09,300
So you can kind of just run the entire generate the entire report all at once and copy things over here and over to there.

94
00:14:10,050 --> 00:14:16,470
So maybe I can probably just go. Yeah.

95
00:14:16,470 --> 00:14:20,520
So this is do you just go to super f?

96
00:14:20,520 --> 00:14:28,020
You just go to Jupiter. There's actually multiple languages that you can use.

97
00:14:28,590 --> 00:14:38,130
I mean, I think this has become mostly associated with Python, but there are some other programing languages that you can use.

98
00:14:38,730 --> 00:14:51,860
So I guess you would just do. If you started here, if you would just try and add your browser to the Jupiter alarm system should work.

99
00:14:51,870 --> 00:15:02,300
So this. Yeah this is I know this is like an example in the book if I yeah.

100
00:15:02,340 --> 00:15:06,149
If I want to create a new one, I just had a new tab here.

101
00:15:06,150 --> 00:15:13,440
And so this is, this is basically Jupyter Notebook.

102
00:15:14,550 --> 00:15:23,610
So anything, anything about the extensions that I do live in the various forms for as far as you know.

103
00:15:27,630 --> 00:15:44,760
So the way I mean, the way I mean, if you do a basic python code, you can do like a course to print a I guess is an example of Python code.

104
00:15:45,740 --> 00:15:55,860
So this would be okay. And the way, way it works once you if you want to run, I mean, I would call this little block like a cell of python code.

105
00:15:56,310 --> 00:16:07,200
So if you want to do that, if you want to run like the code that's in this little cell, just hit this button.

106
00:16:09,390 --> 00:16:14,120
But you can always change it like a day or run.

107
00:16:14,430 --> 00:16:22,880
And then if you have a print out, print out kind of like what the python code says to print out.

108
00:16:22,890 --> 00:16:30,129
Okay. And then you can add kind of tags. The way I believe, the way you have to do it is protected.

109
00:16:30,130 --> 00:16:35,820
You do markdown before.

110
00:16:35,820 --> 00:16:41,129
Right now you can I mean, to get started with you can just treat it as typing in regular text.

111
00:16:41,130 --> 00:16:47,070
There are some things you have to do about markdown if you want to format it in a certain way.

112
00:16:47,070 --> 00:16:52,800
But just to start writing some basic text which includes the markdown,

113
00:16:53,250 --> 00:17:10,770
say you had just come to Python, okay, so you can kind of it'll show up as text.

114
00:17:10,770 --> 00:17:15,740
So if you want a real data analysis is a problem here.

115
00:17:16,170 --> 00:17:21,420
We have a lot more text and maybe I can hold, which is a lot more complicated.

116
00:17:21,420 --> 00:17:26,100
But once you kind of download, the entire thing is one document.

117
00:17:26,310 --> 00:17:41,340
Okay, so this is know this is just how Jupyter notebooks work and then this is also convenient probably for homework as well.

118
00:17:42,210 --> 00:17:48,480
If you want to add some code here to the assignments, you can make some notes below.

119
00:17:48,480 --> 00:17:53,639
You can do it. I think you can do.

120
00:17:53,640 --> 00:17:55,379
I guess we'll talk about it a little bit later.

121
00:17:55,380 --> 00:18:01,470
There's you don't have if you don't want to do everything in a notebook, you can create separate ah scripts.

122
00:18:01,470 --> 00:18:08,730
So that would be instead of if you go to a new file instead of notebooks, you can do a separate python file.

123
00:18:08,730 --> 00:18:13,350
So that would be not dot pi file.

124
00:18:13,350 --> 00:18:18,990
So you can just write if you just want to write purely, you know, python code.

125
00:18:19,710 --> 00:18:27,480
I don't need worrying about notebook.

126
00:18:27,480 --> 00:18:33,180
You can just do it. You write all of your pipelines over here and that's just a script.

127
00:18:33,870 --> 00:18:38,699
So a Python script will have the, like the extension part and then the notebooks.

128
00:18:38,700 --> 00:18:56,790
Now that I Pi works, that's an option because I took some screenshots, which is what I just more or less just did.

129
00:18:56,790 --> 00:19:04,440
Yeah. If you want to create a notebook, file with a notebook, something like that.

130
00:19:05,940 --> 00:19:07,000
Yeah. This is just what I said.

131
00:19:07,050 --> 00:19:19,740
If you want to if you want to run, if you just want to save things as a Python script in a notebook, you can, you can still run that in Jupyter.

132
00:19:19,740 --> 00:19:24,030
You just kind of save your python code in the pi file.

133
00:19:24,480 --> 00:19:27,960
And then if you want to run the whole thing, you can just do a run, I guess.

134
00:19:30,430 --> 00:19:33,520
Percent sine run and then the name of the script.

135
00:19:33,770 --> 00:19:37,450
Little and basically basic inside the Python script.

136
00:19:39,100 --> 00:19:45,710
Yeah. Randomness. We just created this variable 2.34 and put in there.

137
00:19:47,090 --> 00:20:03,290
Okay, so that's how Jupiter works. I mean, I think there's actually in many ways a lot of tools that kind of have a similar type of notebook feature.

138
00:20:04,400 --> 00:20:14,299
Jupiter. Jupiter was one of the you know, the one I think that worked pretty well in the laboratory, Kaggle notebooks.

139
00:20:14,300 --> 00:20:21,560
And those are kind of a similar flavor of notebooks that you can do Python, filaments and Red Bull.

140
00:20:21,560 --> 00:20:31,790
And just because I like reputation and I don't think they the regular Python scripts that you can run kind of just using,

141
00:20:32,490 --> 00:20:40,050
you know, directly from your browser. So that's just basically how to get started.

142
00:20:40,110 --> 00:20:48,019
Just a few options to get around and get started coding in Python.

143
00:20:48,020 --> 00:20:51,680
So I think the first the first talk,

144
00:20:51,830 --> 00:20:58,250
the first topic would just be variables or at least you know what is a variable

145
00:20:58,250 --> 00:21:05,660
and how can you assign these two variables and the different types of variables,

146
00:21:06,310 --> 00:21:13,070
at least in base Python course. So the way essentially is by a variable,

147
00:21:14,570 --> 00:21:24,470
you just kind of pick a name for a variable that they want to create and you assign it some value basically using the equal.

148
00:21:24,480 --> 00:21:30,830
So I'm going to call it the assignment operator just because it's not the same thing.

149
00:21:30,870 --> 00:21:41,030
This test that you have, two things are equal. So it's called the assignment operator, which is the equals symbol in Python.

150
00:21:41,610 --> 00:21:50,569
Okay. And then once you kind of assigned its value, you can just for different computations,

151
00:21:50,570 --> 00:21:56,180
you can use the variable name as if it as if it were equal to the value add store.

152
00:21:56,180 --> 00:22:06,409
And so the fact that I created a variable called X and I give it 1010, I can do different computations,

153
00:22:06,410 --> 00:22:15,310
I can even ask plus three or things like that, treating x as if it were exactly equal to ten.

154
00:22:15,380 --> 00:22:25,310
It's kind of the way to to use variables. So these are just it's probably just better to see some examples, just to see it, just to see how it works.

155
00:22:25,310 --> 00:22:28,340
I think it's little more clear if you just see some things.

156
00:22:28,670 --> 00:22:33,979
So here, this is just an example.

157
00:22:33,980 --> 00:22:41,450
If I create the, you know, three variables, you know, one of them's called X, one of them's called height and one I'm one of those call.

158
00:22:41,930 --> 00:22:50,630
These are all like numeric variables. So all you have to do to create a variable is called X, which is, say, x is equal to 2.3.

159
00:22:54,810 --> 00:23:00,330
We want to figure it out and say it should be present in the next. And just as she's showing that when we run this,

160
00:23:00,330 --> 00:23:09,680
it's going to it'll turn out the value stored in X and then, you know, for height that age equals that.

161
00:23:09,690 --> 00:23:16,320
So that's just that's how you create variables in Python as assignment values.

162
00:23:16,470 --> 00:23:16,760
Okay.

163
00:23:17,760 --> 00:23:29,970
So one thing to keep in mind is you can all I mean, after you create a variable, you can always change its value further, further on in your code.

164
00:23:29,980 --> 00:23:39,510
So if I just say the X is equal to it, it's not a big deal to just give it a different value further down.

165
00:23:39,510 --> 00:23:46,090
So I run this code, it'll first, print out two and turn out three after we change the value.

166
00:23:46,400 --> 00:23:51,040
So then often you'll. Well, that's not what I wanted to do.

167
00:23:53,620 --> 00:23:58,750
I wanted to do two times a month. Year. John Lennon.

168
00:23:58,890 --> 00:24:05,770
So now if you just look it, it's often common to kind of update the value of a variable this way.

169
00:24:05,780 --> 00:24:09,079
So if you do wise in five and later on,

170
00:24:09,080 --> 00:24:16,790
you need to update the value in some way right back to just two lines equal two times what

171
00:24:16,890 --> 00:24:23,780
I what I meant to put here that my is equal to two times Y and that would print out ten.

172
00:24:23,930 --> 00:24:27,010
Okay. So you could you could do things like that though.

173
00:24:27,800 --> 00:24:31,400
Not a problem. Just update updated in that way.

174
00:24:36,680 --> 00:24:47,360
My stuff here is just an example of maybe just to help with the syntax because most of the formatting.

175
00:24:47,360 --> 00:24:58,820
So let's say we had just a little computation that shows how to use variables to calculate like interest on deposit, for example.

176
00:25:02,210 --> 00:25:12,140
This is supposed to be 100. I say we deposit $100 into a bank account and earns 10% interest 10% every year.

177
00:25:12,760 --> 00:25:19,880
You just want to write down write Python code that calculates how much money you have after two years.

178
00:25:22,410 --> 00:25:31,670
So the formula for this is after the first year you get the amount, after the first year you multiply 100 by 1.1,

179
00:25:32,360 --> 00:25:37,580
and then you multiply that amount by 1.1 to get the amount after two years.

180
00:25:38,240 --> 00:25:47,060
So you can just do it this way. So you can first try and create that variable deposit and then just say new deposit is equal to deposit.

181
00:25:47,780 --> 00:25:51,560
Times 1.1, times 1.1.

182
00:25:52,080 --> 00:25:58,310
So give us what we want. And the result is is one one is 120.

183
00:25:59,130 --> 00:26:06,800
And you'll see here the way this is just the way Python kind of prints out and stores.

184
00:26:06,800 --> 00:26:22,670
These types of these are floats. So basically any kind of if you have any kind of decimal plus number, essentially it's way it's storing.

185
00:26:22,670 --> 00:26:25,840
It is kind of as an approximation that we use.

186
00:26:26,540 --> 00:26:32,090
That's true for one of the other languages as well.

187
00:26:32,720 --> 00:26:41,170
And I think just the way it's translating it kind of it turns out the floats doesn't print it doesn't print them out.

188
00:26:42,100 --> 00:26:45,530
That's what it's doing,

189
00:26:45,530 --> 00:27:00,090
the action and looking out for printing out and that's really stored stories in this very formatting for this number looks really weird.

190
00:27:00,980 --> 00:27:04,700
So yeah. So this code deposit equals 100.

191
00:27:05,360 --> 00:27:12,770
Oh, it's actually 100.0. Both creates the variable deposit in size at the body 100.

192
00:27:14,000 --> 00:27:17,959
Then after that, we kind of created this new variable, all new deposit.

193
00:27:17,960 --> 00:27:27,770
And because deposit already has the value 100, it's not be assigned the value 100 times 1.1, times 1.1.

194
00:27:28,550 --> 00:27:33,680
And then basically after that, we just print out the result.

195
00:27:33,860 --> 00:27:48,950
Okay. And in this calculation, we're treating the variable name as if it were like equal to the number 100 writing inside.

196
00:27:48,950 --> 00:27:54,050
You think of the deposit as being kind of equal to the number of 100.

197
00:27:55,640 --> 00:28:04,100
Okay. So these are just it's super important, but it's just we should mention and just so.

198
00:28:08,020 --> 00:28:16,809
And you're aware of certain mistakes that can happen.

199
00:28:16,810 --> 00:28:21,450
So. So you're. You're aware of my characters.

200
00:28:21,450 --> 00:28:32,660
You can't put it very well. Okay. So I guess the main rules for the python variables, it has to have like letters, numbers or underscore.

201
00:28:32,710 --> 00:28:40,180
So I guess this is if you took the Python module, you cannot have a period of time.

202
00:28:40,200 --> 00:28:46,299
Just one difference between Python in March and ah, you can have periods in your variable names.

203
00:28:46,300 --> 00:28:52,430
You can you can't do that in Python. So those are kind of thing.

204
00:28:52,460 --> 00:29:01,150
First of all, the other, the other main rule is that the variable names cannot start with a number,

205
00:29:01,570 --> 00:29:04,479
so you can't have a variable name that starts with know four.

206
00:29:04,480 --> 00:29:11,680
So you could create a variable called the opposite one, but you couldn't create a variable of one deposit.

207
00:29:12,160 --> 00:29:16,000
So this is this is not a try to do that in silence.

208
00:29:16,330 --> 00:29:25,270
It'll give you some kind of error message. And the other thing to keep in mind is that things are case sensitive.

209
00:29:25,270 --> 00:29:35,840
So these are essentially two different variables because create a variable called deposit with a little D at the beginning,

210
00:29:36,220 --> 00:29:40,990
you know, the totally separate variable called deposit with a capital D.

211
00:29:41,170 --> 00:29:53,020
So it's perfectly allowed. The only other note I think this is true for language is you can't have spaces in your variable.

212
00:29:53,410 --> 00:30:02,280
You can only create a variable called a line deposit where there's a space between the Y and the D was one too many.

213
00:30:04,380 --> 00:30:10,120
Yeah, these are just examples. So like most of them are through the invalid one.

214
00:30:10,130 --> 00:30:15,790
So this one is invalid since it starts with a number.

215
00:30:15,820 --> 00:30:23,229
This one is invalid since it has this special character and this one is invalid since if only here in this one

216
00:30:23,230 --> 00:30:31,870
is invalid since it hasn't found that really the only I guess special character that's allowed is underscore.

217
00:30:32,450 --> 00:30:43,120
I mean, if you if you call this a special character, there's really only one kind of over $200 or something or exclamation point.

218
00:30:43,120 --> 00:30:50,889
Those are those are not allowed. Oh, okay.

219
00:30:50,890 --> 00:30:54,820
So here's just a reminder. So when you're doing coding,

220
00:30:54,820 --> 00:31:08,830
it's it's better at least as much as possible to give descriptive variable names that meaning that they should match kind of what you should match,

221
00:31:08,830 --> 00:31:15,400
like the role they're playing in the code. So like in our example with the positive calculation,

222
00:31:16,510 --> 00:31:23,589
you might want to call the variable that denotes the initial deposit and you

223
00:31:23,590 --> 00:31:28,090
might just it's probably better to just call it initial underscore deposit,

224
00:31:28,810 --> 00:31:33,190
which is probably a better name, an idea, for example.

225
00:31:33,670 --> 00:31:40,450
And although the idea is probably not the worst, I mean, the worst would be something like X, x,

226
00:31:40,450 --> 00:31:48,549
x or something that's kind of totally not informative about what that variable is doing in your code.

227
00:31:48,550 --> 00:32:00,910
So you should, at least in the practice of at least for the most part, create variable names that match what we I don't I don't do it 100%,

228
00:32:00,910 --> 00:32:09,040
but at least, at least most of the variable should have an informative variable name.

229
00:32:09,970 --> 00:32:15,550
The reason for this, it just makes it just makes it easier to read code if you have code that you know,

230
00:32:15,610 --> 00:32:19,870
the variables kind of match the role they're playing in the code.

231
00:32:19,870 --> 00:32:23,830
It kind of makes it easier to see what the different parts of the code are doing.

232
00:32:24,490 --> 00:32:35,440
This is very helpful. You know, if you if you ever work on a project that you kind of work on off, for example,

233
00:32:35,440 --> 00:32:40,420
like you work on it for a week and then you go back to the code a few months later,

234
00:32:40,980 --> 00:32:47,740
you know, that makes it a lot, a lot easier to to understand the code that you wrote a few months before.

235
00:32:48,340 --> 00:32:51,840
Okay. Okay. Yeah.

236
00:32:51,850 --> 00:32:56,320
This was just another piece of advice. I don't think people do this that often.

237
00:32:58,630 --> 00:33:05,290
Usually there's one or two, maybe three words, and you're very lonely.

238
00:33:05,320 --> 00:33:10,050
I mean, you shouldn't have a variable name. It's like ten words separated by an underscore.

239
00:33:12,370 --> 00:33:17,080
It's just ridiculous. But I don't think people do that anyway.

240
00:33:17,200 --> 00:33:21,210
So what we had.

241
00:33:24,620 --> 00:33:30,800
Oh, yeah. This is just a question as are once again, this is this is a little break.

242
00:33:32,510 --> 00:33:37,969
Which one of these is a valid I think three of these are invalid and one of them is valid.

243
00:33:37,970 --> 00:33:45,200
So the first one. So that would be invalid, for instance, since it starts with a number.

244
00:33:45,290 --> 00:33:51,010
So the first one is invalid. So the second one is also an invalid.

245
00:33:53,240 --> 00:33:58,610
The reason is that it ends with this exclamation points that excellent exclamation points are not allowing.

246
00:33:59,600 --> 00:34:03,770
The third one is is actually valid. I don't think there's anything wrong with this.

247
00:34:04,910 --> 00:34:08,899
The stories are perfectly fine. The last one is invalid.

248
00:34:08,900 --> 00:34:17,300
Since it has this period in the middle of experiment, the python variables have a period in their names.

249
00:34:18,470 --> 00:34:24,260
So. Okay, so that's. Okay.

250
00:34:24,260 --> 00:34:37,610
So that's just getting started is how to create a variable and assign the values and just some rules to keep in mind when your name variables.

251
00:34:37,610 --> 00:34:44,300
So that next thing is just a basic I'd say the basic variable types in Python.

252
00:34:45,620 --> 00:34:50,630
These are kind of these are, I'd say the three most basic types.

253
00:34:51,830 --> 00:35:01,400
So there's like there's strings which should think of as variables that just contain text, usually some different letters.

254
00:35:01,850 --> 00:35:08,870
And then we have numbers, although there's, there's different types of numbers that I'll mentioned in a second.

255
00:35:09,320 --> 00:35:12,980
And then there's Boolean values. These are just contain.

256
00:35:15,880 --> 00:35:19,360
Logical values. So these are values that are equal to either true or false.

257
00:35:21,090 --> 00:35:24,150
Okay. So the first thing, as I mentioned, is this string.

258
00:35:24,720 --> 00:35:28,830
String is just really just a collection of characters.

259
00:35:29,970 --> 00:35:37,170
So the way you create strings in Python is just any put any collection of characters inside single

260
00:35:37,170 --> 00:35:45,059
quotes or something else either either one works fine so that that'll create a string in Python.

261
00:35:45,060 --> 00:35:53,820
So, you know, you could create a variable line message and you can assign a string value.

262
00:35:53,820 --> 00:35:59,940
So this would be this would be a string. So just any text inside of these quotes.

263
00:35:59,940 --> 00:36:04,830
So here we have a string that contains the words Hello and world.

264
00:36:05,400 --> 00:36:11,280
So print that out. If you print out this variable, okay?

265
00:36:12,540 --> 00:36:21,840
This is just to show that it doesn't matter if you use single quotes to create a string or a cross.

266
00:36:23,820 --> 00:36:34,890
So we. Okay, so here's another thing which I think is good to be aware of, but sometimes it's useful.

267
00:36:35,250 --> 00:36:42,300
So you can actually do with some types of quote unquote math with strings.

268
00:36:42,720 --> 00:36:53,280
So if you if you add two strings basically concatenated into us into a single string.

269
00:36:54,480 --> 00:37:01,900
So by these two strings, message one in message two, if I add them, that's that's perfectly valid to do.

270
00:37:03,060 --> 00:37:10,500
So I add them and have a sign that resolved to this variable called a new message.

271
00:37:13,090 --> 00:37:16,800
And now the new message will also be a single string.

272
00:37:17,060 --> 00:37:24,790
Okay. We know this contaminates our message two to the message one, we don't see that clearly.

273
00:37:25,530 --> 00:37:29,550
If we print out the message, it's hello world. And that's goodbye and.

274
00:37:33,240 --> 00:37:40,350
So it's perfectly valid to add strains. You can also multiply at least a string by an integer.

275
00:37:40,350 --> 00:37:48,030
You can't multiply a string by a like a number with that has decimals, but you can multiply it by an integer.

276
00:37:49,020 --> 00:37:53,759
So if we multiply it by three, it just kind of contaminates it three times.

277
00:37:53,760 --> 00:37:59,620
So it's really think of this as the same thing as message one plus message one plus message one.

278
00:37:59,800 --> 00:38:08,670
That's kind of does the same thing. So you just concatenate those message one wants and then message one again.

279
00:38:09,360 --> 00:38:15,060
Okay. I think if you try to multiply this by like 3.2, for example,

280
00:38:15,990 --> 00:38:23,430
I think it should give an error, but I think multiplication by an integer is perfectly fine.

281
00:38:23,940 --> 00:38:29,840
I think you can even do like comparisons of greater than or equal to two strings.

282
00:38:29,850 --> 00:38:37,680
In that case, it does something like it compares which one comes first alphabetically.

283
00:38:42,330 --> 00:38:43,270
Okay. So yeah,

284
00:38:43,300 --> 00:38:50,850
here just I just thought I'd mention a few functions or methods for strings that might be useful if you're going to start working with strings.

285
00:38:50,850 --> 00:38:52,920
We'll probably mention a few more later on.

286
00:38:53,490 --> 00:39:01,050
If you just want to know the length of the string, the length meaning that the number of like characters in your string.

287
00:39:02,490 --> 00:39:06,569
So you just do a landing at the end for the length of message.

288
00:39:06,570 --> 00:39:15,330
One is 11. So there's 11 characters and there's 11 characters in message one.

289
00:39:16,880 --> 00:39:27,950
To access the individual elements in the string like you basically are getting the individual characters in like the teeth position.

290
00:39:27,950 --> 00:39:34,429
You have to do this type of notation point out.

291
00:39:34,430 --> 00:39:45,229
So this is one thing, it's good to just double check this type of thing when you're writing your code,

292
00:39:45,230 --> 00:39:56,760
especially if you've just been doing a lot of polka. It's that indexing in Python starts from zero rather than 100 likes.

293
00:39:56,840 --> 00:40:01,129
It starts from one and Python indexing starts from zero.

294
00:40:01,130 --> 00:40:08,150
So that just means if I look at the you can look at the zero with element.

295
00:40:08,160 --> 00:40:17,490
So if you look at the zero element of message one right now, try not to be confused near you.

296
00:40:17,690 --> 00:40:26,470
Forget to index zero of message once h index one is index three is no.

297
00:40:26,480 --> 00:40:35,629
So index two is our first. It's only same element, meaning we're talking about elements.

298
00:40:35,630 --> 00:40:43,790
If you're starting counting from one, the way you access that is a variable name with K minus one in brackets.

299
00:40:43,790 --> 00:40:47,359
So it's just easier if we see an example.

300
00:40:47,360 --> 00:40:52,670
If I do, I look at this index, three of message two is in a property.

301
00:40:53,360 --> 00:41:10,150
So that so index zero of message two is g of index one and two of message two, which is also an index three of a message to me, meaning.

302
00:41:10,190 --> 00:41:18,979
So it's just something, I mean, it's not difficult, but it's just there's a lot of errors that come from this.

303
00:41:18,980 --> 00:41:25,310
And if you're not, especially if you're doing kind of two language, two different languages where the indexing starts.

304
00:41:28,140 --> 00:41:35,280
But the starting index is different. It's just sometimes it causes it can cause mistakes.

305
00:41:36,480 --> 00:41:46,440
All right. So, you know, I just mention one other thing that I think is useful is just if you want to find,

306
00:41:46,440 --> 00:41:49,469
like a match for a certain character, I agree with me.

307
00:41:49,470 --> 00:42:00,150
Use this for group of characters so that you can use the if you have a string variable, you could just use the name of the variable to not find it.

308
00:42:00,570 --> 00:42:05,010
And then you give it the character that you want to find index where there's a match.

309
00:42:05,370 --> 00:42:12,360
Okay. Also use the name of the variable in the index, which basically does the same thing.

310
00:42:15,600 --> 00:42:22,940
So let's say we have a string and we want to find the index where the character is located.

311
00:42:24,140 --> 00:42:27,420
There's no way we need to do that.

312
00:42:27,420 --> 00:42:31,470
If you give us the name of the string and then find them all in quotes.

313
00:42:32,190 --> 00:42:44,460
So here this is telling us that the index for an index for of the string message one is kind of the first place that oh shows up.

314
00:42:44,580 --> 00:42:48,180
So this is zero one, two, three, four.

315
00:42:49,350 --> 00:42:59,940
So that's index four. So you can use dot find for that. And just keep in mind, I guess that dot find returns the index of the first match.

316
00:43:01,140 --> 00:43:09,150
Okay. So if you do message one that find out all.

317
00:43:09,190 --> 00:43:15,480
So here we have we have more than one place where we have an L appears twice.

318
00:43:15,940 --> 00:43:19,430
Oh, that's also true for a zero as well. I forgot that. Yeah.

319
00:43:19,440 --> 00:43:23,160
So it did. It did. The first one here. So also a few.

320
00:43:24,360 --> 00:43:30,510
And if we do, l will give us the first one, which is our position too.

321
00:43:30,630 --> 00:43:36,630
Okay. So it gives the index of that. And the first time this appears.

322
00:43:42,170 --> 00:43:45,650
Maybe one. One other one other useful thing.

323
00:43:47,360 --> 00:43:56,959
Sometimes you have a bunch of you have a long string that are separated by spaces or possibly other characters.

324
00:43:56,960 --> 00:44:00,920
You kind of want to split it into a bunch of different strings that are in this

325
00:44:00,920 --> 00:44:08,390
example by each of the things that each of the separate strings is a separate word.

326
00:44:09,000 --> 00:44:19,549
So those that type of thing you can do split or use the name of the string variable, then you do that split and then I'll return at least by default.

327
00:44:19,550 --> 00:44:23,270
It'll split. It will return a list.

328
00:44:23,870 --> 00:44:38,989
Sorry. Well, we didn't talk about list, but it'll return multiple strings wherever the space appears.

329
00:44:38,990 --> 00:44:48,440
It kind of, you know. Return a separate string after that space and before the next space.

330
00:44:49,880 --> 00:44:54,620
And then I'll return that. This is actually what an example of a list in Python.

331
00:44:54,770 --> 00:44:57,910
We'll talk about fairly soon, I said.

332
00:44:57,960 --> 00:45:05,990
So this list is just kind of a collection, a collection of items in this list with the two strings.

333
00:45:06,430 --> 00:45:21,420
Yes. Well, if you want to do a I guess, a separator that's different than the space space territory, you can give it like an argument, for example.

334
00:45:21,440 --> 00:45:24,530
So in this case, it'll kind of separate.

335
00:45:24,540 --> 00:45:37,099
It'll split the string across different values of the first return meeting level, and then it'll return the next string return in space.

336
00:45:37,100 --> 00:45:40,640
W And then the last one will be r l d.

337
00:45:42,260 --> 00:45:48,980
Default is a space character if you use if you don't give it any, if you don't give any arguments to split.

338
00:45:50,390 --> 00:45:54,920
So that's the strings.

339
00:45:54,920 --> 00:46:01,170
And next, I guess the major type of variable are the outer.

340
00:46:02,050 --> 00:46:06,410
Our numbers is the main division and pipeline between integers and floats.

341
00:46:06,920 --> 00:46:14,390
So energies, integers and just the negative and negative counting numbers.

342
00:46:14,600 --> 00:46:25,490
One, two, three, four, five and zero and then negative one, two, two, etc., etc. and floats pretty much anything that has a decimal point.

343
00:46:26,240 --> 00:46:35,840
So if you, if you create a variable inside a number and you put the decimal way of point anywhere in the number,

344
00:46:36,470 --> 00:46:48,320
it should automatically treat it as a float. So these are just the, as you mentioned, the standard operation that you can do with numbers.

345
00:46:48,800 --> 00:46:57,620
I mean, I think you're adding subtracting multiplication division, and I think that's pretty clear.

346
00:47:00,280 --> 00:47:14,020
That's how you multiply our numbers. Only so many things to pay attention to is taking exponent is the double star.

347
00:47:14,260 --> 00:47:22,600
That's how you exponents in python. So if you do two to the third power it would be like two double star three.

348
00:47:25,090 --> 00:47:30,700
The other thing is similar to most other languages.

349
00:47:30,770 --> 00:47:36,460
Sometimes they're slightly different for the modulus or the remainder operator.

350
00:47:37,540 --> 00:47:43,719
It's a single percent sign. So like it's just the remainder after division.

351
00:47:43,720 --> 00:47:54,610
So in 12% five, it should be two since it's five times to his ten.

352
00:47:54,610 --> 00:48:04,060
And what we have left over is two. And then there's also this direct operation.

353
00:48:05,290 --> 00:48:14,140
Now there's also internal integer division, which basically is division that returns an integer.

354
00:48:14,770 --> 00:48:21,580
So like if you do regular division with two integers, it doesn't necessarily return an integer, it can return a float.

355
00:48:22,390 --> 00:48:26,860
If you do that seven divided by two, for example, it's 3.5.

356
00:48:27,440 --> 00:48:33,110
So that would be that would be considered a float by Python if you want to keep everything as an integer.

357
00:48:33,140 --> 00:48:45,070
There is this option. I need seven double slash to do division and I think it rounds the nearest of numbers.

358
00:48:48,140 --> 00:48:53,020
I don't think it'll round down to the virus integer.

359
00:48:53,020 --> 00:48:57,100
So when you do integer decision, it returns an integer.

360
00:48:58,370 --> 00:49:02,770
Okay. Yeah. So here's this example. I mean, you should take this in private on yourself.

361
00:49:04,210 --> 00:49:09,400
These are floats. 3.2 was 10.4 is adding two floats.

362
00:49:12,100 --> 00:49:18,960
This would be four raised to the third power. So 64, 15%, 13 is two.

363
00:49:19,540 --> 00:49:30,460
That's modulus. And this is integer division. Your five integer division two kind of rounds down to its nearest integer returns integer.

364
00:49:31,780 --> 00:49:38,679
The other thing to keep in mind when you're doing any type of computation, when you're doing math with Python,

365
00:49:38,680 --> 00:49:45,850
just is keep in mind that there are these precedence rules for the order of operations.

366
00:49:45,850 --> 00:49:50,709
Just keep in mind that those holds are just to avoid any mistakes.

367
00:49:50,710 --> 00:49:56,520
Basically that basically everything in parentheses, everything,

368
00:49:56,530 --> 00:50:04,600
all of the operations and size in parentheses are done first and then kind of after that

369
00:50:07,810 --> 00:50:17,380
precedence rules are basically like the same animals coming out of different tickets.

370
00:50:17,720 --> 00:50:24,430
So experimentation has high precedence than multiplication or division and multiplication.

371
00:50:24,430 --> 00:50:28,570
Division has kind of higher priority than addition and subtraction.

372
00:50:30,370 --> 00:50:33,670
So just just keep that in mind.

373
00:50:34,460 --> 00:50:38,240
That's a good way of avoiding mistakes, especially those.

374
00:50:39,190 --> 00:50:43,480
And there's an additional. No.

375
00:50:43,760 --> 00:50:54,709
There's not a lot of shame in using a lot of parentheses just to make sure make things clear about which operations are being performed first.

376
00:50:54,710 --> 00:51:05,270
So additionally, I'm not afraid to use a substantial amount of parentheses for certain or certain computations.

377
00:51:05,270 --> 00:51:11,510
So here there's just an example of how things can go wrong, I guess.

378
00:51:12,320 --> 00:51:15,860
So here, if we do this, this is three times two plus or so.

379
00:51:15,860 --> 00:51:22,550
This is really going to be six plus ten multiplications before revisions here.

380
00:51:22,970 --> 00:51:34,520
What we're doing in this thing we have three times six here is we're going to be the modules first.

381
00:51:35,150 --> 00:51:38,240
So it's going to be one plus one, which is two.

382
00:51:38,930 --> 00:51:43,610
You know, in this case, we're doing nine with a minus three.

383
00:51:43,730 --> 00:51:50,150
Okay. So now in that case of zero six, nine is divisible by three.

384
00:51:50,270 --> 00:51:56,690
Okay? So that's numeric means the main ones are float and integer.

385
00:51:56,690 --> 00:52:02,989
I mean, they do have a separate complex numeric type,

386
00:52:02,990 --> 00:52:10,490
but I'm not going to mention I don't think we're going to use that anywhere, at least in this in this course.

387
00:52:11,810 --> 00:52:19,880
It definitely has uses in some cases. But the the next type main type of variable is the Boolean variable.

388
00:52:20,420 --> 00:52:34,130
So this just has the value, true or false. So for example, the way you create them in it is true or false, I guess a bit more clear.

389
00:52:34,640 --> 00:52:40,190
So to match the python syntax, it's probably better to put things in lowercase letters.

390
00:52:41,290 --> 00:52:48,230
It's the way you declare them in Python. Python is as capital F and then lowercase.

391
00:52:48,250 --> 00:52:51,260
ALLEN That's not all capital letters.

392
00:52:51,350 --> 00:53:04,400
Okay. So if you want to just create a boolean variable by itself, you can just sign in the value follows.

393
00:53:04,570 --> 00:53:08,320
I'm sure using these false and true keywords. Okay.

394
00:53:11,410 --> 00:53:15,910
So something I mentioned before, the way you can check the type of a python variable,

395
00:53:15,920 --> 00:53:24,010
just do type with the name of the variable inside parentheses and then you run that code so you can see that here.

396
00:53:25,510 --> 00:53:37,360
It'll turn out something like this. But I will say there's just a note which says that our variable is hot is a boolean variable.

397
00:53:38,020 --> 00:53:43,240
So this is maybe also use type for a numeric or string variables.

398
00:53:47,940 --> 00:53:51,329
So you can do kind of math with boolean variables.

399
00:53:51,330 --> 00:53:53,250
You can add, subtract or divide them.

400
00:53:54,300 --> 00:54:02,370
Basically, when it when it's doing those sorts of things, it's treating a a true value as a one in the past sense of zero.

401
00:54:04,290 --> 00:54:22,680
So for example, to compute true plus false, that will return the value of one of the true times also at the current value zero zero times 110.

402
00:54:23,970 --> 00:54:31,230
So if you do that, you could even mean you can even combine you can even combine this with with other numbers.

403
00:54:31,230 --> 00:54:37,320
You can including a million variables in a mathematical expression with numeric.

404
00:54:38,430 --> 00:54:43,440
Even in those cases, it's still it's going to be treating the Boolean variables.

405
00:54:43,440 --> 00:54:46,860
It's going to be treating the trues as ones or the false as a zero.

406
00:54:47,400 --> 00:54:59,280
So, for example, if we create this variable and you announce that this is going to assign it the value 4.5 times one plus 1.0, and that should be 5.5.

407
00:55:05,450 --> 00:55:11,669
Yeah, I guess I should clear from the previous slide,

408
00:55:11,670 --> 00:55:19,000
I want to do an addition of boolean variables that the type that it returns is is an integer rather than a boolean.

409
00:55:19,350 --> 00:55:24,120
So if it is true plus false that returns the integer one.

410
00:55:24,660 --> 00:55:28,320
So we add two or more boolean variables.

411
00:55:28,830 --> 00:55:37,410
It'll return an integer rather than it will return an integer variable rather than not a bullish variable.

412
00:55:40,100 --> 00:55:48,960
Okay. So here is just simply silly excuses.

413
00:55:49,320 --> 00:55:56,190
Sometimes you might need to do this so you can convert a you can directly convert

414
00:55:56,820 --> 00:56:05,940
a number and to a boolean variable so you could even convert floats into limits.

415
00:56:09,300 --> 00:56:20,280
Basically, the way it works is that it converts zero and the false and it converts any non-zero number into true.

416
00:56:20,880 --> 00:56:30,690
That's kind of the way it works. So you can convert the number -3.2, for example, into a boolean converted into true.

417
00:56:31,920 --> 00:56:41,160
So it basically only converts zero in the false every other number and convert that into into a true value.

418
00:56:41,820 --> 00:56:50,850
So that's just something to keep in mind in case in case you run into anything

419
00:56:50,850 --> 00:56:56,880
that would looks at the kind of conversion of the various numbers boolean.

420
00:56:58,170 --> 00:57:05,970
So here it's just kind of a little question just to see if you just said so.

421
00:57:07,560 --> 00:57:14,700
Let's say we define this variable test number as missing.

422
00:57:14,970 --> 00:57:21,410
So here we're creating a variable and we're assigning it to value returned by kind of this expression.

423
00:57:21,410 --> 00:57:25,240
And so what is I guess, what is the value of test number?

424
00:57:25,410 --> 00:57:30,090
I guess the other question is what type of variable is.

425
00:57:30,960 --> 00:57:34,410
So here we're going to have we do the things in parentheses first.

426
00:57:35,070 --> 00:57:41,280
So we have to 23 in parentheses. So it's multiplying 2.3 times.

427
00:57:41,280 --> 00:57:45,180
True. So it's basically just same thing as 2.3 times one.

428
00:57:47,580 --> 00:57:52,950
And then we're adding it by to race to the 2/2 proposition two plus two squared.

429
00:57:52,950 --> 00:57:56,010
So it should be just 2.3 plus four.

430
00:57:57,180 --> 00:58:01,020
So should that the value stored here should be 6.3.

431
00:58:01,070 --> 00:58:08,220
Right. So what type of variables like should be a should be a float.

432
00:58:09,020 --> 00:58:18,510
And the reason for that is just that basically we're multiplying 2.3 times and 1.3 should be a float.

433
00:58:18,540 --> 00:58:25,860
But also the reason is that the multiplication of most times of integer should automatically float.

434
00:58:26,580 --> 00:58:41,230
And then for adding a float, time is an integer that should also automatically be offshore since the result should think of it as having some decimal.

435
00:58:43,360 --> 00:59:03,240
All right Melbourne after Christmas doesn't float in the values 6.3 and in question before we.

436
00:59:08,140 --> 00:59:17,830
Options are is not the most exciting topic, but I think you'll get some more exciting material soon.

437
00:59:19,750 --> 00:59:29,140
I guess the next topic already mentioned is, is boolean expressions related as the same thing as like logical expressions in art?

438
00:59:29,190 --> 00:59:35,680
We call it the way in Python, how people talk about these things today.

439
00:59:38,680 --> 00:59:43,060
So in many cases,

440
00:59:45,070 --> 00:59:57,160
in programing you have to do logic requires that we only execute different statements depending on whether or not a certain condition is satisfied.

441
00:59:57,190 --> 01:00:02,770
For example, if we're looking at a subset of a dataset,

442
01:00:03,640 --> 01:00:21,970
that is the sum setting is done according to a certain list of criterion and have to express that formally as a Boolean expression.

443
01:00:22,170 --> 01:00:35,810
When you're when you're working with a programing language, it's basically a way to express certain logical conditions kind of in a formal way.

444
01:00:37,540 --> 01:00:48,430
So I think that as a general definition, a Boolean expression is just any expression that when you run it, it evaluates to either true or false.

445
01:00:49,210 --> 01:00:53,960
So here these are just examples of Boolean expressions that you could run in Python.

446
01:00:53,980 --> 01:01:03,790
So you can write down the expression five is greater than three and run it in Python and then with the terminal value, return the value.

447
01:01:03,790 --> 01:01:09,910
True. This is also an expression that you can run in Python and that will return the value.

448
01:01:10,420 --> 01:01:17,020
True as well since it's true here. This is also true of this expression.

449
01:01:17,020 --> 01:01:20,310
If you run that, that will be true. This one is not true.

450
01:01:20,320 --> 01:01:24,160
So this is basically testing whether or not these two strings are equal.

451
01:01:26,320 --> 01:01:30,160
So if you run this, this should be false. So it should return the value false.

452
01:01:31,160 --> 01:01:37,930
Okay. Okay. So here, just yeah, these are just the examples I just mentioned before.

453
01:01:38,440 --> 01:01:44,229
I think running you can run these directly in Python first to return value.

454
01:01:44,230 --> 01:01:48,280
True. And then the string comparison returns the value false.

455
01:01:51,110 --> 01:02:00,589
So in terms of like creating people, writing down, doing expressions,

456
01:02:00,590 --> 01:02:13,620
I would say most human expressions are really just combining these types of comparisons and these types of Boolean operations, as we call it.

457
01:02:14,160 --> 01:02:22,520
It's just combining them in certain ways. It's really all the expressions come down to I mean,

458
01:02:24,210 --> 01:02:30,980
in some cases the logic can be kind of complicated where you're using a bunch of comparisons and Boolean

459
01:02:30,980 --> 01:02:39,350
operators write it down and all of it is all it is is just a series of kind of comparison comparisons.

460
01:02:39,350 --> 01:02:46,790
And this is really an apparatus and a work and now it's okay, so let's see.

461
01:02:50,000 --> 01:02:58,480
This is just this is just the less than an operator integrating an operator and just returns.

462
01:02:59,260 --> 01:03:07,570
It's just saying anything less than is the thing on the left hand side, less than the thing on the right.

463
01:03:07,990 --> 01:03:11,500
That's all it is. So this returns false.

464
01:03:12,430 --> 01:03:15,340
You can do this with strings.

465
01:03:15,850 --> 01:03:31,360
In that case, it's kind of just kind of an alphabetical order comparison and lesser than words that equal to operator is just the double equals sign.

466
01:03:31,840 --> 01:03:37,000
All that is used for is to test whether or not the two things are actually equal to each other.

467
01:03:39,410 --> 01:03:46,650
So we like to do if we write down to double equal to and run that expression, I should return the value.

468
01:03:46,680 --> 01:03:50,150
True if we run these other expressions.

469
01:03:50,180 --> 01:03:54,430
Well, this one should be false. Since these two strings are not equal.

470
01:03:55,060 --> 01:04:01,270
And this should equal truisms as these should return true, since these these two strings are equal.

471
01:04:03,130 --> 01:04:08,610
So the only other thing is not equal to one here.

472
01:04:11,240 --> 01:04:25,600
This table. And basically, you know, this table is basically just saying, ah, these are the two things not equal to each other.

473
01:04:25,810 --> 01:04:34,780
So we had to acknowledge that to here and when we turn shovels, we get this string not equal to this journey turned true.

474
01:04:35,500 --> 01:04:45,880
So it's basically just returns the opposite of what we would have with double equals doing so.

475
01:04:46,600 --> 01:04:49,630
Okay. So this is just a little bit of that question.

476
01:04:55,630 --> 01:04:58,990
So what what type of variable?

477
01:04:59,710 --> 01:05:11,980
I just want to ask you. So first off, again, lunch is a string and here we have a Susie, an expression which uses that string.

478
01:05:12,660 --> 01:05:15,670
So which type of variable is lunch to.

479
01:05:16,600 --> 01:05:20,350
Well, we have a boolean expression here.

480
01:05:20,350 --> 01:05:23,800
I would say it's moving so it's going to return a boolean value.

481
01:05:24,580 --> 01:05:37,150
And then I think it should be true that since the statement is true, which is equal to the string salad, so the answers are three.

482
01:05:37,960 --> 01:05:47,680
So if you run this type of thing, this type of code, the type of lunch two should be, it should be a double and.

483
01:06:01,070 --> 01:06:08,180
Let's start there. You have material. Are we on time?

484
01:06:12,850 --> 01:06:20,050
So I'll do the maybe I'll just do an introduction to your statements then just to cover these three slides,

485
01:06:22,060 --> 01:06:27,310
just to just so you can see where we're going and a few minutes early.

486
01:06:27,730 --> 01:06:31,270
So I think your earlier expressions are most useful.

487
01:06:32,320 --> 01:06:41,470
Well, they're useful kind of all over the place for any sub setting data sets or arrays in certain ways come out of that.

488
01:06:41,530 --> 01:06:46,330
And of course, the most immediate way they're useful is as part of if statements are event statements.

489
01:06:47,380 --> 01:06:55,240
So if statements are basically used only if you want to execute a piece of code, only if a certain condition is satisfied.

490
01:06:58,600 --> 01:07:01,810
So the basic form of an statement is the following. So.

491
01:07:08,530 --> 01:07:16,530
So here. I just thought you should mention it pretty well.

492
01:07:17,110 --> 01:07:20,110
I mention it now. So in Python you do have to do this important thing.

493
01:07:24,430 --> 01:07:34,030
So kind of the the thing, the thing that's in the body of the if statement, you have to you have to do and I forgot the exact cutoff,

494
01:07:34,030 --> 01:07:42,250
but it has to be at least, I think, three or four spaces in order for it to at least four in order for it to work.

495
01:07:43,090 --> 01:07:46,630
It's kind of part of the statement that's kind of the way you have to do it.

496
01:07:46,660 --> 01:08:01,730
Type on it's you don't you don't know what it's like inside a set of curly braces or you put the colon here and everything inside.

497
01:08:01,750 --> 01:08:07,420
Your statement has to have this indent, so you have to have a few spaces.

498
01:08:08,250 --> 01:08:14,510
So I was able to see some more examples when we look at code,

499
01:08:14,510 --> 01:08:21,700
but I just mention now all we do as this is one difference between Python and

500
01:08:21,700 --> 01:08:29,019
R is you have to keep track of doing proper indentation for improper space.

501
01:08:29,020 --> 01:08:34,360
Here we python. That's not necessarily something you you absolutely have to do,

502
01:08:35,470 --> 01:08:40,510
although I think it's usually a pretty good practice to put some workstation in my space.

503
01:08:41,860 --> 01:08:47,800
So the way it works is that, you know, if this is condition might be a boolean expression.

504
01:08:48,220 --> 01:08:53,760
If condition evaluates to true, it will not execute this chunk of python.

505
01:08:53,760 --> 01:08:59,380
So if it's not true, you just skip over this, you don't execute any of the code here.

506
01:09:00,700 --> 01:09:03,790
That's kind of the way if statements work in python.

507
01:09:04,960 --> 01:09:08,560
So here object is here to see an example.

508
01:09:08,560 --> 01:09:21,490
So here I just I just ran all of these statements and then we'll see what it prints out by run five equals to then run this statement,

509
01:09:21,490 --> 01:09:27,970
it'll print out how long. That's because this expression evaluates to true.

510
01:09:29,530 --> 01:09:36,099
I run this one. If you run it, it basically doesn't do anything or it doesn't print out anything to then to the screen.

511
01:09:36,100 --> 01:09:45,850
So that's because the way an expression evaluates to false, because it will mention next time and it will work.

512
01:09:50,470 --> 01:09:56,290
This one is true. False because I think one of these is is false.

513
01:09:56,290 --> 01:10:04,239
So while D is less than three, B is not 2.5.

514
01:10:04,240 --> 01:10:11,890
So if we look at and this is basically testing, is it probably true or not, that doesn't print out anything.

515
01:10:12,430 --> 01:10:20,830
But if we do four or that's just testing if at least one of these is true.

516
01:10:20,890 --> 01:10:24,940
So in the last case, what we're going to print out is a little message.

517
01:10:25,300 --> 01:10:30,129
Okay, let's find a way to place state statements works.

518
01:10:30,130 --> 01:10:32,560
And this is the syntax in Python.

519
01:10:32,560 --> 01:10:41,770
And this is kind of to have to learn smoothing expressions and then we have to have the body of the state that you have to have this,

520
01:10:41,770 --> 01:10:45,440
this and then you have to usually use like for space.

521
01:10:48,030 --> 01:10:52,120
Okay, so maybe we'll just finish with this.

522
01:10:54,940 --> 01:10:57,579
If you do something like this quality,

523
01:10:57,580 --> 01:11:09,460
the value of a after running this chunk of code so let's say is equal to one has to give to the greater than zero or issue three is.

524
01:11:10,450 --> 01:11:14,590
So if one of these is true. So to Israel, ground zero.

525
01:11:16,000 --> 01:11:22,090
So the other statements just means that we're testing if one or more our great country.

526
01:11:22,270 --> 01:11:26,050
So this this entire Boolean expression about it is true.

527
01:11:27,280 --> 01:11:30,859
So we're happy to only execute this.

528
01:11:30,860 --> 01:11:42,230
So we have a is not equal to two times two, so it's considered all finished anyway.

529
01:11:42,400 --> 01:11:49,209
So that was the last slide. But I think the next time we'll just go over the and,

530
01:11:49,210 --> 01:12:00,610
and or components of Boolean expressions and then we'll go and it's basically two statements in the first name.

531
01:12:00,700 --> 01:12:11,250
So we'll kind of start off there so this early and then the questions, yeah,

532
01:12:11,320 --> 01:12:24,850
I want to know how in comparing the strings like letters and what do without testing if they or yeah,

533
01:12:24,880 --> 01:12:32,410
like it's not really like the and B how does it compare the system?

534
01:12:35,740 --> 01:12:42,910
You know, how much time frame, how does it like?

535
01:12:43,200 --> 01:12:54,610
I think the thing here is from the first one, I'm wondering where do you want to start recording like,

536
01:12:59,750 --> 01:13:23,020
oh, this is a lot of other things like like this show is false.

537
01:13:24,370 --> 01:13:33,460
All right? So that is why I figure that something like this.

538
01:13:35,020 --> 01:14:01,630
Okay, yeah, I think this time. So where to would to just as I'm sure you know they wouldn't say that they're testing

539
01:14:03,020 --> 01:14:10,790
so in Los Angeles so I have yeah in this case because it's a very consistent way.

540
01:14:11,310 --> 01:14:22,480
It's a short of it.

541
01:14:22,510 --> 01:14:26,920
What can I say?

542
01:14:27,430 --> 01:14:36,780
It's hard. It's like, yeah, it's an easier way to think about.

543
01:14:36,790 --> 01:14:46,440
Like, we got to find better by love.

544
01:14:47,250 --> 01:14:54,590
Yeah, yeah, yeah, yeah, yeah.

545
01:14:56,120 --> 01:15:15,450
I just. I think there's probably no use all your little details of what was going on, I think.

