1
00:00:00,580 --> 00:00:04,460
Yeah. Yeah.

2
00:00:08,500 --> 00:00:18,060
Right. Hi, everyone. Welcome to week two of our class. Together we are recording and just an announcement.

3
00:00:18,210 --> 00:00:23,580
Your week one homework was due today and your week to homework is all about data management.

4
00:00:23,580 --> 00:00:31,709
Data management is kind of a big topic for I have you have gone through data management exercises and other programing languages.

5
00:00:31,710 --> 00:00:35,970
So what do we do in two weeks? I recommend you get started on it earlier.

6
00:00:35,970 --> 00:00:40,650
This is the most time consuming homework assignment we'll have, of course.

7
00:00:41,250 --> 00:00:46,020
Any questions about logistics or process or activities?

8
00:00:50,150 --> 00:00:58,740
Well, feel free to bring them up as they come along. Folks have also done a nice job of posing questions of this nature on on the discussion board.

9
00:00:58,760 --> 00:01:05,050
So that's been helpful to. Right.

10
00:01:05,120 --> 00:01:09,470
So what we're going to do, we'll recap last class and go over homework one.

11
00:01:10,190 --> 00:01:13,519
We'll do a topic that was the end of week one.

12
00:01:13,520 --> 00:01:19,639
So we'll do functions and we'll do coding related to functions. And we'll take a break and this is where we'll get started on the data management.

13
00:01:19,640 --> 00:01:24,740
So reading things so well, this will be to be continued in the class next week.

14
00:01:27,200 --> 00:01:34,130
All right. A couple of things I noticed in your homework was just you today, so I was just glancing over it.

15
00:01:34,700 --> 00:01:40,790
Remember, I include both your code and your responses in your submissions.

16
00:01:41,090 --> 00:01:47,740
Does anybody want to talk about their experience there? How did you stitch together your code and your responses?

17
00:01:47,750 --> 00:01:51,530
Because there's many options for how to do this. What's an approach somebody took?

18
00:01:54,120 --> 00:01:57,340
To do that. Please.

19
00:01:58,530 --> 00:02:02,510
If I use the word template, you provide it.

20
00:02:02,570 --> 00:02:09,170
Okay. And in there, it was a good setup as they write the code run.

21
00:02:09,590 --> 00:02:17,650
And then when you're done, everything hit, render. And then it's based on what I use for it.

22
00:02:17,920 --> 00:02:25,010
I type files that shows off the code and say, Oh, nice, you were able to render the code together in a portable markdown document.

23
00:02:25,040 --> 00:02:32,190
Yeah. Fantastic. Where are you going? To say something different? I just did the answer and I just copy and paste.

24
00:02:32,210 --> 00:02:36,070
It's like the code for this question. That is a perfect approach to it.

25
00:02:36,080 --> 00:02:39,530
You're welcome to copy your code and your answer.

26
00:02:39,650 --> 00:02:46,880
And so I got it. I like so particularly if there's a future like that, you're getting recurrent errors with your rendering.

27
00:02:47,480 --> 00:02:54,920
It's not a failure. Feel free to copy and paste that and we can help troubleshoot any any kind of coding issues in the future.

28
00:02:55,220 --> 00:02:59,930
So yes, these things. So you've got options there. Anybody else try any other approaches?

29
00:03:06,390 --> 00:03:19,980
Excellent. I noticed a couple of people were had their answer slightly off for the boiling point of water and Fahrenheit

30
00:03:20,190 --> 00:03:24,780
and this is just my regular plug for something I'm going to highlight all the way throughout the semester.

31
00:03:25,140 --> 00:03:29,210
So logic, check your work hours. Not going to tell you when you got errors.

32
00:03:29,670 --> 00:03:36,990
So before you quote anything to figure out, what do you expect? So you might look up the boiling point of water from an external reference source.

33
00:03:37,290 --> 00:03:40,860
That way you can see what you get and then assess if they match.

34
00:03:41,160 --> 00:03:49,020
So it's not cheating. You want to know what things are, expectation, what what range of values do you expect to get for any given calculation?

35
00:03:49,200 --> 00:03:57,689
And then we can see if we're if we're off. Okay. So logic checking and not just accepting the responses that we'll give you,

36
00:03:57,690 --> 00:04:03,960
but making sure you think to yourself a little bit about does that fit my expectations for that particular value?

37
00:04:04,620 --> 00:04:13,030
But, you know, this happens to us all at various points. I also wanted to point out the difference between this two notation,

38
00:04:13,440 --> 00:04:19,860
the upwards pointing arrow operator and the asterisk, and you will help me distinguish those two.

39
00:04:19,890 --> 00:04:26,840
What's the difference between these two symbols? And are the asterisk than the upward or exponential?

40
00:04:27,300 --> 00:04:30,360
Here at the asterisk is multiplied.

41
00:04:30,630 --> 00:04:38,190
Yeah. Perfect. So this one's essentially taking Z time Z because it's exponential and that's one is taking Z times two.

42
00:04:39,120 --> 00:04:46,380
So it was the same value. Was there anything else that came up, any issues and pain points you had as you were going through the homework?

43
00:04:49,140 --> 00:04:52,460
You haven't submitted it yet, but no penalty. So feel free to get on that.

44
00:04:54,170 --> 00:05:00,360
This is all to give you opportunity to practice. Continue using the discussion board.

45
00:05:00,570 --> 00:05:08,220
If questions come up and folks have been really generous and offering their their ideas as they go through the process, do.

46
00:05:11,850 --> 00:05:24,390
Yeah. Cutting in hours is a community sport. All right, so let's go over what did we learn last time so that we can dust off those cobwebs together?

47
00:05:24,480 --> 00:05:27,240
So. I tried.

48
00:05:27,810 --> 00:05:35,940
I've contacted at least a dozen people in the School of Public Health trying to get a whiteboard on wheels so that I can draw some things here.

49
00:05:36,450 --> 00:05:40,889
But apparently this room is governed by a central campus, not the School of Public Health.

50
00:05:40,890 --> 00:05:44,510
So I filled in that, but. So I.

51
00:05:44,520 --> 00:05:52,310
Well, I apologize for facing away from you to do some typing in here, but let's see if we can talk to each other.

52
00:05:52,320 --> 00:06:01,840
So what are some object types that we've learned so far and what is an object to begin with?

53
00:06:02,010 --> 00:06:16,380
What can anyone define an object for me and are? Sometimes it's hard to define.

54
00:06:16,480 --> 00:06:19,840
It's kind of a big concept.

55
00:06:23,770 --> 00:06:29,560
So an object is essentially anything you assign any.

56
00:06:30,400 --> 00:06:38,950
I'm trying to. Okay. Are you saying you assign a name and what's the assignment operator?

57
00:06:38,980 --> 00:06:48,140
How do we give something? A name? Yes, please.

58
00:06:50,500 --> 00:06:54,489
Looks like the arrow. Yeah, yeah, yeah.

59
00:06:54,490 --> 00:07:05,170
And what direction is that arrow pointing the. Yeah, cause it's reminding us that our is going to read our code in this case from right to left.

60
00:07:05,710 --> 00:07:16,270
So is this symbol of an arrow and a dash and ah is going to read our code from right to left.

61
00:07:17,800 --> 00:07:24,970
So essentially the instructions are on the right and then the name, whatever name you want to put it is on the left.

62
00:07:25,450 --> 00:07:28,269
You are welcome to. It's, it's almost equivalent.

63
00:07:28,270 --> 00:07:35,530
It's not quite equivalent, but you could as an alternative if you don't want to use that two symbol there,

64
00:07:35,830 --> 00:07:39,850
you could use like whatever your name is, you can use a single equal from.

65
00:07:40,810 --> 00:07:50,560
And then here would be like the value. Personally, I like this two keystroke method because it reminds me of what direction are going in.

66
00:07:51,160 --> 00:07:56,320
So it's going from whatever value you provide on the right to whatever name you provide on the left.

67
00:07:56,740 --> 00:08:00,070
And when you make a new object, where do we see it appear?

68
00:08:01,520 --> 00:08:05,570
Where does it pop up once we make an object? Yeah.

69
00:08:06,170 --> 00:08:10,910
The environment exactly shows up in our working environment.

70
00:08:11,060 --> 00:08:19,820
And so an object is only activated and ready to use if it's in our working environment and something that might stick out in the future.

71
00:08:20,120 --> 00:08:23,840
When you click that render button, just stitch everything together.

72
00:08:25,010 --> 00:08:31,760
That experience of rendering acts like a separate planet, and so everything needs to be self-contained in there.

73
00:08:32,420 --> 00:08:39,860
If you're creating an object or referencing an object in that within that markdown, it needs to come from there.

74
00:08:40,590 --> 00:08:45,440
The render can't pull things from the working environment.

75
00:08:45,860 --> 00:08:50,000
It's render. This will come up. We'll give some practices on it.

76
00:08:50,300 --> 00:08:55,280
So what are some types of objects? Usually we classify objects by their shape.

77
00:08:56,180 --> 00:08:59,480
Can anybody give me some examples of different shapes of objects?

78
00:09:01,960 --> 00:09:05,340
All our data. Yeah, please. Baxter Yeah.

79
00:09:05,400 --> 00:09:08,970
Baxter So if Baxter had is. What's the shape of Baxter?

80
00:09:10,020 --> 00:09:18,600
This is one dimension of data, and we have both values and positions.

81
00:09:19,760 --> 00:09:26,210
So this would be basically a series of numbers or a series of letters.

82
00:09:26,450 --> 00:09:33,920
So the important thing with R is you can have as many positions as you want, but within a vector it wants them all to be the same type.

83
00:09:34,990 --> 00:09:39,670
So we've got numbers and that factor wants all of them to be numbers. It doesn't want a random letter from Hitler.

84
00:09:40,590 --> 00:09:46,140
Per our types of vectors, we can have numeric vectors, we can have character vectors,

85
00:09:47,490 --> 00:09:54,360
we can have factor vectors which are objects which have distinct levels that are allowed.

86
00:09:54,360 --> 00:10:02,520
So character vectors are very open ended and sometimes with our surveys we want to restrict the values or not.

87
00:10:03,210 --> 00:10:08,460
Factor of value can give us that. What are some other vector types I'm forgetting so far?

88
00:10:08,460 --> 00:10:11,940
I've got numeric, I've got character, I've got factor.

89
00:10:12,600 --> 00:10:28,460
At least a couple more we mentioned. You have deep cellular specific variable types and we can have logical vectors.

90
00:10:28,760 --> 00:10:32,840
Does that ring a bell? So I want to remember what a logical object is.

91
00:10:35,870 --> 00:10:39,710
Yeah. Yeah. There's a true process.

92
00:10:40,220 --> 00:10:45,410
So that that'll be useful from when we're asking our questions, like, is this true about my data?

93
00:10:45,410 --> 00:10:51,830
And I'll respond with the logical outcome. All right. So vector is for objects that are present in one dimension.

94
00:10:53,570 --> 00:10:58,740
And all of our objects are values and positions. What about if we have data in two dimensions?

95
00:10:58,760 --> 00:11:05,670
What type of object is that? Two dimensions.

96
00:11:15,090 --> 00:11:19,140
So let's say we have rows and we have columns. What type of objects are those?

97
00:11:20,880 --> 00:11:27,720
Wonderful. So this is a data frame. So now we have rows and we have columns.

98
00:11:28,110 --> 00:11:37,250
And the data frame we can essentially think of in our as a every column is a vector.

99
00:11:37,260 --> 00:11:42,690
We think about it that way because our wants all of the columns to be the same type of information.

100
00:11:42,990 --> 00:11:48,390
So if one of the columns you have one column that's all numeric, one column, that's all characters.

101
00:11:49,050 --> 00:11:56,640
So our has a preference for putting all of your essentially in an epidemiologic study.

102
00:11:56,790 --> 00:12:00,600
It's putting our variables in the columns and our participants in the rows.

103
00:12:00,810 --> 00:12:08,430
That's the most common way to comply with this this preference in r what about this follow up question here?

104
00:12:10,490 --> 00:12:15,319
For what symbol do we use to index or look around inside of an object?

105
00:12:15,320 --> 00:12:19,400
Or what is the position in an object? I may have a memory.

106
00:12:19,580 --> 00:12:24,140
What? What shape or keyboard information do we use for that?

107
00:12:26,960 --> 00:12:43,210
How do we figure out what position are those values as a. So this one's going to be a square bracket.

108
00:12:45,310 --> 00:12:57,570
So if we have a vector. The positions will be in a square bracket and we only have one dimension, so we only need to provide one dimension of numbers.

109
00:12:58,350 --> 00:13:03,300
But for dataframe we have two dimensions, so we have to give it the rows.

110
00:13:04,320 --> 00:13:06,630
And then separated by a comma from columns.

111
00:13:07,950 --> 00:13:17,100
So essentially, if we say we want it to look in row to column for you, put square bracket or comma two in that way.

112
00:13:17,670 --> 00:13:22,930
So you give the provide the coordinates and the coordinates. Expecting the rows first and the columns.

113
00:13:28,000 --> 00:13:31,059
What are some ideas you have about objects?

114
00:13:31,060 --> 00:13:33,420
And I forget any other objects. Ideas?

115
00:13:35,780 --> 00:13:40,700
So this is essentially where we house all of our data in the future will be able to make other types of objects.

116
00:13:40,700 --> 00:13:45,860
We'll be able to make graphic objects, we'll be able to make regression model objects.

117
00:13:46,670 --> 00:13:50,060
So really broadly, this is anything we assign a name to.

118
00:13:50,540 --> 00:13:54,590
But initially, our first two object types, what be working with are vectors and data frames.

119
00:13:59,650 --> 00:14:04,390
Right. And the other things that are on your mind from the first class that we should go over together.

120
00:14:09,640 --> 00:14:13,820
The second half of the slide I actually pushed off until this week. So we're going to watch into this.

121
00:14:13,820 --> 00:14:16,950
Right now, we're talking about functions and libraries. Right.

122
00:14:18,330 --> 00:14:21,450
Feel free to bring up any additional questions as we go on.

123
00:14:23,740 --> 00:14:24,040
All right.

124
00:14:24,040 --> 00:14:34,330
So you may remember last time we talked about some of these learning objectives of the object types, and that will do the second part about functions.

125
00:14:34,930 --> 00:14:38,710
So we're going to learn how to implement functions, to perform actions on data.

126
00:14:40,390 --> 00:14:44,830
So we've talked about our operators. This has come up in our in our coding exercise.

127
00:14:45,370 --> 00:14:49,540
So we have a series of these mathematical operator operators are just that's just a

128
00:14:49,540 --> 00:14:53,860
fancy name for some kind of symbol that has a special meaning in the our software.

129
00:14:54,610 --> 00:15:00,220
So so these are symbols that we've used so far and their purpose.

130
00:15:02,210 --> 00:15:11,420
There's also logical operators. So we can use the arrows to mean things like less or less than or equal to.

131
00:15:13,730 --> 00:15:17,990
We have to use two equal sides to ask if something is exactly equal to.

132
00:15:18,260 --> 00:15:27,080
That's because one equal sign can be used for an assignment vector for confusing the exclamation point in r means not.

133
00:15:28,400 --> 00:15:40,410
So this is saying is this not equal to something? The ampersand means and in the vertical bar means or so we don't have to memorize these right now.

134
00:15:40,410 --> 00:15:42,240
These are always things we can refer back to,

135
00:15:42,480 --> 00:15:47,340
but just getting in mind that these type of symbols are going to come up often for us throughout our work.

136
00:15:51,790 --> 00:15:56,440
All right. Functions. These are amazing the language of our has.

137
00:15:57,440 --> 00:16:02,870
Such a huge vocabulary, largely attributed to all of the functions that are available.

138
00:16:03,050 --> 00:16:07,790
So functions essentially are the verbs of our language of are these are the actions,

139
00:16:07,800 --> 00:16:16,820
these are the ways in which you can perform some kind of calculation or task and are so the general structure of function in our.

140
00:16:18,620 --> 00:16:22,160
It's going to be that it's going to accept some kind of input object.

141
00:16:22,790 --> 00:16:29,040
It will perform a calculation or transformation on that input object and then return to you what that object is.

142
00:16:29,070 --> 00:16:34,580
Following the calculation of the transformation. So for example, what's this like first?

143
00:16:36,560 --> 00:16:40,950
This first symbol here. Do we have to type this? What does this first initial symbol mean and are?

144
00:16:43,320 --> 00:16:47,210
Where does this thing come from? Yeah.

145
00:16:47,220 --> 00:16:50,910
He's are great systems. Yeah.

146
00:16:50,910 --> 00:16:56,639
That's our in our lower left hand corner, that's in our, our console.

147
00:16:56,640 --> 00:17:01,860
That's our way of telling us that it's ready. It's not still thinking about the last calculation.

148
00:17:02,370 --> 00:17:08,189
So this is a command prompt. We don't have to type it. So what I typed is that contact after that.

149
00:17:08,190 --> 00:17:12,000
So I'm typing a function called Mean. And how do I know it's a function?

150
00:17:12,240 --> 00:17:15,570
The key symbol for functions are these rather parentheses.

151
00:17:16,850 --> 00:17:21,020
So we saw in the last session that those square brackets are for objects.

152
00:17:21,530 --> 00:17:27,600
We'll see that these rounded parentheses are for functions. So I hope this kind of sticks in your head when you're trying to remember which is which.

153
00:17:27,620 --> 00:17:30,770
I'll be like, okay, Dr. Bean was at the front doing some kind of chair.

154
00:17:30,780 --> 00:17:35,840
So the square brackets are for objects and the rounded parentheses are for functions.

155
00:17:35,890 --> 00:17:42,530
Okay, so anytime you see these rounded parentheses, whatever the word in front of it, that's a function.

156
00:17:43,250 --> 00:17:45,920
So that's one kind of action or task we're going to perform,

157
00:17:46,190 --> 00:17:51,200
and we'll put an object within these rounded parentheses so that we can tell our what object to perform on.

158
00:17:52,910 --> 00:17:53,389
So it's nice.

159
00:17:53,390 --> 00:18:02,630
There are some basic functions, functions that are innate and ready for you to use as soon as we turn on our and these have kind of intuitive meaning.

160
00:18:03,050 --> 00:18:07,190
So this is going to calculate the average. This is going to calculate the minimum.

161
00:18:07,490 --> 00:18:13,030
This is going to calculate the maximum. All right.

162
00:18:13,040 --> 00:18:20,480
So here's the basic structure of that. So essentially there'll be a function and you perform it on an object.

163
00:18:21,290 --> 00:18:26,330
And if you want, you can specify a bunch of options after the comma and every option.

164
00:18:26,570 --> 00:18:29,480
If you do multiple options, there'll be a comma after each one.

165
00:18:31,200 --> 00:18:37,800
So essentially some kind of options go in the function does its work and a result comes out the other side.

166
00:18:41,180 --> 00:18:49,340
In general, if we do a function like this, those results will get printed in the output or printed in your rendered document so you can look at it.

167
00:18:52,540 --> 00:18:59,290
Other times we want to store the output of that function as a new object so that then we can do stuff with it.

168
00:18:59,860 --> 00:19:07,210
So for example, here I'm taking that function and performing it on an object and I don't just want to look at the results.

169
00:19:08,080 --> 00:19:11,320
Now I'm assigning it as a new object I'm calling output.

170
00:19:12,100 --> 00:19:19,360
This can be useful because sometimes we want to perform a calculation and then we want this new object because we want to plot it.

171
00:19:20,200 --> 00:19:24,550
Or we want this new object to add to our existing dataset because we made a new variable.

172
00:19:25,110 --> 00:19:30,010
Okay, so there's any number of reasons why you might want to perform a function and then save the output,

173
00:19:30,730 --> 00:19:33,790
not necessarily think of it, but assign that output as an object name.

174
00:19:35,350 --> 00:19:41,710
So you start to create more and more objects in your working environment that you can use and do more complicated tasks.

175
00:19:45,340 --> 00:19:51,370
There's a special symbol called the pipe operator. This is a three character element.

176
00:19:51,370 --> 00:19:56,050
So a person that sign an arrow and another percent sign.

177
00:19:57,430 --> 00:20:05,980
This is very common and you'll likely see this come up if you're like searching StackOverflow or some other resource for help in our.

178
00:20:06,490 --> 00:20:12,040
This comes up often for the pipe operator. This is an alternative way of coding.

179
00:20:12,040 --> 00:20:16,300
You can code the traditional way of coding I just showed you on the last slide.

180
00:20:16,540 --> 00:20:21,480
Where do you perform a function on an object or you can use the pipe operator.

181
00:20:21,490 --> 00:20:26,560
This is kind of like a newer way of coding and here we'll see.

182
00:20:26,800 --> 00:20:31,690
So this is only activated in a tidy verse package, but once you have it activated.

183
00:20:33,070 --> 00:20:38,110
You can do a slightly different format. So normally we would perform a function on an object.

184
00:20:39,160 --> 00:20:44,680
But here we take an object and we pipe it into a function.

185
00:20:45,460 --> 00:20:48,760
So you notice we don't have to specify the object within the function.

186
00:20:49,750 --> 00:20:53,290
You're using this symbol to say we're piping this object into a function.

187
00:20:53,950 --> 00:20:57,670
Why do we need this? This looks even more like even longer.

188
00:20:57,940 --> 00:21:03,819
This can be useful if you want to perform a whole bunch of functions on that object because then you

189
00:21:03,820 --> 00:21:08,110
don't need to keep repeating the name of this object over and over again within the function here.

190
00:21:08,110 --> 00:21:12,520
It just knows that you're piping that object and you can have a whole bunch of functions you want to type it.

191
00:21:13,030 --> 00:21:19,150
All right. So if you add this way of coding works better for you, kind of like traditional form.

192
00:21:19,600 --> 00:21:26,350
That's great. Stick with that. Or if this way of coding resonates with you, grab onto it.

193
00:21:26,530 --> 00:21:31,140
This is where your start to develop your own. Personal flavor of coding.

194
00:21:37,700 --> 00:21:42,890
Yes. So this is especially helpful if you are linking multiple functions on that one object.

195
00:21:44,390 --> 00:21:48,290
Okay. Where do those functions come from?

196
00:21:49,340 --> 00:21:52,740
Some of them are built in. So they're default.

197
00:21:52,760 --> 00:21:57,800
That's how we're able to use some functions right off the bat. And we don't need to call anything up.

198
00:21:58,370 --> 00:22:04,460
But others, we have to load or attach or in the future you may just start building packages yourself.

199
00:22:05,790 --> 00:22:09,930
But it's actually functions come stored in packages or libraries.

200
00:22:13,330 --> 00:22:22,900
Those packages are only active during that current session here, and so they're stored in that light working memory during your current session.

201
00:22:23,110 --> 00:22:27,220
So if you load a package today, you close the half, you come back tomorrow.

202
00:22:27,520 --> 00:22:31,360
That package is not no longer loaded. You have to queue it back up that next time.

203
00:22:32,470 --> 00:22:37,630
Same thing. If you're doing a rendering, you have to load that package within that course on markdown.

204
00:22:37,810 --> 00:22:41,680
It's not going to be able to pull it from another markdown document.

205
00:22:42,580 --> 00:22:49,570
So these are kind of temporarily pulled up. What are these libraries and packages?

206
00:22:49,780 --> 00:22:56,860
We can use a function called library to ask ah and see what libraries are available on our computer.

207
00:22:57,640 --> 00:23:03,160
So here's just a screenshot from my personal computer and you can see there's dozens.

208
00:23:03,350 --> 00:23:08,380
I we only made it through A's to sees. This is when I perform that library function here.

209
00:23:09,860 --> 00:23:12,200
I don't want to load all of these at the same time.

210
00:23:13,190 --> 00:23:20,389
That's why by default you have to like select which packages or libraries you want to load because some of

211
00:23:20,390 --> 00:23:26,000
these might have conflicting functions if I get confusing which which function you're using at any given time.

212
00:23:26,240 --> 00:23:33,290
So you have to specifically decide which which package you want to activate or use or attach for that current session.

213
00:23:38,710 --> 00:23:46,360
In order to have a package become available to to look it up in that current session, we have to install it from the Internet.

214
00:23:47,560 --> 00:23:49,390
So this is a stuff we only do once.

215
00:23:49,960 --> 00:23:58,930
This is the act of physically downloading a package from the Internet to our personal machine or in the case of our studio cloud.

216
00:23:59,380 --> 00:24:03,850
I've done this already. I downloaded them to our personal class workspace.

217
00:24:05,560 --> 00:24:12,100
So we only have to do that once. But every time we run are we have to queue at queued up with a library statement.

218
00:24:12,820 --> 00:24:14,470
So this can be kind of a sticky point.

219
00:24:15,190 --> 00:24:22,270
You may not have a function available that could either be because you never installed it or because you never activated it.

220
00:24:23,710 --> 00:24:28,060
So so these are this is something that we're going to do every time we start a new session.

221
00:24:28,240 --> 00:24:32,860
If there's a package we need, we will load that library and make it useful for ourselves.

222
00:24:35,210 --> 00:24:38,940
Okay. So to recap, we have operator symbols,

223
00:24:39,060 --> 00:24:48,140
symbols that have specialized meaning and are functions or actions or verbs and are they're typically performed on objects.

224
00:24:48,710 --> 00:24:54,560
They come from packages or libraries. Those packages are libraries if we want those functions to be activated.

225
00:24:54,890 --> 00:25:02,330
We have to load those. All of our functions are going to have default settings, but we can specify other options if we want.

226
00:25:02,330 --> 00:25:10,820
After the commas and alternative way of coding is piping those objects into the functions with the pipe operator, if you like.

227
00:25:11,510 --> 00:25:15,080
No pressure. What do you think? Let's pause for a second.

228
00:25:15,090 --> 00:25:28,610
How is this where they appear? Well, let's jump in our code and see if we can practice using functions together.

229
00:25:30,140 --> 00:25:35,810
All right, so for this, we're going to rejoin our Week One project.

230
00:25:36,440 --> 00:25:40,020
So this is our same. Links from last week.

231
00:25:44,200 --> 00:25:52,270
All right. If you were here with us last week, you'll have an introduction class project under your account.

232
00:25:52,750 --> 00:25:54,460
You can click that to rejoin it.

233
00:25:54,760 --> 00:26:02,110
If this is your first time, join us then look for the introduction class one under my teacher account and click happy.

234
00:26:02,740 --> 00:26:06,190
This is because only one person can be in a given project at once.

235
00:26:06,880 --> 00:26:11,910
And that way you have your own project that is just yours, and you can make all of those edits.

236
00:26:12,790 --> 00:26:15,860
So I just want to pause and make sure we don't leave anyone behind.

237
00:26:15,880 --> 00:26:21,640
Everybody can get into this week one project. Can we have this one be deploying while we check in with folks?

238
00:26:27,660 --> 00:26:39,760
Ongoing issues. That's.

239
00:26:48,340 --> 00:26:58,150
All right. Isn't that enough for you to be able to see in the back?

240
00:26:58,480 --> 00:27:03,970
Shows him in a limo. That's okay. So in the lower right hand corner, we've got all of our files.

241
00:27:04,570 --> 00:27:08,590
The one we're going to continue to work through is the one called Class Introduction.

242
00:27:08,890 --> 00:27:14,770
That Q&A. So our quartile marked out. So if it's not opened already, you can click on that quartile marked F.

243
00:27:15,880 --> 00:27:21,000
And that should pop up in the upper left hand corner. Here we go.

244
00:27:23,250 --> 00:27:28,080
All right. So here's this markdown we saw. That's awesome. So we've got our header up at the top.

245
00:27:28,950 --> 00:27:33,269
We've got a number of introductions. I'm going to scroll down to where I have in my notes.

246
00:27:33,270 --> 00:27:36,410
So we left off and your row numbers.

247
00:27:37,500 --> 00:27:41,100
These values might be slightly different depending on how many notes you're taking.

248
00:27:41,130 --> 00:27:47,290
You know, encourage you to take notes. Write your code. We'll get to here.

249
00:27:54,610 --> 00:28:06,310
Okay. You'll make your first just oh, my gosh, let me just double check the where I have in my notes that we left off.

250
00:28:18,490 --> 00:28:26,490
Okay. All right.

251
00:28:26,500 --> 00:28:36,820
So I have in my notes that we. Left off of the value might be slightly different for you, but I'm a make a character vector section.

252
00:28:36,850 --> 00:28:38,950
Is this consistent with your understanding?

253
00:28:42,550 --> 00:28:47,980
If you ever want to navigate more quickly through this than I just did, scrolling back and forth, there's an outline tab here.

254
00:28:49,300 --> 00:28:57,760
And you can click to. Based on some of our headers and this can help you navigate around a large court document.

255
00:28:58,830 --> 00:29:01,590
All right, so there's a couple of buttons here that are useful.

256
00:29:02,460 --> 00:29:08,700
I'm going to use one of them right now for this down arrow with the green bar under it.

257
00:29:09,420 --> 00:29:15,690
That's essentially going to run every code chunk from the top until here.

258
00:29:16,380 --> 00:29:25,800
So this can be a way if you're just catching up with us, if we hit this down arrow, it will run all the code above it and then stop right here.

259
00:29:26,550 --> 00:29:34,560
So if I run all the code above it, I expect a bunch of objects to pop up in my environment that we may have had generated earlier in the class.

260
00:29:35,700 --> 00:29:43,590
Here's I'm going to hit this down arrow and ask running, create, thinking, Oh, look, it generated all those objects from last time.

261
00:29:43,770 --> 00:29:48,600
So in case you're starting fresh and you didn't have all these objects now, now you do.

262
00:29:49,320 --> 00:29:53,550
So that's a good way of, like, catching us all up. I mean, sure, we're all at the same place.

263
00:30:00,820 --> 00:30:07,840
Now we're going to make a character vector. So so far we've been making numeric vectors that contain numbers.

264
00:30:08,320 --> 00:30:12,970
Now we're going to make vectors that contain word type expressions.

265
00:30:13,900 --> 00:30:20,800
So the way I'm going to do that are we're going to tell our to do this by providing expressions within double quotes.

266
00:30:21,830 --> 00:30:26,930
It knows that we are providing character information because we start and end

267
00:30:26,930 --> 00:30:31,969
with the quotes and anything in the middle is using color to signify that.

268
00:30:31,970 --> 00:30:38,930
So we see it's turning to a green color and each of the elements of that vector we separate with a comma.

269
00:30:41,020 --> 00:30:44,470
The C function. This is the combine function.

270
00:30:45,010 --> 00:30:50,730
So it's a combined patch of harm that my daughter is watching for a farm in the orchard.

271
00:30:51,130 --> 00:30:55,480
And what are we going to do with that? We're going to assign it as an object.

272
00:30:55,480 --> 00:31:05,220
I'm calling fruit farms. Okay. So when we run this code, I'm expecting a new object to show up in my environment called fruit farms.

273
00:31:06,130 --> 00:31:12,040
I'm expecting it to be a character vector, and I'm expecting it to have four positions.

274
00:31:12,490 --> 00:31:15,580
So I'm developing my expectation before I even run the code.

275
00:31:15,580 --> 00:31:20,740
And let's see what we got. Can anybody remind me what's a way that we can run one line of code?

276
00:31:21,820 --> 00:31:30,880
What are some of our options to run one line of code? Yeah.

277
00:31:32,290 --> 00:31:37,029
Yeah. You know, you control enter on a PC or command, enter on a mac.

278
00:31:37,030 --> 00:31:40,240
So I'll put my cursor here and then we'll see how that goes.

279
00:31:42,010 --> 00:31:50,379
Okay, so I ran this line of code. I can see it, performed it down here in my console and the command prompt came back up.

280
00:31:50,380 --> 00:31:57,340
So it's all done. It's ready to go. I see that the fruit farms jumped up into my global environment.

281
00:31:57,520 --> 00:32:05,620
It's a character variable. It has positions one through four, and here are the first couple values of those positions.

282
00:32:06,250 --> 00:32:13,300
If I don't want to have to look in the global environment here, I can just submit the name of the object and it'll show me what that is in the output.

283
00:32:14,660 --> 00:32:21,040
Right. So here we can see that those have these values in those positions.

284
00:32:25,380 --> 00:32:28,860
If those names are too long, maybe I want to make a short version of the names.

285
00:32:29,070 --> 00:32:32,670
So here's an alternative variable I'm creating.

286
00:32:32,970 --> 00:32:37,830
And now we have our short names variable that has character information.

287
00:32:37,830 --> 00:32:48,120
So on for positions. So this can be a way that you generate information in your study related to participant names, city names, these kinds of things.

288
00:32:52,360 --> 00:33:01,120
And so far we've been using a function called C, which stands for Combine to stitch together a bunch of elements to make a vector.

289
00:33:12,840 --> 00:33:14,670
So we learned what factors could have.

290
00:33:15,780 --> 00:33:24,090
Multiple values or multiple observations, but are once all of those within a vector, all of those to be the same type of observations.

291
00:33:24,540 --> 00:33:31,290
If we want to ask our what if we forget what type of information is in there, we can use a function called Plath.

292
00:33:32,270 --> 00:33:36,440
On an object to essentially ask it, what type of variable is this?

293
00:33:37,100 --> 00:33:41,300
So this is then perform a function class on the object number of apples.

294
00:33:42,670 --> 00:33:45,909
So what are we expecting before we even run this? Does anybody have an idea?

295
00:33:45,910 --> 00:33:49,660
What what object type do you expect this variable to be?

296
00:33:54,500 --> 00:33:57,470
Yeah, I think it's going to be numeric and we can ask and double check.

297
00:33:58,370 --> 00:34:05,059
Yeah we see the balance numeric rather is new on we just made a balanced character so this

298
00:34:05,060 --> 00:34:09,080
can be a way you can double check to make sure that your variables are the way you think are.

299
00:34:09,800 --> 00:34:18,990
Sometimes when I get new data from a colleague. Like me, I may be thinking it's going to be character, but it may come in in numbers.

300
00:34:19,290 --> 00:34:26,910
So we in our will automatically think it's numeric. So we need to have some data cleaning procedures to build those employment categories.

301
00:34:28,870 --> 00:34:33,490
If you want even more information about the object, you can use the structure function.

302
00:34:33,730 --> 00:34:42,060
So that will tell you the vector type. It'll tell you the size or number of positions in the first few elements in there.

303
00:34:43,240 --> 00:34:48,220
So it will start to notice with an AR, there's many ways of getting the same information.

304
00:34:48,550 --> 00:34:53,290
So if we want to figure out what a vector type it is, we can look in the global environment.

305
00:34:54,310 --> 00:34:58,030
We can run the cloud function or we can run the structure function.

306
00:34:58,420 --> 00:35:05,049
All three ways are ways of getting a lot of the similar information and whichever one kind of sticks in your head,

307
00:35:05,050 --> 00:35:22,410
hold on to it and you can let the other ones go. I want to emphasize the differences between these rounded parentheses and these square brackets.

308
00:35:23,250 --> 00:35:27,600
So anytime we see these rounded parentheses, we're talking about a function.

309
00:35:28,890 --> 00:35:34,110
So here I've got the function length. I'm performing at an object class.

310
00:35:34,740 --> 00:35:44,790
So I'm saying, how long is this object? Balance has four elements.

311
00:35:44,790 --> 00:35:49,640
One. But instead of I use the square bracket, that's for indexing.

312
00:35:50,060 --> 00:35:58,490
That's for staying within the object. What's in that position? So this is saying within the fruit fronds object, what's in spot number three?

313
00:36:03,190 --> 00:36:09,430
What's it slap hammer to? You can also ask for multiple slots so you can use the.

314
00:36:10,870 --> 00:36:15,940
Column to say what's in spots, number one through three if you want to see more than one spot at once.

315
00:36:17,180 --> 00:36:20,560
Okay. So here we select in.

316
00:36:22,300 --> 00:36:30,150
Based on position, you can go in the opposite direction and you can find based on apples or you can find based on values.

317
00:36:30,430 --> 00:36:34,870
So this will come up in our epidemiology studies when we want to select just the participants.

318
00:36:34,870 --> 00:36:41,349
With ages greater than 65 are those with cholesterol levels below 120.

319
00:36:41,350 --> 00:36:47,710
So when we have a value or a criteria we want to pull people out of, we can use this type of approach.

320
00:36:49,600 --> 00:36:55,379
So if we just say. Where were the values at?

321
00:36:55,380 --> 00:37:00,080
Which number of apples is less than four? Our will give us a series of truths and forces.

322
00:37:00,390 --> 00:37:03,390
So position one is that less than four isn't true.

323
00:37:03,420 --> 00:37:07,590
Yes, position one is less than four, but position four and false.

324
00:37:07,590 --> 00:37:14,310
That one is not less than four. So we can pair this together with these are the which function or the square brackets

325
00:37:14,880 --> 00:37:20,340
to actually pull out the observations that have values less number of positions.

326
00:37:20,340 --> 00:37:27,320
One, two and three have values less than four. And we'll get a lot of practice at this as we go forward.

327
00:37:27,560 --> 00:37:35,600
But the general principle is you can select observations either based on position or based on values,

328
00:37:35,630 --> 00:37:39,500
you know, depending on what is most important to you at that moment.

329
00:37:42,310 --> 00:37:47,830
Let's pause here for a second. How is this landing? How is this sitting for you?

330
00:37:47,990 --> 00:37:54,820
Yeah, please. So it's just that there are when you index, people start with zero.

331
00:37:56,710 --> 00:38:01,360
That's exactly right. So there is no if we know that I'm here.

332
00:38:02,550 --> 00:38:07,800
There is no position zero. The first position is position one for any object.

333
00:38:07,980 --> 00:38:15,180
Yup, exactly right. And we notice that the name of the object does not count as the first position.

334
00:38:15,750 --> 00:38:21,020
So the name is kind of like. Metadata that sits on top of the object.

335
00:38:21,290 --> 00:38:26,690
It's not like in Excel where the first row of the table is all of the variable names.

336
00:38:28,130 --> 00:38:31,250
The the positions only start with the actual values.

337
00:38:31,610 --> 00:38:35,790
It's a great question. I think that's what's on your mind.

338
00:38:36,010 --> 00:38:42,210
If you're curious about. Feel free to play around in this code too, like you can make adjustments to it.

339
00:38:42,390 --> 00:38:48,220
If you got curious and you want to see what happens if you change this to one for four, you know, you can just like.

340
00:38:49,090 --> 00:39:00,260
This is your call. You can keep playing with it. I can only get personally so excited about vex ers.

341
00:39:00,260 --> 00:39:08,270
I feel like I get most pumped up when we get to data frames because they feel more similar to my epidemiologic analysis.

342
00:39:08,750 --> 00:39:12,920
So what we're going to do next is make our first data frame.

343
00:39:14,130 --> 00:39:19,890
All right. And so how are we going to do this? We're going to use a function called DataFrame.

344
00:39:21,160 --> 00:39:24,370
And we're going to stitch together a series of factors.

345
00:39:25,910 --> 00:39:28,940
So we're going to stitch all those vectors in into a dataframe.

346
00:39:29,210 --> 00:39:32,630
Does anyone have a hypothesis based on what we've talked about before?

347
00:39:32,840 --> 00:39:38,300
Do you think that each of these vectors are going to be a row, or do you think that each of these factors are going to be in the columns?

348
00:39:38,330 --> 00:39:41,380
How do you think our is going to do it? Yeah.

349
00:39:41,740 --> 00:39:46,330
I'm guessing the names of these. The values will be the rule.

350
00:39:46,840 --> 00:39:49,510
Yeah, that's my hypothesis too. Let's see what's going to happen.

351
00:39:49,750 --> 00:39:56,560
So we're saying generate this dataframe and then assignment as a new object you're calling upper class.

352
00:39:56,920 --> 00:40:04,209
So I'm expecting a new object to pop up over here in our global environment so it'll be active and ready for use called Appel Farm.

353
00:40:04,210 --> 00:40:12,050
So let's see what we got. Well, we got a new object up here called Appel Farm.

354
00:40:13,240 --> 00:40:16,600
We see it are puts it in a separate category. All right.

355
00:40:16,600 --> 00:40:19,810
So all the values these are all of our vectors are somewhere separate.

356
00:40:20,080 --> 00:40:25,270
And then our data frames are in a separate category up here. And our gives us both coordinates.

357
00:40:26,050 --> 00:40:32,950
So it gives us the number of observations or the number of rows, and it gives us the number of variables or the number of columns.

358
00:40:34,330 --> 00:40:40,240
Something nice about our studio. Any time you see those blue arrow, you can click on it.

359
00:40:43,680 --> 00:40:49,020
And it'll give you a little bit more information. And if you double click it, it'll pop up.

360
00:40:49,320 --> 00:40:53,020
So here, when I clicked at once, I got more information here.

361
00:40:53,280 --> 00:40:57,630
But if I click that twice, it pops it up over here as well.

362
00:40:57,690 --> 00:41:02,010
It's kind of like an Excel spreadsheet. Or I could see that whole dataset.

363
00:41:02,370 --> 00:41:06,600
So you can see that there's a column for a number of apples, just like you hypothesize.

364
00:41:06,840 --> 00:41:11,850
And it's got four values in. It's calling for the short names that have column for the longer names.

365
00:41:12,810 --> 00:41:19,480
So I was keeping all of those. This like common variable type.

366
00:41:19,500 --> 00:41:25,170
All that information is is together. So we've got a column with all the numbers and a column with all the characters.

367
00:41:26,940 --> 00:41:34,150
I'm going to do this and go back to our. Go back to our mark down.

368
00:41:34,160 --> 00:41:41,049
So if we want to see this in here, I'm just typing the name Apple Farms and then we can see it in our output.

369
00:41:41,050 --> 00:41:44,890
So that's the same information it's telling us. Okay, here's a numeric column.

370
00:41:45,550 --> 00:41:50,260
Double if for some reason as a name for numeric, here's the character.

371
00:41:50,260 --> 00:41:54,459
This variable called Short Means is a character variable. Here's the values of fruit farms.

372
00:41:54,460 --> 00:42:01,510
It's another character variable. So you've got multiple ways of like double checking to see that that dataframe got made the way you wanted it to.

373
00:42:06,120 --> 00:42:07,889
We can get information about this.

374
00:42:07,890 --> 00:42:16,130
So just like we could perform the structure function on the vectors, we can format perform the structure function on the apple farms.

375
00:42:23,760 --> 00:42:30,180
Okay. So when I do the structure on it, we can see this is a more complex object type, so we get more complex information about it.

376
00:42:30,480 --> 00:42:33,900
So it's this apple farms object that we just made is a data frame.

377
00:42:34,710 --> 00:42:41,180
It's giving us a dimension and our will always give you the rows first and the columns second.

378
00:42:41,790 --> 00:42:45,630
So it's saying we have four rows and three columns.

379
00:42:46,500 --> 00:42:49,920
The first column is number of apples that is numeric.

380
00:42:50,490 --> 00:42:54,980
The second column is short names and it's character. And the third time is fruit halves.

381
00:42:54,990 --> 00:42:59,620
And that one's character. The dollar sign.

382
00:42:59,620 --> 00:43:04,870
How did I know that? Was talking about columns with objects, with data frames.

383
00:43:05,050 --> 00:43:08,680
The dollar sign is used to call up the columns by name.

384
00:43:09,310 --> 00:43:12,580
We could do it with the square brackets and do it by position.

385
00:43:13,840 --> 00:43:18,220
Personally, I have trouble remembering which columns and position one.

386
00:43:18,430 --> 00:43:24,280
What's in position to this is hard for me to remember. Sometimes it's easier for me to remember the columns by name.

387
00:43:24,670 --> 00:43:34,240
So here I can use the notation out dataframe dollar sign, column name and that'll show us what's the contents of that column?

388
00:43:37,120 --> 00:43:44,860
The notation of data from the side column will give us just that column context.

389
00:43:45,610 --> 00:43:55,150
Same thing. I can pull up another column. So this dollar sign is one of these helpful symbols or helpful operators that has a special meaning in our.

390
00:43:55,390 --> 00:44:01,600
And in this case, the meaning is saying, look around in that data frame and tell me, what is this column?

391
00:44:01,630 --> 00:44:09,010
What's the contents of this column? So in the future, if we want to perform a function, just a single column.

392
00:44:09,010 --> 00:44:17,110
So if we want to know what's the average age of all of our participants, we might provide our dataframe dollar sign age variable.

393
00:44:17,470 --> 00:44:22,870
So that's a way we can do functions just on a portion of the dataset, not on the whole thing.

394
00:44:32,810 --> 00:44:39,830
Just like we could look at the positions or index of ground within a vector, we can do the same thing.

395
00:44:41,110 --> 00:44:44,860
And a dataframe. But now we have two dimensions of data.

396
00:44:46,470 --> 00:44:51,510
So we have to give the rose and the columns. So here I'm saying with the square brackets,

397
00:44:51,510 --> 00:45:00,450
I'm saying look around in this apple farms dataframe and give me what is the value and position in row three and column one.

398
00:45:02,760 --> 00:45:08,620
You see what's in there? Here.

399
00:45:08,620 --> 00:45:13,660
I'm saying what's in row four? I'm not specifying any columns.

400
00:45:13,960 --> 00:45:18,760
So by default, it's going to give me every column. So here I'm going to see what's everything in row four.

401
00:45:22,660 --> 00:45:26,469
And see out here. Here's the everything in row four. Does anybody have a guess?

402
00:45:26,470 --> 00:45:30,070
What about this next line of code? What do you think's happening here at the square brackets?

403
00:45:30,430 --> 00:45:34,840
How no one. What combination of rows and columns do you think we're going to see there?

404
00:45:45,910 --> 00:45:50,290
You may have a guess. What do you think is happening here in this line of scrimmage?

405
00:45:50,560 --> 00:45:55,760
Yeah. You're a shot. Yeah.

406
00:45:55,790 --> 00:45:59,540
Because number of apples is in column one. Exactly. So that's the thing.

407
00:45:59,960 --> 00:46:04,860
Tell me what's in the Apple firm's object? What's in column one?

408
00:46:05,150 --> 00:46:09,170
Because we know it's talking about columns. Anything after the column is columns.

409
00:46:09,500 --> 00:46:13,070
And because it didn't say anything about the rows, the default is to give it everything.

410
00:46:13,340 --> 00:46:16,730
So this is going to give us all the values from column one, which is the number of apples.

411
00:46:17,060 --> 00:46:31,580
Excellent job. Okay.

412
00:46:31,610 --> 00:46:40,580
And then we could start to this might get a little like next level complex, but we'll continue practicing this throughout the class.

413
00:46:41,630 --> 00:46:50,840
If we have a combination of multiple functions or multiple objects, or in this case, a function and an object.

414
00:46:51,410 --> 00:46:56,390
So we have a series of parentheses types. How those are going to take what you want to do first?

415
00:46:56,960 --> 00:47:01,220
Well, are always going to start from the inside and then work its way up.

416
00:47:02,000 --> 00:47:08,840
So in this case, it's saying start from the inside, perform a C function where we're combining the numbers one, two or three.

417
00:47:10,010 --> 00:47:11,470
And then do the outside.

418
00:47:11,480 --> 00:47:20,660
So then say, tell me what's in the apple firm's object in rows one, two and three all columns, because it's anchored on this comma right here.

419
00:47:20,660 --> 00:47:28,020
And we don't have any columns presented. So I'm expecting to see all columns of rows.

420
00:47:28,020 --> 00:47:31,809
One, two and three. We'll continue practicing that.

421
00:47:31,810 --> 00:47:39,040
But whenever you see there's multiple parentheses or multiple square brackets are will always do the inner 1/1 and then the outer one.

422
00:47:39,040 --> 00:47:42,370
And if you ever want to practice it, sometimes I'll even.

423
00:47:43,990 --> 00:47:49,060
Take the infamous one and I'll run that and put it on its own line.

424
00:47:50,810 --> 00:47:58,640
And make sure I understand what's the innermost one doing before I run the outer one and try to break that down for myself in a piece?

425
00:48:00,660 --> 00:48:06,270
Similarly, that's an opportunity we can use logical operators to say, Do I want to see role one, say 12?

426
00:48:06,270 --> 00:48:10,830
I don't want one. Do I want Rotunno true. I want roe to do I want roe three.

427
00:48:11,010 --> 00:48:20,430
True and false. No, I don't want Roe four. So you can also use some of these logical operators to help select things.

428
00:48:20,670 --> 00:48:26,790
This will come up as we you try to see which participants meet certain criteria.

429
00:48:26,790 --> 00:48:35,519
So if we try to set which participants had more than a high school education, we'll end up with a series of choose and false.

430
00:48:35,520 --> 00:48:38,640
And then we can pick the participants for which that criteria is true.

431
00:48:40,740 --> 00:48:47,250
We can select based on value in this way and in this case, where we're selecting in this case,

432
00:48:47,250 --> 00:48:53,760
we're to find all the places where the number of apples that are produced is greater than two.

433
00:48:54,090 --> 00:49:00,450
And that is saying, show me those rows where that is true. So we see, okay, here's the two farms that make more than two types of apples.

434
00:49:13,450 --> 00:49:17,560
Sometimes it'll come up. You'll find out that there is an error in the data that we need to make a record.

435
00:49:19,330 --> 00:49:23,899
We don't just want to like. Go in the dataset and make a change.

436
00:49:23,900 --> 00:49:28,520
We want to have that documented in the code and there was a change that had to be made.

437
00:49:29,090 --> 00:49:31,940
And we want to know why. Right. So that we have a.

438
00:49:33,690 --> 00:49:40,200
History of the data that we have archive that we understand those choices and we can communicate that with an outside audience.

439
00:49:41,820 --> 00:49:46,760
So in this case, in this example, I'm going to recode a value in this dataset.

440
00:49:46,770 --> 00:49:50,040
I'm going to use that based on position. All right. So how do we do this?

441
00:49:50,340 --> 00:49:55,570
Let's look at the apple farms data set. Which value do I want to recall?

442
00:49:55,750 --> 00:49:59,620
We found out that there an error. In this position.

443
00:49:59,630 --> 00:50:03,490
So which position? What's this? Three comma one. Can anybody help me out?

444
00:50:03,490 --> 00:50:07,250
What combination of rows and columns is three comma one.

445
00:50:07,270 --> 00:50:10,480
Talking about this row and.

446
00:50:10,900 --> 00:50:14,920
Yeah, fantastic. So row three, column one.

447
00:50:15,100 --> 00:50:20,620
So number of apples here. So we found out there's an error the Watson farm does not have.

448
00:50:20,620 --> 00:50:25,660
Three apples are supposed to have five apples. So this is saying we're going to take the value of five.

449
00:50:27,000 --> 00:50:31,170
And I find it so the apple farms object, but not everywhere.

450
00:50:31,650 --> 00:50:36,570
We want to take them out of your files and assign it to the apple firms. Object just and row three.

451
00:50:36,570 --> 00:50:39,830
Column one. So what do I expect?

452
00:50:40,070 --> 00:50:48,710
I expect this three to get replaced with a five. We'll see if that happens, Brianna.

453
00:50:49,120 --> 00:50:54,280
And we run it again. So we'll see if our expectations match the reality.

454
00:50:54,550 --> 00:51:02,320
We can see we've got a five recoded in there. So then you have a record that there's been a change in the data set when it happened, why it happened.

455
00:51:03,670 --> 00:51:17,290
And you can document that for all of your collaborators. All right.

456
00:51:17,300 --> 00:51:20,660
I'm going to transition from objects and get further into functions.

457
00:51:21,380 --> 00:51:25,700
I just want to pause and see other comments, ideas, questions happening right now.

458
00:51:35,200 --> 00:51:43,360
Campus. How does this change when you have events with a lot of different observations, variables?

459
00:51:44,440 --> 00:51:51,010
Yeah, the question was, how does this change when we have a large dataset with a lot of observations, a lot of variables.

460
00:51:51,020 --> 00:52:02,030
So. Here. I have a 20 data set and only three columns and for growth in the second half of classified.

461
00:52:02,040 --> 00:52:11,100
We're going to read an enhanced dataset which is going to have, I think 25 columns, but about 5000 rows.

462
00:52:11,370 --> 00:52:21,719
So pretty quickly, we will scale up in general, all of these principles remain that these ideas of indexing remain just in that case,

463
00:52:21,720 --> 00:52:26,760
and more commonly use the dollar sign to index or out in a dataset.

464
00:52:26,760 --> 00:52:34,890
Because it's easier for me to remember the names of the columns and to remember which variables in which number of columns.

465
00:52:35,670 --> 00:52:39,420
So all of the principles will remain in larger datasets,

466
00:52:39,470 --> 00:52:47,010
but I just might grab certain options preferentially because they become easier for me in that setting.

467
00:52:47,340 --> 00:52:51,239
R is also excellent for these kind of large datasets. We'll see.

468
00:52:51,240 --> 00:52:58,200
The computational speed is nice. The web browser interface of our studio cloud.

469
00:52:58,200 --> 00:53:02,219
I don't know if you know this. This has a little RAM indicator up here.

470
00:53:02,220 --> 00:53:09,000
I love watching it. Go to see which one of the functions are my using at any given time is using the most computational power.

471
00:53:09,660 --> 00:53:15,930
But I think we'll see that this is pretty efficient process and the calculations happen pretty instantaneously.

472
00:53:16,590 --> 00:53:20,390
Just great. All right.

473
00:53:22,860 --> 00:53:32,100
So one of the things we talked about within functions is that there are any number of options that we can specify.

474
00:53:32,400 --> 00:53:37,920
And as the word option implies, you don't have to. But if you want to, you can specify that.

475
00:53:39,510 --> 00:53:45,330
So we're going to work through a function called See as our kind of demo of playing with options.

476
00:53:46,200 --> 00:53:49,350
And I also want to show you something. So on the right hand side.

477
00:53:50,830 --> 00:53:56,890
We have mostly been playing with the files tab. My favorite tab over here is actually the Help viewer.

478
00:53:57,670 --> 00:54:01,450
So let's give it a click. Heart of the help viewer.

479
00:54:03,230 --> 00:54:06,460
Okay. So if you click over to help, let me see if I can make this a little bigger.

480
00:54:10,240 --> 00:54:17,440
And in this help viewer, there is a magnifying glass which gives you a search bar.

481
00:54:18,310 --> 00:54:23,560
And so I'm going to search for this function that we're going to play with. So I'm going to search for, I think you.

482
00:54:28,920 --> 00:54:33,900
Personally, I every time I use a new function, I look it up to just become familiar with it.

483
00:54:34,290 --> 00:54:40,640
And the. Format of all of these help pages are you're going to get used to them.

484
00:54:40,870 --> 00:54:46,640
They all follow the same format. The first couple times you look at them, you're like, What the heck is even happening here?

485
00:54:46,850 --> 00:54:50,930
But we'll practice breaking these stuff. So if you look at the seek function.

486
00:54:52,380 --> 00:54:57,090
First couple of things I'll say. Here's the name of the function in these curly brackets.

487
00:54:57,510 --> 00:55:03,720
It's telling you what package it came from. So if you're ever curious, like, where did this function come from?

488
00:55:04,020 --> 00:55:12,509
You can look it up. We can see it came from a package called base that is just base is one of these packages that our assumes you want.

489
00:55:12,510 --> 00:55:16,230
And so it loads it by default every time. So that's how we have some.

490
00:55:17,380 --> 00:55:22,890
Functions that we can work with at the start of class without even loading any packages.

491
00:55:23,680 --> 00:55:26,650
So if you are listening to function, gives us the package where it came from.

492
00:55:27,340 --> 00:55:32,280
It tells us in large font what it does broadly and then it gives us a description.

493
00:55:32,290 --> 00:55:38,070
So this is going to generate sequences of numbers. And then it's going to tell you.

494
00:55:39,870 --> 00:55:43,890
How it generally got. So it's for counting, essentially counting numbers.

495
00:55:44,860 --> 00:55:48,910
The default option is from the number one to the number one.

496
00:55:49,570 --> 00:55:53,080
So by default, it's not counting very many. It's just kind of 1 to 1.

497
00:55:53,920 --> 00:55:57,730
But what we'll be able to do is change some of these options.

498
00:55:58,720 --> 00:56:04,820
To tell it, to count to different numbers. So it wants that option from first.

499
00:56:04,820 --> 00:56:07,670
Thank you. And then we could tell it what it's counting by.

500
00:56:07,700 --> 00:56:12,620
So by default it's going to count by one, but we could count by two or three or whatever we want in the future.

501
00:56:13,010 --> 00:56:18,260
So over here on the stick, I'm telling you to start counting from the number ten.

502
00:56:19,410 --> 00:56:22,830
Cat 223 and cat by one.

503
00:56:23,520 --> 00:56:27,720
So I'm expecting it to go ten, 11, 12 all the way up to 23.

504
00:56:27,900 --> 00:56:35,770
Let's see how that goes. All right, we got it.

505
00:56:35,780 --> 00:56:39,290
We got it. Counting from ten, 11, 12, all the way up to 23.

506
00:56:41,610 --> 00:56:47,280
You notice here? Let's see, what do we think is going to happen? Now I'm just dropping this last option.

507
00:56:47,520 --> 00:56:52,080
Let's see what we got, which is we got the exact same thing.

508
00:56:52,850 --> 00:56:57,670
That's because this option I specified. Is equivalent to the default.

509
00:56:58,590 --> 00:57:04,920
So that's purely up to you if you want to put it in there. But ah, we'll know how to use the default if you don't say anything.

510
00:57:05,700 --> 00:57:09,660
So this is coding style preference. These are equivalent statements.

511
00:57:10,230 --> 00:57:13,440
It's completely up to you if you want to be a little bit more thorough.

512
00:57:13,470 --> 00:57:22,650
You can do this. Or if you want to reduce the number of things you have to type, you might want to go with the shorter one.

513
00:57:24,350 --> 00:57:30,490
Let's try the next one. With respect to the exact same thing.

514
00:57:30,510 --> 00:57:34,460
Chip So I'm leaving off the names of the options.

515
00:57:35,760 --> 00:57:44,340
So I'm no longer telling it from Intel. I'm just giving those two values, but I'm giving it to R in the order that it expects.

516
00:57:45,800 --> 00:57:52,129
So this is an even shorter form of coding, if you like, that says purely stylistic.

517
00:57:52,130 --> 00:57:59,090
Which one do you like? Personally, I kind of like this intermediate one because this helps me remember if I'm coming back to it,

518
00:57:59,480 --> 00:58:03,680
you know, a couple months later, I'll remember which options are which. You'll find what you like.

519
00:58:05,350 --> 00:58:11,200
But summarily we can tell it's a car from 10 to -3, so it'll start counting backwards.

520
00:58:12,810 --> 00:58:22,260
Or we can tell it to count by threes. You get the impression that we can start to use these options and provide different values too,

521
00:58:22,500 --> 00:58:27,390
so that one single function can be used for a whole bunch of different purposes.

522
00:58:29,380 --> 00:58:32,950
What do you think about this? Are these is the concept of these options?

523
00:58:34,780 --> 00:58:41,920
Is this. A little bit clear. So if you want to go with the default, you don't have to type it.

524
00:58:42,430 --> 00:58:54,140
But if you want to change the default, then that's where you can provide it. Sometimes we want to perform calculations on the difference.

525
00:58:54,320 --> 00:59:03,440
So here's a couple examples. This was your actual question of like when our dataset is huge, how do we do stuff on it?

526
00:59:04,160 --> 00:59:07,490
The common way that I will often do, I'll take a function.

527
00:59:08,700 --> 00:59:12,270
And perform at just an individual column of the data set.

528
00:59:12,570 --> 00:59:15,650
And the way in which I can specify that column is with the dollar sign.

529
00:59:16,640 --> 00:59:23,210
So this is saying calculate the sum of the Apple firm's data set, but not the whole thing.

530
00:59:23,660 --> 00:59:28,410
Just the column called Number of apples. So that sum up that whole crown.

531
00:59:28,700 --> 00:59:32,210
So how many types of apples are we growing in southeastern Michigan?

532
00:59:32,450 --> 00:59:35,870
We're going to. Can anybody interpret for me?

533
00:59:35,870 --> 00:59:41,839
What do you think? This line of code here, that is 309 on my screen, but it might be a different number of years.

534
00:59:41,840 --> 00:59:47,960
What what's happening here in this line of code? Can anyone talk me through the calculation that R is going to perform here?

535
00:59:57,230 --> 01:00:03,050
What functionary performing and what object or portion of an object are we performing it on?

536
01:00:05,800 --> 01:00:10,840
Yeah. Give it a shot. The mean number. Excellent.

537
01:00:10,970 --> 01:00:18,050
Yes, we're performing the main function and we know the function is mean because it's the word that's right in front of around in parentheses.

538
01:00:18,440 --> 01:00:23,780
So it's going to calculate the average. And what is it performing on the Apple Farms object?

539
01:00:23,780 --> 01:00:27,080
But not the whole thing. Just the column called Number of Apples.

540
01:00:29,210 --> 01:00:33,380
So here's going to calculate the average number of apples across all the farms.

541
01:00:34,040 --> 01:00:38,480
So we got three there. And if you're ever curious about one of these, what one of these functions do?

542
01:00:38,750 --> 01:00:46,910
So like me and we can look it up and the help viewer, check it out and see how it how it works.

543
01:00:47,550 --> 01:00:57,990
Okay. So when I encourage you to whenever you're working with a new function, if you have any curiosity about it, check it out and read through this.

544
01:01:01,900 --> 01:01:11,530
So far we've been using this traditional method of coding where we're performing a function on an object that's within those rabbit parentheses.

545
01:01:12,370 --> 01:01:20,120
There's also a style of coding. What types? So this is commonly used in a style of coding called the tidy verse.

546
01:01:21,490 --> 01:01:30,520
So to make this available to us, to activate the ability to use this pipe, we have to load the diverse library.

547
01:01:30,880 --> 01:01:34,540
So here I'm going to activate the tiny burst library.

548
01:01:36,950 --> 01:01:41,630
Right. That's going to take a minute. That is a massive package. Okay.

549
01:01:41,760 --> 01:01:50,160
And what we're doing here on this is going to perform the same calculations, but the style coding is a little different.

550
01:01:50,370 --> 01:01:51,140
So now it said,

551
01:01:51,150 --> 01:02:00,690
take the object number of apples and pipe it into the thumb function so you notice there's no object specified within the sum function.

552
01:02:00,900 --> 01:02:03,480
That's because we're piping that object into the function.

553
01:02:04,380 --> 01:02:10,950
So you can put the object outside of the function, so you can put our cursor anywhere near here and control enter.

554
01:02:11,280 --> 01:02:15,180
And we notice that we'll run both lines of code together and knows they go together.

555
01:02:15,840 --> 01:02:19,080
So we get the same value. We get the value from before.

556
01:02:20,230 --> 01:02:29,680
In this case. We got also the. Most appealing thing for a lot of people with the pipes is that we can string together multiple functions.

557
01:02:29,680 --> 01:02:34,140
So we can say, take the number of Apple's object, pipe it into the mean function,

558
01:02:34,150 --> 01:02:40,030
then pipe that into the life function so you can generate these kind of streams of information.

559
01:02:42,380 --> 01:02:43,810
You can get multiple values there.

560
01:02:46,510 --> 01:02:53,410
The other thing we can do is we can take we can take the number of apples function, type it into the median function.

561
01:02:53,620 --> 01:03:01,330
And we don't just want to look at the output in the console or in our markdown box.

562
01:03:01,600 --> 01:03:05,200
Maybe we want to store that information as a new object that we can play with.

563
01:03:05,470 --> 01:03:13,170
So here I'm saying take the number of Apple objects, type in the median function and save it or generate a new object.

564
01:03:13,180 --> 01:03:18,310
I'm calling median apples, so I expect a new object to pop up in my environment.

565
01:03:21,990 --> 01:03:29,060
And show it up here. You can either just look at the output or you can assign it as an object.

566
01:03:31,820 --> 01:03:36,080
The hashtag is our way of taking notes in art.

567
01:03:37,070 --> 01:03:41,300
And so our comments or our notes to ourselves are going to follow the hashtag.

568
01:03:41,630 --> 01:03:47,000
And anything from the hashtag to the right of the line will be ignored by our even if you're lying.

569
01:03:47,420 --> 01:03:50,990
You can see here like ran out of space and went on to the next line.

570
01:03:51,650 --> 01:03:54,920
So our color of code will change when we use the hashtag symbol.

571
01:03:56,240 --> 01:04:02,750
You can use those many hashtags if you want. You don't need to put a hashtag at the end of the line to close it.

572
01:04:03,350 --> 01:04:07,420
Just when you click Enter or return and start a fresh line at all,

573
01:04:07,940 --> 01:04:14,919
and that you also can have code to the left and a hashtag to the right, and you can see these are in different colors.

574
01:04:14,920 --> 01:04:18,110
So our will run this code and then stop when it sees the hashtag.

575
01:04:18,560 --> 01:04:26,720
So it's very flexible how to code. And I would just encourage you throughout your whole career as a programmer.

576
01:04:28,000 --> 01:04:35,590
Take a ton of notes. So somebody who's experienced this countless times, when you go back to or when I go back to my coat a month later sometimes.

577
01:04:35,810 --> 01:04:42,490
What was I thinking? I try to always say why I'm doing something, because otherwise I might just be like,

578
01:04:42,850 --> 01:04:47,500
Something is happening here, but I don't understand how it's working or what's happening here.

579
01:04:47,680 --> 01:04:56,000
So I would encourage you to. Kind of lean towards the angle of providing more notes than you think you need to,

580
01:04:56,010 --> 01:04:59,990
rather than being kind of stingy in the notes that you provide there.

581
01:05:01,290 --> 01:05:04,409
Okay. You may have noticed.

582
01:05:04,410 --> 01:05:14,670
I prefer to use a lot of white space in between lines of code, or I use spaces in between values.

583
01:05:14,910 --> 01:05:18,270
That's completely optional and stylistic. You don't have to do that.

584
01:05:19,020 --> 01:05:25,980
I just find it easier to see. So this line of code of two plus two is the exact same as if I take all these spaces out.

585
01:05:29,670 --> 01:05:37,190
Okay. So R is going to ignore all of your spaces. So it will see things uniformly no matter how many spaces you put in there.

586
01:05:38,330 --> 01:05:42,080
So this is kind of you start to develop your own personal style.

587
01:05:42,710 --> 01:05:46,250
So personally, I like to put spaces after the commas.

588
01:05:46,250 --> 01:05:49,250
It helps me break it up so you don't not have to.

589
01:05:50,060 --> 01:05:54,260
And you can see what you like there. You can also.

590
01:05:55,730 --> 01:06:00,660
Within a function or within a pipe, you can put things on a new lines.

591
01:06:01,600 --> 01:06:11,140
Sometimes this helps me visualize things because then I could see that all of this is within the same combine or the same C function.

592
01:06:12,220 --> 01:06:17,410
But I put them on several lines because then I can double check that each element ends with a comma.

593
01:06:17,410 --> 01:06:21,220
I didn't forget a comma. It just helps me see things kind of line up.

594
01:06:21,430 --> 01:06:28,180
So these are all optional things that you can do if you like, or or if you put them all in one line like that.

595
01:06:29,110 --> 01:06:32,320
These are these two are equivalent statements.

596
01:06:32,630 --> 01:06:38,590
Ah. Ignores all of this. Okay.

597
01:06:38,740 --> 01:06:42,320
I want to again emphasize using the help viewer all the time.

598
01:06:42,440 --> 01:06:48,020
So any time we use any function, let's look it up. So here you can either type the name of the function.

599
01:06:49,490 --> 01:06:54,380
With the magnifying glass, or you can run the help function on a name of a function.

600
01:06:54,710 --> 01:07:00,890
So here I'm saying. I look up the function called class in the future.

601
01:07:01,660 --> 01:07:04,960
So you see that class is a function in the base package.

602
01:07:05,970 --> 01:07:09,340
On it's function for determining what's the class of an object.

603
01:07:10,380 --> 01:07:15,950
It gives you a little bit of a description here. It tells you how you can use it.

604
01:07:15,960 --> 01:07:22,140
What's a typical use? It tells you, here are the arguments or the options you can provide.

605
01:07:23,070 --> 01:07:32,670
And then there's a whole bunch of details in here about more information that all of your help, your things are going to follow the same structure.

606
01:07:33,540 --> 01:07:34,680
I'll give you some notes.

607
01:07:35,250 --> 01:07:42,210
It'll tell you some other functions that kind of like, well, if you like this function, you might also be interested in this function.

608
01:07:42,870 --> 01:07:48,960
So it'll provide you some additional ideas you might like. And one of my favorite things is it always gives you examples.

609
01:07:50,200 --> 01:07:57,040
So if you're ever curious and these are self-contained examples, so you don't need any extra resources anywhere else to run them.

610
01:07:57,760 --> 01:07:59,829
So if I'm running into trouble with a function,

611
01:07:59,830 --> 01:08:05,620
I'll always come down with the examples and make sure I can run their examples before I try to run my specific one.

612
01:08:08,430 --> 01:08:16,680
Lastly, down at the bottom, it tells you what version of the package you're running right now because these packages get updated all the time.

613
01:08:17,340 --> 01:08:21,640
And so this is a way of letting me know. Which version I'm running at this time.

614
01:08:23,380 --> 01:08:31,360
All right, let's test our comprehension. Okay. So I want you to make a new chunk.

615
01:08:32,360 --> 01:08:39,620
And see if you can create a numeric vector that's going to repeat the number seven in the first four positions.

616
01:08:40,610 --> 01:08:45,110
One option to do this, you can use the wrap function or there's several other ways we've seen so far.

617
01:08:45,110 --> 01:08:50,540
You can do it. So make it a new coach to look up the rep function in the help viewer.

618
01:08:51,620 --> 01:08:59,600
See if you can find the option for the number of times it's repeated and try to create a vector and assign it as a new object.

619
01:08:59,900 --> 01:09:04,970
So this is going to take a minute, right. And help each other out. Ah is not an individual sport.

620
01:09:06,050 --> 01:09:10,370
So, so I'll give you a couple of minutes here and now when we wrap this up, we'll take we'll take a break.

621
01:09:10,370 --> 01:09:16,010
So let's do this activity, see if you can work through making this object that's specified here.

622
01:09:18,340 --> 01:09:44,280
Oh. Yeah.

623
01:09:45,290 --> 01:09:59,880
Yeah. I think it's important for people.

624
01:10:23,070 --> 01:10:59,170
Oh. They really help me get started.

625
01:10:59,220 --> 01:11:02,670
How are you going to make it now? Our coach, Chuck. What's our first thought?

626
01:11:02,700 --> 01:11:07,950
How do we have some space to code in our work and then as coaches come from?

627
01:11:11,040 --> 01:11:16,349
Yeah. Three back text.

628
01:11:16,350 --> 01:11:22,620
Yeah. And then the bigger.

629
01:11:25,110 --> 01:11:31,080
Yeah. Curly bracket rinse and then we close it out with three back six.

630
01:11:32,300 --> 01:11:38,840
Actually we can do this by typing with three back tax brackets for our three backpacks to club.

631
01:11:39,110 --> 01:11:42,620
Does anybody have another? Do you have another idea? Yes. John Button.

632
01:11:46,010 --> 01:11:51,260
Fantastic. There's also a button we can use to create a new coach on the C, the green C plus appear.

633
01:11:54,200 --> 01:11:57,560
All right, so these are equivalent ways we can create a new project.

634
01:11:57,890 --> 01:12:01,730
Whichever way works for you. Okay, so you've got a code chunk to work in.

635
01:12:02,930 --> 01:12:09,830
What's the next step somebody is going to do in here? And again, it's excellent when we take different approaches to a problem.

636
01:12:10,110 --> 01:12:13,520
So exactly what you're suggesting.

637
01:12:14,120 --> 01:12:19,640
Yeah. Anyway, where do you go next with a challenging problem like this?

638
01:12:22,950 --> 01:12:29,400
Yeah. So I just first went and saw one of the guys.

639
01:12:29,610 --> 01:12:33,350
Nice. Excellent. All right, so what do we see here?

640
01:12:33,360 --> 01:12:37,020
We see rap as a function for replicating elements in a vector.

641
01:12:37,860 --> 01:12:42,210
And what do you see here? Do you see that? It's for repeating some value.

642
01:12:42,750 --> 01:12:45,830
And one of the options is how many times you want to repeat it?

643
01:12:47,030 --> 01:12:50,360
All right. And we've got you said you looked at some examples.

644
01:12:51,530 --> 01:12:54,680
The bar at the bottom. That's a great idea.

645
01:12:55,220 --> 01:13:06,380
Yeah. So we see that there are some examples down at the bottom where you're there saying repeat the values one through four each two times.

646
01:13:07,190 --> 01:13:10,880
So we've got some options here. What do you think? So how should we try coding here?

647
01:13:10,910 --> 01:13:17,180
So what do we want? What value do we want to repeat? I want to repeat the value seven.

648
01:13:18,080 --> 01:13:22,190
And then how many times do we want to repeat it? Four times.

649
01:13:22,200 --> 01:13:25,200
Four times equals four.

650
01:13:26,540 --> 01:13:36,830
Let's see what we got. All right. So the wrap function, I'm repeating the value seven, four times and we get a vector of.

651
01:13:37,720 --> 01:13:42,220
Four positions with the value seven in every position. Did anybody come up with another way to do this?

652
01:13:44,340 --> 01:13:50,550
We can also use the C function. We could use c seven, seven, seven, seven.

653
01:13:51,510 --> 01:13:56,660
I guess the exact same thing. Any other ideas? Yeah.

654
01:13:57,230 --> 01:14:00,490
I see. So. Oh.

655
01:14:00,500 --> 01:14:09,620
What do you get when you do that? I'm not sure. When you did the rap function at Rex Rice, what do we have in common for?

656
01:14:10,160 --> 01:14:11,120
We have the exact same thing.

657
01:14:11,360 --> 01:14:17,780
So we noticed that you don't have to tell us the name of the action as long as you put it in the order that it's expecting.

658
01:14:20,420 --> 01:14:28,520
Any other ideas that folks came across? What about how do we now?

659
01:14:28,550 --> 01:14:33,110
So so far we've been generating output down here. How do we assign this an object?

660
01:14:37,350 --> 01:14:43,350
Yeah. The name. I'm going to be perfect this time.

661
01:14:43,620 --> 01:14:50,490
What do we want to name? What kind of name do you come up with? Something.

662
01:14:50,670 --> 01:14:55,410
Anything good? Am I named after my cat?

663
01:14:55,740 --> 01:15:00,569
I call it pajamas. And then I'll get at the assignment.

664
01:15:00,570 --> 01:15:06,300
Operator. I'm expecting a new object to show up in the environment.

665
01:15:07,980 --> 01:15:11,370
That's going to be called pajamas, and it's going to have a seven and repeat appointment.

666
01:15:13,290 --> 01:15:19,889
All right. We got it up here and it's in our object. So do you see, I kind of like build that up step by step.

667
01:15:19,890 --> 01:15:28,860
So I don't, like, try to make the object first. I try to make sure I get the function running before before I so try to break it down step by step

668
01:15:28,860 --> 01:15:33,840
with that is a helpful technique for you or if you have other approaches you like to do to try that.

669
01:15:35,190 --> 01:15:42,399
Also I list a couple common new user frustrations here and just want to continually mention this logic

670
01:15:42,400 --> 01:15:49,209
checking that we can do here and I want to make a plug to save your script so your code up here,

671
01:15:49,210 --> 01:15:53,290
any time that's red with an asterisk, you have unsaved information.

672
01:15:54,160 --> 01:15:59,210
So what's the way we can save the script? Like an idea.

673
01:16:00,230 --> 01:16:08,930
Yeah. Yeah. We can click on this or we can use the keystroke command F or control X machine.

674
01:16:09,560 --> 01:16:16,879
So if we click on that floppy disk now we see that the font has changed to black and we have left the office and we also see

675
01:16:16,880 --> 01:16:27,020
in our files tab in the lower right that now this file we're working on right here was just updated at this very minute.

676
01:16:27,450 --> 01:16:32,840
Okay. When you're ready and you want to render it, we can click the render button.

677
01:16:33,940 --> 01:16:36,940
And now our is going to essentially work on a separate planet.

678
01:16:36,970 --> 01:16:40,360
It's going to ignore anything in our environment and it's going to run.

679
01:16:41,680 --> 01:16:49,690
Oh. I have a cup of brother, so it will run that entire code and we can double check everything working.

680
01:16:49,960 --> 01:16:59,130
And now we have this. Nice. Markdown document that contains both our code and our output rate below.

681
01:16:59,430 --> 01:17:06,390
So this is very good for record keeping. We if we have any values, we know that this is the code that was used to generate it.

682
01:17:06,600 --> 01:17:10,440
So we're having nice fidelity of all of our research projects.

683
01:17:10,620 --> 01:17:14,820
Any numbers that you're sharing with your colleagues, you know exactly where they came from.

684
01:17:15,090 --> 01:17:21,419
What? Right. So that is the wrap up there.

685
01:17:21,420 --> 01:17:28,130
And this was the review of all the activities we did there. The anybody this doesn't this should say render part of me.

686
01:17:28,140 --> 01:17:41,600
This is based on a. About a month before our class started our changed everything from our markdown to corto marked down and it's very subtle

687
01:17:41,840 --> 01:17:47,930
differences but enough of these little nit picking changes that I apologize if those of you I've missed along the way,

688
01:17:48,110 --> 01:17:53,420
but it's the render button and now not the button that we use to bring all this together.

689
01:17:55,060 --> 01:18:03,280
Any final questions about the introduction section before we go to break and then we'll transition to our data management section.

690
01:18:07,590 --> 01:18:12,390
All right. Well, let's take a five minute break and then when we come back, we'll do some slides for data management.

691
01:18:19,910 --> 01:18:48,200
I'm. Oh, yeah, I didn't know that.

692
01:18:50,080 --> 01:18:55,100
Oh, yeah. Yeah, that's what I'm.

693
01:19:00,630 --> 01:19:04,500
Oh, I see.

694
01:19:05,350 --> 01:19:09,810
Right. Yes, yes.

695
01:19:11,040 --> 01:19:18,470
Yes, yes, yes.

696
01:19:22,850 --> 01:19:57,960
Yes. Like.

697
01:20:22,440 --> 01:20:49,500
Yeah. So what do you want to do with us year?

698
01:20:50,840 --> 01:20:59,720
Well, maybe you can.

699
01:21:02,420 --> 01:21:14,920
Well. I think it's true.

700
01:21:16,760 --> 01:21:32,460
And that's not. So.

701
01:21:39,460 --> 01:21:51,850
That's supposed to.

702
01:21:56,550 --> 01:22:09,520
Just laid out the.

703
01:22:29,450 --> 01:22:39,200
Yeah. They have no.

704
01:22:45,470 --> 01:23:11,210
You know about Grandmother's? So let me help you out on that, because it is the opposite.

705
01:23:18,560 --> 01:23:38,980
It's like if I was a nice kid and I get inspired and I go to college, so therefore this is something that is.

706
01:23:47,680 --> 01:23:51,130
But I.

707
01:23:56,390 --> 01:24:06,940
I'd say about six months.

708
01:24:10,660 --> 01:24:18,010
That's right. All right.

709
01:24:18,010 --> 01:24:27,100
Let's jump back into the lecture. So now we're going to transition away from this kind of made up data science about apples that I made when I

710
01:24:27,100 --> 01:24:33,850
was inspired by our fall time for the farmers market now to transition to working with actual health data.

711
01:24:34,150 --> 01:24:42,850
Okay, so we're going to learn how to apply functions to how to read datasets into our and to be able to write datasets for use out of our because

712
01:24:42,850 --> 01:24:48,730
we don't just want to bring some in are we also want to be able to bring it back out so we can share it with folks because in reality,

713
01:24:48,770 --> 01:24:52,690
in public health space, we're really working with some of our collaborators. They're not familiar with our.

714
01:24:52,870 --> 01:24:57,430
So we might need to export the data to Excel or some other format that's going to be more useful for them.

715
01:24:57,820 --> 01:25:00,910
So now we're going to talk about how to bring things in and take things out.

716
01:25:04,410 --> 01:25:05,370
All right. So some of these terms.

717
01:25:05,370 --> 01:25:13,240
So how do we bring data in and out of our there's a family of functions around reading that are going to bring the data in from an external source.

718
01:25:13,620 --> 01:25:20,640
There's other ways you might see this described in some of the our resource documentation.

719
01:25:21,240 --> 01:25:28,979
So some other terms for this might be importing data or loading data, but essentially that verb is when we read load,

720
01:25:28,980 --> 01:25:34,080
import, whatever to bring data in and then writing will be how we take data out.

721
01:25:34,320 --> 01:25:37,860
That could also be called exporting data or saving data.

722
01:25:38,070 --> 01:25:44,520
Okay. So we've got just like our vocabulary of our is vast.

723
01:25:44,520 --> 01:25:56,790
There's a lot of similar ways to talk about it. So essentially when we bring data in to are we want to identify the type of data we've got.

724
01:25:57,720 --> 01:26:01,140
And usually I do this from the extension at the end of the file.

725
01:26:01,950 --> 01:26:06,420
So everything after the dot tells me the file type there.

726
01:26:06,780 --> 01:26:11,220
And it also tells me the likely program that probably made that data.

727
01:26:12,180 --> 01:26:17,670
Okay. So that's step one. And reading data into our is to figure out what type of data this.

728
01:26:20,350 --> 01:26:23,860
Step two is to find a function that's written to handle that data.

729
01:26:24,700 --> 01:26:28,570
So we've got different functions for different types of data types.

730
01:26:29,350 --> 01:26:32,920
So if the. For Alex Sanchez TSB be.

731
01:26:33,900 --> 01:26:38,890
We have got a function called read underscore to read that comes from the read our package.

732
01:26:39,850 --> 01:26:44,300
If we want to do a CSP, we can use the read underscore CSP from the read our package.

733
01:26:44,950 --> 01:26:48,220
There's a read Excel package that helps us with Excel files,

734
01:26:49,000 --> 01:26:57,880
and Haven is written by some epidemiologists to help us with staff and SPSS and data files that are common in other epidemiologic disciplines.

735
01:26:58,390 --> 01:27:01,510
And these are not the only functions to do this process.

736
01:27:02,050 --> 01:27:06,960
There are other packages and other options out there, but this is just one option.

737
01:27:06,970 --> 01:27:11,110
Okay. So first, figure out what. Object type it is.

738
01:27:11,880 --> 01:27:23,600
Second, find a function that matches. So for example, if we want to bring in a data file, we want to match the function to the data file type.

739
01:27:23,930 --> 01:27:35,490
So if our data owns that CAC, so we produce use the read that CAC function or the one I just listed over there, it was read underscore CSP.

740
01:27:35,510 --> 01:27:39,050
Those are two different functions and I apologize for the inconsistency.

741
01:27:39,650 --> 01:27:43,220
So essentially here we'll take one of those three functions.

742
01:27:44,140 --> 01:27:53,890
We'll tell it what the final name is. And then we want to assign that object as a new a new object in public schools.

743
01:27:54,400 --> 01:27:58,510
So we're reading in this file, using this function,

744
01:27:58,810 --> 01:28:04,240
and now we're using the assignment operator to make this an object for selecting the name of schools.

745
01:28:10,940 --> 01:28:17,780
One thing that is very lovely about you. So if you're working with like kind of custom data that your you've generated in

746
01:28:17,780 --> 01:28:22,010
a laboratory or something questionnaire data that you've collected yourself,

747
01:28:22,220 --> 01:28:25,580
you'll likely have to go through this manual portion.

748
01:28:27,220 --> 01:28:34,870
Thankfully, for a lot of our large epidemiologic datasets, their repositories often have an R package to help read reading the data.

749
01:28:35,680 --> 01:28:39,940
So in this case, sometimes we will reduce the errors of reading in data.

750
01:28:40,540 --> 01:28:45,760
You don't have to bring it from a website to your computer and then your computer and ah,

751
01:28:46,060 --> 01:28:54,080
these are a way of bringing it directly from the website into our. So for example, here's just a few of these.

752
01:28:54,100 --> 01:29:02,860
So if somebody is interested in molecular data sets, there's an NIH online repository called the Genome Expression Omnibus.

753
01:29:03,430 --> 01:29:04,659
There's an R package for that.

754
01:29:04,660 --> 01:29:15,280
So if you're curious about like RNA or epigenetics, there are thousands of data sets at this and I suppose an attractive.

755
01:29:16,320 --> 01:29:17,820
If you're interested in cancer,

756
01:29:18,120 --> 01:29:24,210
there's a cancer package for this one will use in this class is one you might be familiar with from your bio site class.

757
01:29:24,990 --> 01:29:28,110
The National Health and Nutrition Examination Survey, or Enhanced,

758
01:29:28,380 --> 01:29:35,340
is a biannual cross-sectional survey in the United States, and this has in our package will use this data directly.

759
01:29:36,570 --> 01:29:45,120
So this survey that and Heinz survey conducted by the Centers for Disease Control and they released data on about 5000 people every two years.

760
01:29:45,300 --> 01:29:50,220
So this is what we're going to use in the class and this is how we'll get some practice using a larger dataset.

761
01:29:53,620 --> 01:29:58,270
We can pull in the data to air with a package that they've made called Enhanced X.

762
01:29:59,110 --> 01:30:05,590
And essentially we can select what year we want. We can select what type of data do we want to do at the dietary survey?

763
01:30:06,040 --> 01:30:09,880
Do we want the demographics? Do we want the cognition survey?

764
01:30:10,540 --> 01:30:14,200
Do I want the laboratory access? There's all kinds of different data type you going to ask for,

765
01:30:14,560 --> 01:30:21,520
and they have their own family of functions to query or directly load those data into the session.

766
01:30:24,430 --> 01:30:27,750
When we read in data to our where is it being stored?

767
01:30:28,690 --> 01:30:32,770
It's going to pop up in our environment, just like the objects we've been making so far.

768
01:30:33,370 --> 01:30:38,950
So the global environment has a collection of whatever objects are activated and ready to be used in our current session.

769
01:30:39,940 --> 01:30:48,820
Importantly, this environment is temporary. This temporary workspace, this is not saved anywhere to your hard drive unless you tell it to do so.

770
01:30:49,120 --> 01:31:00,560
So if. If everything crashes, your session ends, you won't be aware that this working directory objects might not be there on,

771
01:31:00,670 --> 01:31:03,790
but you still have your code so you can regenerate it via code.

772
01:31:05,530 --> 01:31:10,720
Okay. So objects could potentially be lost to be closed out without saving our system crashes.

773
01:31:11,620 --> 01:31:15,040
And I want to give you a little bit of an analogy for thinking about this.

774
01:31:15,310 --> 01:31:20,320
So can anybody anybody who's ever research by a computer before,

775
01:31:20,740 --> 01:31:25,750
can you tell me what's the difference when you're purchasing a computer or building a computer yourself?

776
01:31:25,990 --> 01:31:30,190
What's the difference between active memory RAM and hard drive storage?

777
01:31:31,210 --> 01:31:36,370
So, you know, when you're buying a computer or something, you generally want higher numbers for both of those.

778
01:31:36,640 --> 01:31:42,670
But what what are those two what are those two values? The ram of a computer versus the hard drive storage.

779
01:31:42,940 --> 01:31:47,220
What are these? Two different things. Yeah.

780
01:31:47,610 --> 01:31:52,530
I think like from what I know that their brand is like how fast your computer works.

781
01:31:52,530 --> 01:31:58,380
But I think like, I just insinuates that it's like how much memory you can have really.

782
01:32:01,220 --> 01:32:10,550
Yeah. Actually memory is RAM is like what is temporary possible both for running functions right now and for storing

783
01:32:10,820 --> 01:32:18,290
objects in your current working environment versus your hard drive is like what you want to save long term.

784
01:32:18,830 --> 01:32:28,970
So our active memory or working memory, this is like what calculations you want are to be doing currently versus saving something to your hard drive.

785
01:32:29,600 --> 01:32:37,070
What allows you to have it for a longer time period? So these are two different principles and are has the same kind of idea.

786
01:32:37,400 --> 01:32:38,990
So in our active memory.

787
01:32:40,110 --> 01:32:48,600
This is where I mean, libraries are functions that we have queued up to be active are things like our objects, like our results.

788
01:32:49,020 --> 01:32:52,380
These are temporary. These are not full time storage.

789
01:32:53,890 --> 01:32:58,720
Our is like thinking hard to hold back in our current workspace.

790
01:33:00,070 --> 01:33:03,220
If we actually want to save these, we have to do an extra step.

791
01:33:03,880 --> 01:33:06,760
So it's an extra step to say, I want to save that dataset.

792
01:33:07,060 --> 01:33:14,650
It's an extra step to say, if I want to save that figure that I make as an extra step to install the package so that I have it for later.

793
01:33:15,280 --> 01:33:21,190
So just distinguishing or decoupling these two types of activities.

794
01:33:21,550 --> 01:33:28,600
So this is kind of what you're working on right now, and this is if you want something to be available to you in the future.

795
01:33:34,500 --> 01:33:41,790
Similarly, when we read a data set, we have a number of functions we can use for writing a data set,

796
01:33:42,600 --> 01:33:45,840
and the function that we might use depends on a data file type.

797
01:33:46,870 --> 01:33:50,650
So if we want to produce something with a test, we.

798
01:33:51,590 --> 01:34:01,280
File extension, we can use the right underscore t function if we want to produce a seven beat up object so our colleague can read it and assess.

799
01:34:01,520 --> 01:34:07,740
We use the right underscore self so we're going to match our desired data extension to it.

800
01:34:07,800 --> 01:34:13,160
There's going to be a function for that. So whatever object type you want to make, there's an R function for that.

801
01:34:17,020 --> 01:34:17,799
So for example,

802
01:34:17,800 --> 01:34:25,630
if we want to write data for somebody else to use outside of our maybe we want to share the dataset with collaborators who work in different software.

803
01:34:25,900 --> 01:34:29,470
Or maybe we want to make the data publicly available when we're publishing a paper.

804
01:34:30,490 --> 01:34:36,640
We want to match the function to the desired data file type. So in this case, if we want to make an excel.

805
01:34:37,940 --> 01:34:43,700
File were to use the right Excel function. So here I'm saying use the right Excel function.

806
01:34:44,600 --> 01:34:48,380
What object am I right? I'm writing that school on track that we just made.

807
01:34:49,190 --> 01:34:55,220
And where am I putting it? I'm putting it. I'm giving it the name of the school district's Excel.

808
01:34:56,300 --> 01:35:03,740
And it's going to write that as a new Excel file with that name.

809
01:35:08,060 --> 01:35:12,500
One thing I like to do probably right away when I get a new object, I want to put it in.

810
01:35:14,610 --> 01:35:23,129
A format that our likes so that I don't have to mess around with reading it in from all these other formats anymore.

811
01:35:23,130 --> 01:35:28,470
So once I get it into R, I usually want to save it in an R format for the future.

812
01:35:28,480 --> 01:35:34,870
So it's helpful to see that in an hour compatible format so that the next time you log in to R, you can use it easily.

813
01:35:35,940 --> 01:35:41,040
You don't need any special function to bring it in and it's going to start to hold on to all of your.

814
01:35:43,180 --> 01:35:46,570
Formats and like attributes. Anything nice you add to that data set.

815
01:35:46,840 --> 01:35:50,020
So one option for doing that is to use a function called save.

816
01:35:50,980 --> 01:35:55,210
So we tell it, what object do we want to save? And then what do we want to save it?

817
01:35:55,390 --> 01:36:05,490
So here I'm saving it as a school's file and the file type I'm saving it out is called an AR dataset object.

818
01:36:05,500 --> 01:36:14,020
So this file extension I've got RDA is a way to save data sets for use in our in the future.

819
01:36:14,020 --> 01:36:20,530
So next time when we get here, I can just load the data set and it's going to come on in with all of the features that I.

820
01:36:22,800 --> 01:36:29,450
Okay. Here's just the key for some of these weird file types that we've been coming across so far.

821
01:36:30,320 --> 01:36:35,090
So you may encounter this is until about a month ago.

822
01:36:35,090 --> 01:36:41,180
This was the file type we use. So now we're using a dot Q empty file because.

823
01:36:43,280 --> 01:36:47,330
Our studio is rebranding itself to be able to do more than just our programing.

824
01:36:48,050 --> 01:36:52,840
There's a capital R as if you just want the code write and you don't want any of the output.

825
01:36:53,850 --> 01:36:57,300
That's our RDA is an object. That's what we were just saving.

826
01:36:58,270 --> 01:37:01,990
Similarly, you could save it as an hour data. This can have a ton of objects.

827
01:37:03,550 --> 01:37:05,980
I pretty much never used our history, but that's the thing.

828
01:37:05,980 --> 01:37:14,260
If you ever want it and something we'll use in this class and we have been using our radio, these are products which can have a ton of stuff in there.

829
01:37:14,260 --> 01:37:17,800
You can have code, you can have data on the entire environment.

830
01:37:19,880 --> 01:37:26,330
So to recap, we talked about bringing in data so you can bring data into AR and export it from R and a whole bunch of different formats.

831
01:37:27,940 --> 01:37:33,340
First step is to find the file extension of your existing data set and find the function that matches that.

832
01:37:34,180 --> 01:37:41,530
And then we can save objects in an R compatible format with the file extension RDA for easy loading in the future.

833
01:37:43,900 --> 01:37:49,460
Kind of comments, questions we have here as well.

834
01:37:50,920 --> 01:37:54,670
What kind of file types are any of you working out?

835
01:37:54,670 --> 01:37:59,110
If you have either I'lI only projects or research projects are just a hobby of yours.

836
01:37:59,410 --> 01:38:03,790
What kind of file types are you typically thinking you might want to bring into R in the future?

837
01:38:05,930 --> 01:38:15,870
You might have anything. I'm curious. What? Yeah.

838
01:38:15,880 --> 01:38:20,590
What are you trying to do now? So what we use, like, that's a lot.

839
01:38:20,590 --> 01:38:24,130
But I think it like so.

840
01:38:24,490 --> 01:38:29,730
Oh, okay. Like so you might have some an Excel file that you want to bring in to.

841
01:38:29,740 --> 01:38:34,149
Ah so maybe it has a, that Excel aspect. I we try to bring it into our it or not.

842
01:38:34,150 --> 01:38:37,180
I have a bit of a mess.

843
01:38:37,180 --> 01:38:40,930
I have to get the right package to the Excel file.

844
01:38:41,110 --> 01:38:48,670
Exactly. Yeah. Yeah. And you may have tried that read Excel package, or maybe there's a ton of other ones out there, like you might have a time.

845
01:38:49,700 --> 01:38:52,700
Also read the data files in the files.

846
01:38:53,920 --> 01:39:03,410
Yeah, well, I would I would like sometimes transitioning datasets across software can be one of the more frustrating aspects of this process.

847
01:39:06,950 --> 01:39:17,659
All right. Well, we're going to jump into coding for a project, too, so you can find all of our lab materials here.

848
01:39:17,660 --> 01:39:22,310
And we're no longer going to go into Project One on the introduction. I want to go a Project two on data management.

849
01:39:23,360 --> 01:39:31,150
So it's the same language week to week. So you should be able to see a project for data management class.

850
01:39:31,160 --> 01:39:33,290
Are you going to click this directly? What are you going to do?

851
01:39:35,600 --> 01:39:42,530
Now we're going to make a copy so you can have your own personal version of it so that we don't paint on each other in and out of this.

852
01:39:42,830 --> 01:39:47,750
So I'm going to click over here to copy. And that's going to do.

853
01:39:47,750 --> 01:39:57,229
I want to say you. And outside of the play. And now we will have our own version.

854
01:39:57,230 --> 01:40:02,059
So because we won't get all the way through this project that I will only come back to it next week,

855
01:40:02,060 --> 01:40:06,380
we'll be able to check out right where we left off.

856
01:40:09,620 --> 01:40:12,800
All right. So we've got a number of files in our lower right hand corner.

857
01:40:12,980 --> 01:40:18,709
We notice we don't yet have a code file up and running, but we can go to the code file.

858
01:40:18,710 --> 01:40:26,150
We're going to start working together and. Is in the lower right hand corner.

859
01:40:26,180 --> 01:40:38,560
So this is the. I made it to Big Miami OC last year due to management got here and the OC so click on that that Q&A.

860
01:40:39,160 --> 01:40:47,020
So I support a markdown for the data management class. And that should pop us up in the upper left hand corner.

861
01:40:48,220 --> 01:40:54,560
And now we've got a now we've got a mark down here.

862
01:40:54,580 --> 01:41:03,069
Make sure you add your name to the authorship. You know, take some ownership over this so that if you share this code with somebody else,

863
01:41:03,070 --> 01:41:06,580
we're going to know who's working on it, who's contributing to this.

864
01:41:07,150 --> 01:41:17,950
And so up here, if we remember, this is called our header. This is us kind of describing some general information about this document.

865
01:41:17,950 --> 01:41:21,609
So it's running its title author the date here.

866
01:41:21,610 --> 01:41:27,490
I'm saying I want to format it when we click the render button to be a word document,

867
01:41:27,880 --> 01:41:32,170
you can make the format to be an HTML or a PDF, whatever format you would like.

868
01:41:36,660 --> 01:41:42,630
All right, let's jump into it. So I'm going to.

869
01:41:44,480 --> 01:41:47,820
I run a function here called session info.

870
01:41:48,060 --> 01:41:51,720
So this is going to check what packages have already been loaded.

871
01:41:55,750 --> 01:42:00,640
So this is just asking and seeing what packages, what version of are we running?

872
01:42:00,790 --> 01:42:04,480
So we should all have the same one because we're working from this uniform environment together.

873
01:42:04,750 --> 01:42:10,540
So hopefully this is the case. I was running our 4.2.1 and it tells us down here.

874
01:42:12,440 --> 01:42:17,570
That there's a number of these packages that are attached by default just by turning around.

875
01:42:18,350 --> 01:42:28,280
So these are packages called stuff I just call graphics package called graphics devices, utilities, data sets, methods and space.

876
01:42:28,580 --> 01:42:34,460
So this is how when we start our just on any given day, there's already some functions that we can use.

877
01:42:34,880 --> 01:42:41,180
So some of those functions we were using last class like mean like some like a C function for combine.

878
01:42:41,480 --> 01:42:46,190
Those are all coming from these basic packages. And those are pretty good for me generally.

879
01:42:47,180 --> 01:42:50,390
I just leave those alone. And I use those functions all the time.

880
01:42:50,610 --> 01:42:55,670
But if you ever want to, you could. You could unload one of those.

881
01:42:58,570 --> 01:43:04,400
To be able to get new packages. We can install new packages.

882
01:43:05,460 --> 01:43:13,440
When we install packages. This is the process of taking packages from the Internet and bringing them down to our personal computer.

883
01:43:14,160 --> 01:43:22,530
So if you're working out of your personal laptop, not in the browser, if you're working on the studio software, you'll have to do this.

884
01:43:23,250 --> 01:43:28,900
I've already done this in a cloud environment for you. So you can run this if you want.

885
01:43:28,920 --> 01:43:34,800
It doesn't hurt. It just is going to take a long time. The installation of the teddy bears alone, I think, takes a good 5 minutes.

886
01:43:35,400 --> 01:43:41,040
Okay, so something that I you can run this, but I have this settings up here.

887
01:43:41,910 --> 01:43:47,610
So I'm saying for this whole chunk, I set the option that we haven't seen before.

888
01:43:47,610 --> 01:43:52,769
I don't actually evaluate it. So this option says eval equals false.

889
01:43:52,770 --> 01:44:00,180
This means like don't actually run this code. So when we click the render button at the end of class, it will skip this one.

890
01:44:01,050 --> 01:44:03,570
So this is something I do when I'm sharing code with people.

891
01:44:03,570 --> 01:44:09,240
But if I don't actually want to rerun this code check every single time because if I'm flipping render,

892
01:44:10,020 --> 01:44:13,500
I don't want it to install that package and take another 5 minutes every time.

893
01:44:13,680 --> 01:44:21,360
Right. But that's something I don't need to do. So these are options that you can specify at the top of your code.

894
01:44:21,690 --> 01:44:27,510
You see, they come out in this kind of light blue color and that's there's all kinds of different settings.

895
01:44:27,630 --> 01:44:31,410
You can play with a few of these in the future. All right.

896
01:44:31,660 --> 01:44:40,060
So in general, I'm going to skip this practice this time. These are the four packages that in this class we're going to use.

897
01:44:41,140 --> 01:44:46,760
Functions from these Texas. So installing packages is something you only have to do once.

898
01:44:46,780 --> 01:44:51,650
That's downloading it from the Internet. How many times do we have to load packages?

899
01:44:53,610 --> 01:45:03,530
Every single time. So we're going to run this right now so we can load the tires, so we can load a package called here.

900
01:45:04,510 --> 01:45:09,910
Loading the teddy bear takes a second. We're loading the engine package.

901
01:45:09,920 --> 01:45:18,230
Them are loading a labeling package. I notice that there are some output, but it can be a little intimidating.

902
01:45:18,550 --> 01:45:22,570
Are you guys getting some red fat coming up after that? That's not actually an error.

903
01:45:22,720 --> 01:45:29,290
It's just a warning. And it's telling us that some things might be messed.

904
01:45:30,640 --> 01:45:37,960
What this means is. Because packages are written by different people.

905
01:45:38,500 --> 01:45:47,680
Some people like to use the same function there. So there's in this case, multiple functions called another square factor.

906
01:45:48,160 --> 01:45:56,450
And that's telling you that it is because we wanted this package last.

907
01:45:56,920 --> 01:46:05,320
That means this package is on top. So if you run the function as that factor by default, it's running this one's version of the of the function.

908
01:46:05,710 --> 01:46:09,640
The one that's the one from this other package is master hidden.

909
01:46:10,330 --> 01:46:13,930
So it's still there. It's still loaded, but you'll have to do an extra step to it up.

910
01:46:14,440 --> 01:46:21,940
So this I see this as to explain why when I open our I don't load every single package I've ever.

911
01:46:23,020 --> 01:46:28,470
Install because eventually you end up with too many packages stacked on top of each other.

912
01:46:28,480 --> 01:46:31,930
You're not sure which functions are actually being run at any given time.

913
01:46:35,650 --> 01:46:42,460
We also want to specify a file directory, so we want to tell our where it's reading objects from.

914
01:46:43,270 --> 01:46:50,830
So we've got a function called here that's sort of tell us where these data objects are coming from.

915
01:46:51,220 --> 01:46:54,340
So on the cloud, it's coming from here.

916
01:46:54,340 --> 01:46:57,280
It's coming from our Cloud Project folder.

917
01:46:57,430 --> 01:47:04,090
So this is our location of all of our data sets here in the Cloud Project for if you're working on your personal computer,

918
01:47:04,300 --> 01:47:08,800
this might be C drive, backslash, my documents, whatever.

919
01:47:09,280 --> 01:47:12,970
So you can specify the file path extension that you want it to come from,

920
01:47:13,450 --> 01:47:18,670
but this is going to by default is going to pull it from wherever our code is located.

921
01:47:20,050 --> 01:47:24,810
And when we come back in a class next week, we're going to this is going to be our data cleaning plan.

922
01:47:24,820 --> 01:47:31,420
So what we're going to work through, we're going to load three different data sets where demographics,

923
01:47:31,840 --> 01:47:35,530
complete blood counts and chemicals, and we're going to check each one together.

924
01:47:36,280 --> 01:47:40,780
We're going to keep only what's useful, and we're going to practice merging our joining those datasets together.

925
01:47:41,320 --> 01:47:47,360
And then we're gonna build a whole bunch of new variables from that, and we're going to save the dataset.

926
01:47:47,620 --> 01:47:53,950
So I tend to write out this type of order of operations for myself at the beginning so that I know.

927
01:47:55,530 --> 01:48:00,959
What my goals are because it can be easy to go create little rabbit holes for yourself.

928
01:48:00,960 --> 01:48:05,730
The journey down. And it's nice to have a protocol that you are trying to follow.

929
01:48:07,350 --> 01:48:16,880
So I think let's wrap up here. And when we come back to class next week, we're going to start importing the data set of column 70.

930
01:48:17,130 --> 01:48:22,560
Let me take them out and make sure I don't forget. So thank you, everyone, for your attention and I hope you have a wonderful week.

