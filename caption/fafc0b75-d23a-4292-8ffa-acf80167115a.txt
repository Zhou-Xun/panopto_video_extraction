1
00:00:02,710 --> 00:00:14,030
OK. So in this segment, we'll do a bit of some data manipulation and we'll start off by looking at what vectors are and what data frames are.

2
00:00:14,030 --> 00:00:18,470
So let's go back to our R script that we're using.

3
00:00:18,470 --> 00:00:24,460
So we're going to just say vectors, right?

4
00:00:24,460 --> 00:00:28,750
So a vector is a one dimensional data structure.

5
00:00:28,750 --> 00:00:32,440
It's one of the maybe the simplest data structure in R.

6
00:00:32,440 --> 00:00:37,150
And it has elements of the same type. And what do I mean by this?

7
00:00:37,150 --> 00:01:09,720
I'm going to define a few vectors and show you just examples of vectors.

8
00:01:09,720 --> 00:01:14,600
OK, so far, I've defined a vector called a vector called b.

9
00:01:14,600 --> 00:01:41,440
And I'll do just one more and we'll see how it works.

10
00:01:41,440 --> 00:01:53,290
OK, so now that I have defined my vector you can see that A has all numbers 10, 20, 30, B and C, those have all text.

11
00:01:53,290 --> 00:01:58,700
And I'm going to run these using the run function.

12
00:01:58,700 --> 00:02:10,890
And I know that, you know, the code that I have here has been the code has been executed the codes, rather, because I have three separate vectors and

13
00:02:10,890 --> 00:02:18,260
I can, there actually is, you can view them in the environment. Now I can check the class of my vector.

14
00:02:18,260 --> 00:02:28,160
So let's check the class of a. And I'm using the class function. So it tells me that a is the numeric vector.

15
00:02:28,160 --> 00:02:35,760
So beyond this, we can combine these vectors into a structure known as a data frame just write dataframe.

16
00:02:35,760 --> 00:02:42,740
So you can see my next step. And I'm going to create a data frame that's called schools.

17
00:02:42,740 --> 00:02:49,840
All right. Because I I have already defined my vectors.

18
00:02:49,840 --> 00:02:58,980
This is going to make the next step much easier. I'm going to use a function called data frame.

19
00:02:58,980 --> 00:03:07,110
And I can enter the names of the vectors that I have here.

20
00:03:07,110 --> 00:03:15,540
OK, so my data frame has been created and so we can click on this and you can see I have three columns,

21
00:03:15,540 --> 00:03:19,410
ABC corresponding to the three vectors that I defined earlier.

22
00:03:19,410 --> 00:03:31,110
And I also have three rows. And I do this because most times in R when we're doing our analysis, we're given we're working with data frames.

23
00:03:31,110 --> 00:03:44,010
When we import a file from Excel, for example, it's usually R reads it or stores it as a data frame because it's usually two dimensional.

24
00:03:44,010 --> 00:03:51,660
So it makes sense for us to be able to create our own data frames because there are times when we have to do that to do quick analysis.

25
00:03:51,660 --> 00:03:58,110
So if we know how to do it in R, it saves us the time of going back to excel to do it.

26
00:03:58,110 --> 00:04:07,410
Another thing I can do, I can change the names of my variables in my data frame ABC to make it more sort of more meaningful.

27
00:04:07,410 --> 00:04:15,590
So I'm going to. Point to my data frame schools and use my operator.

28
00:04:15,590 --> 00:04:20,150
I'm going to use a C, the C function basically means concatenated.

29
00:04:20,150 --> 00:04:23,930
I used it earlier on and it really means that you're combining things.

30
00:04:23,930 --> 00:04:30,660
So I'm going to call my name's cost,

31
00:04:30,660 --> 00:04:39,870
materials, and color, right?

32
00:04:39,870 --> 00:04:49,530
So let's look at. OK. So the names have been assigned and I did that using the names function.

33
00:04:49,530 --> 00:04:57,360
And again, this is obviously very simplistic, but there are times when you have to create your your own data frame your own data structures.

34
00:04:57,360 --> 00:05:05,220
Right. So that's why I did that. So you saw the basic data structures and you saw how to use the class function.

35
00:05:05,220 --> 00:05:13,570
I showed you the numeric variable and we can check the class of of a variable within our data frame.

36
00:05:13,570 --> 00:05:27,010
So let's check the class of. So let's use schools, we can copy and paste that lets check the class of materials, right?

37
00:05:27,010 --> 00:05:31,040
So it tells us it's a character variable.

38
00:05:31,040 --> 00:05:37,190
So essentially it's a string variable, you know, composed of letters or text.

39
00:05:37,190 --> 00:05:46,130
Right. So that's kind of how we use a class function. It tells us the type of vector we have or the type of variable we're working with.

40
00:05:46,130 --> 00:05:52,670
So, OK, let's see what's next. Now we're going to use the filter function.

41
00:05:52,670 --> 00:06:01,160
So the filter function is the parts of a dplyr package that I loaded earlier on the library that I loaded earlier on.

42
00:06:01,160 --> 00:06:06,770
So it makes data clean and just much easier.

43
00:06:06,770 --> 00:06:14,870
And I'm going to just do some basic data manipulation to my data frame here called scores.

44
00:06:14,870 --> 00:06:19,110
So let's use the filter function and let me write

45
00:06:19,110 --> 00:06:32,390
filtering data. So just looking at this dataset, I want to filter and create a new data frame that would have scores that are 80 or more.

46
00:06:32,390 --> 00:06:43,580
Right 80 or higher. So I'm going to call that the in the new object called high scores.

47
00:06:43,580 --> 00:06:55,680
OK. Great. So we did that. So the next step is that we're going to refer to the data frame that, you know, that we're going to manipulate.

48
00:06:55,680 --> 00:07:03,180
And then we're going to use the pipe function and the pipe function is taking what's on the left of it and feeding

49
00:07:03,180 --> 00:07:06,600
it into what I'm going to enter on the right of it.

50
00:07:06,600 --> 00:07:14,490
So its feeding scores into my function called filter and I'm going to filter test scores.

51
00:07:14,490 --> 00:07:19,510
So let's go back to this test.scores that's cause that's the name of the variable that I'm filtering.

52
00:07:19,510 --> 00:07:27,750
So let's do that, test.scores. And as for where the grades are greater than or equal to 80.

53
00:07:27,750 --> 00:07:37,170
Right. So we just created another data frame called high scores, and everything here should be 80 or above.

54
00:07:37,170 --> 00:07:42,750
And it's just a simple way of, you know, just cleaning your data filtering for what you need.

55
00:07:42,750 --> 00:07:48,150
Let's see what we have next. We can also index our data, and by index

56
00:07:48,150 --> 00:07:55,230
I mean, just selecting whatever value you need from your data frame or data structure.

57
00:07:55,230 --> 00:08:03,690
So let's go to our main data frame scores and we're going to use the score brackets to do this.

58
00:08:03,690 --> 00:08:09,460
So if we're looking at scores and we want to find out what's in the

59
00:08:09,460 --> 00:08:17,740
the eighth row and second column, so we have satisfactory that's the second column and the eighth row.

60
00:08:17,740 --> 00:08:22,940
So is yes, right. So let's see how we can access that.

61
00:08:22,940 --> 00:08:28,630
So we would enter eight comma and two because eight,

62
00:08:28,630 --> 00:08:34,720
anything that's to the left of the comma is pointing to the row and to the right is pointing to your column.

63
00:08:34,720 --> 00:08:42,440
So let's run this. And it should tell me. Yes. So that's just a fast way to index your data to

64
00:08:42,440 --> 00:08:53,720
access specific values that you need to work with so we can also create new variables and I'll show you there different ways to create variables

65
00:08:53,720 --> 00:08:56,540
but I'll show you a quick way to do that.

66
00:08:56,540 --> 00:09:03,240
I'm going to still store my I'm going to store my new variable in the same the original dataset called Scores.

67
00:09:03,240 --> 00:09:11,280
And I'm going to call my new variable. Excellent. And to define

68
00:09:11,280 --> 00:09:18,810
excellent I'm saying if you have and these are just conditions that I'm making up, right, I'm saying anywhere that satisfactory is equal to

69
00:09:18,810 --> 00:09:26,960
Yes That's going to be considered as excellent. Right. So I'm going to point to copying and pasting makes life easier.

70
00:09:26,960 --> 00:09:35,490
So I'm going to say anywhere satisfactory. OK.

71
00:09:35,490 --> 00:09:39,450
So let's recap quickly. So im saying within my data frame call

72
00:09:39,450 --> 00:09:44,190
score I'm creating a new variable called Excellent and this Excellent is based on the

73
00:09:44,190 --> 00:09:50,880
variable called Satisfactory that's already in my data frame or datasets called Scores

74
00:09:50,880 --> 00:09:59,730
but it's where is satisfactory is equal to Yes. I'm testing because the double equals sign here is known as an equal quality operator.

75
00:09:59,730 --> 00:10:03,900
I'm testing say to see wherever there is Yes, give me

76
00:10:03,900 --> 00:10:10,260
that's going to be excellent. So let's run this and see the new variable that we just created.

77
00:10:10,260 --> 00:10:14,600
So now its telling me true, right, and this is exactly how it should be.

78
00:10:14,600 --> 00:10:17,950
So anywhere there is a yes, there is a true anywhere there is a no

79
00:10:17,950 --> 00:10:25,620
there's a false. And this specific type of variable where you have the values being true or false is known.

80
00:10:25,620 --> 00:10:36,140
So let's check the class actually, and it will tell us the time that we have.

81
00:10:36,140 --> 00:10:45,410
And it's called a logical variable, right, because it's a special type of a variable that we have here, a special operator.

82
00:10:45,410 --> 00:10:51,530
So true or false? Another thing that we can do is that we can.

83
00:10:51,530 --> 00:10:55,910
So let me write create a new variable

84
00:10:55,910 --> 00:11:03,090
so you can see the different steps and doing.

85
00:11:03,090 --> 00:11:15,860
We can rename variables, right? And to do this, the original data set that I have here, I'm going to rename the variable Excellence.

86
00:11:15,860 --> 00:11:21,800
I'm gonna call that great. So I see how we do this. And I'm going to store it in that same dataset.

87
00:11:21,800 --> 00:11:30,440
So scores. We're going to use the rename function.

88
00:11:30,440 --> 00:11:37,450
OK, so I'm saying I'm pointing to this main data frame because this is where my my data

89
00:11:37,450 --> 00:11:44,390
set is in my variable is that I need to rename its in this data frame called Scores.

90
00:11:44,390 --> 00:11:53,470
And the new name is going to be called Great. And the old name is the old name was excellent.

91
00:11:53,470 --> 00:11:58,330
Right. So we're saying, OK, old name.

92
00:11:58,330 --> 00:12:03,820
Old variable name, new variable name, and let's run this. So let's take a look.

93
00:12:03,820 --> 00:12:08,200
And it's called great. So now that we renamed it, we can

94
00:12:08,200 --> 00:12:16,490
what if we want to delete a variable? We no longer need this.

95
00:12:16,490 --> 00:12:22,880
And I'm going to delete the variable that I just renamed.

96
00:12:22,880 --> 00:12:28,610
Excellent. No longer exists, but copying. I'm just copying because it makes it faster copying and pasting.

97
00:12:28,610 --> 00:12:33,350
So I'm saying here this variable called Great, I don't need it.

98
00:12:33,350 --> 00:12:39,810
So let's remove this. I use no. And this will remove the variable.

99
00:12:39,810 --> 00:12:44,460
So all right. It's no longer there. So let's see what we have next.

100
00:12:44,460 --> 00:12:48,570
We're going to save our data. So let's do that.

101
00:12:48,570 --> 00:12:56,540
So a lot of times when we make changes or a data frame and it makes sense for us to be able to save it instead of,

102
00:12:56,540 --> 00:13:05,100
you know, rerunning or codes all over again. So let's try to save this, at least the schools that we just created that data frame.

103
00:13:05,100 --> 00:13:13,970
So let's see how we can save that. So saving data, we will use the save function.

104
00:13:13,970 --> 00:13:20,910
And it comes with base R. And we're going to write the name of the data frame that we're saving

105
00:13:20,910 --> 00:13:25,080
It's called schools. We're going to write a file name. We're saving it

106
00:13:25,080 --> 00:13:33,710
Whatever filing you choose. I'm just going to use schools for simplicity in quotes.

107
00:13:33,710 --> 00:13:38,250
And I'm entering .rdata. The reason I'm doing it

108
00:13:38,250 --> 00:13:43,230
You can save. You can save your data as a CSV file if you want to.

109
00:13:43,230 --> 00:13:46,290
Right. Different formats. You have the option.

110
00:13:46,290 --> 00:13:54,690
But if I save it as a R file, R data means, you know, it's a R file that's going to be easily read and recognized by the R environment.

111
00:13:54,690 --> 00:13:58,960
For me to access it I just have to load it. I don't have to worry about,

112
00:13:58,960 --> 00:14:04,200
OK, what function should I use. So this just makes it easier because we're already working with R.

113
00:14:04,200 --> 00:14:11,550
So let's practice how to save or data in a format that R is going to quickly recognize and load for us.

114
00:14:11,550 --> 00:14:19,200
So I'm using the save function. You know, pointing to schools because that's the main data frame that I'm saving.

115
00:14:19,200 --> 00:14:21,900
This is the file name. So let's save this.

116
00:14:21,900 --> 00:14:30,440
Now that I ran this and because I set my working directory earlier on, I did that, it means that if I go to this folder, fphlp,

117
00:14:30,440 --> 00:14:35,280
I should see, you know, the data frame that I just save.

118
00:14:35,280 --> 00:14:41,860
So let's take a look. And see. OK, so great.

119
00:14:41,860 --> 00:14:47,020
It just saved it for me. Schools.r data. If I need to access it

120
00:14:47,020 --> 00:14:50,890
I can simply click on that and it will be read in.

121
00:14:50,890 --> 00:15:00,280
And this is essentially the code that our uses to read it in. So in this segment, you saw how to install packages, how to set your working directory.

122
00:15:00,280 --> 00:15:04,420
And these are basic steps that make R easy to use

123
00:15:04,420 --> 00:15:10,000
the first time you're using this, how to load your libraries to use how to use R as a calculator.

124
00:15:10,000 --> 00:15:15,250
And, you know, you saw a different data structures and how to manipulate your data.

125
00:15:15,250 --> 00:15:20,050
If you want to save your file, which I encourage you to do, you simply go to file.

126
00:15:20,050 --> 00:15:24,880
You can do a command s or you just go to file. And then you click on save.

127
00:15:24,880 --> 00:15:32,040
Right. And you know that's it, it's already pointing to my folder that I have here.

128
00:15:32,040 --> 00:15:38,820
But you can save it wherever you want to save it on your local computer. So that's it for this segment in the next segment

129
00:15:38,820 --> 00:15:49,160
You will see how we use some of these functions to analyze real time Covid-19 data.

