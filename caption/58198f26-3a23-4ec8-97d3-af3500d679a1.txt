1
00:00:03,630 --> 00:00:16,860
Good morning, everybody. And we all doing this morning doing okay.

2
00:00:20,040 --> 00:00:29,350
Anybody have any questions for me? We are coming up to the busiest time of the semester probably here.

3
00:00:30,850 --> 00:00:34,870
You had a homework due today, so hopefully you got that in.

4
00:00:35,830 --> 00:00:39,250
Homework five is going to be released today and do next week.

5
00:00:39,850 --> 00:00:42,880
So unfortunately, there a little bit stacked there.

6
00:00:43,330 --> 00:00:47,390
But after that one, you'll have a significant break for your homeworks.

7
00:00:48,970 --> 00:00:53,710
The main reason for the stacking is because it aligns with with what we're doing in class.

8
00:00:54,130 --> 00:01:00,370
And also you've got a midterm coming up in two weeks. So I want to give, you know, homework for the week before that.

9
00:01:02,120 --> 00:01:07,940
So that you have time to prepare for the exam. Okay.

10
00:01:07,960 --> 00:01:12,160
Any questions about what we did last time? We'll talk a little bit more about the exam here in a minute.

11
00:01:21,950 --> 00:01:27,649
No questions. All right.

12
00:01:27,650 --> 00:01:31,160
Well, let's talk about the midterm in a little bit. It is two weeks from today.

13
00:01:32,360 --> 00:01:37,100
It is going to be in class. So we'll just take it here on paper.

14
00:01:38,030 --> 00:01:45,840
You know, say this isn't the easiest thing to do on paper, but I've tried to make an exam that it's feasible for such a thing.

15
00:01:47,780 --> 00:01:53,990
It will be comprehensive in that it will include everything we've done up to this point, including what we talk about today.

16
00:01:55,980 --> 00:01:59,220
It will be open note, though, so you can bring any notes that you have.

17
00:02:04,830 --> 00:02:07,920
The format will be kind of varied.

18
00:02:07,920 --> 00:02:12,360
You'll have some short answer stuff, you'll have to answer questions.

19
00:02:13,860 --> 00:02:17,520
You might have to write small bits of code.

20
00:02:17,820 --> 00:02:24,570
Nothing very complicated, but you might have to do a very basic data step or a very basic procedure step.

21
00:02:26,280 --> 00:02:29,250
You also may have to like complete code that's partially done.

22
00:02:30,240 --> 00:02:35,910
So you might have to write a couple of extra lines of code, something like that in in the code that's already there.

23
00:02:39,040 --> 00:02:42,760
There might be some multiple choice. Or.

24
00:02:43,710 --> 00:02:51,300
Selection type things? Yes. Clarify. Yeah.

25
00:02:51,300 --> 00:02:55,770
I'd prefer those those things to be non-digital.

26
00:02:55,890 --> 00:03:04,650
So I don't really want you to have your computers open or your phone out, but you can certainly have any, any, any paper notes that you have.

27
00:03:05,760 --> 00:03:11,110
Okay. Yes. These questions are going to be harder than other questions.

28
00:03:11,560 --> 00:03:16,090
Harder than homework question. I would say no.

29
00:03:17,170 --> 00:03:20,650
It's a little different than homework isn't a homework. You're actually coding.

30
00:03:22,000 --> 00:03:28,110
So the format is. To avoid having to do that in class.

31
00:03:29,430 --> 00:03:32,520
You may have to like I said, you may have to write some short pieces of code.

32
00:03:33,520 --> 00:03:36,610
But nothing as extensive as a homework.

33
00:03:37,270 --> 00:03:40,430
It's going to be more about do you know what the options are?

34
00:03:40,450 --> 00:03:46,150
Do you know what statement you need to do to accomplish a certain thing in the code?

35
00:03:47,110 --> 00:03:57,930
Does that make sense? Yes. Questions? I believe I have 15 questions which are multipart.

36
00:04:01,540 --> 00:04:08,600
Yeah. And one thing I'll say, even though it's open note, you shouldn't rely on those notes.

37
00:04:10,770 --> 00:04:21,419
If you if you got a whole stack of of resources notes that you've taken and the lecture slides and all that with you, that's okay.

38
00:04:21,420 --> 00:04:25,020
But you're not going to want to rely on that so that you have to search around for

39
00:04:25,020 --> 00:04:30,810
things during the exam because you're only going to have the 50 minutes to complete it.

40
00:04:31,260 --> 00:04:34,860
If you're searching for things the whole time, you're you're not going to finish.

41
00:04:35,550 --> 00:04:40,950
So make sure you're not relying on those notes. But certainly you can have anything you want with you.

42
00:04:42,360 --> 00:04:54,090
Okay. Does that make sense? So, you know, you might have to answer have some short answer things like this.

43
00:04:55,350 --> 00:05:01,760
What's the purpose of a live name statement? Hopefully you know that. It's used to direct stars to a location on your computer.

44
00:05:02,970 --> 00:05:10,320
So you might have to have some short answer type things. You might have to write a short piece of code, something like this, right?

45
00:05:15,940 --> 00:05:20,170
But you wouldn't probably have to write anything more extensive than this kind of thing.

46
00:05:21,840 --> 00:05:27,320
All right. You might have to do some interpretation of results.

47
00:05:27,620 --> 00:05:30,560
So this is a frequency table that was produced with PROC Freak.

48
00:05:31,160 --> 00:05:38,000
So you might have to answer questions about that, such as what percentage of females are in the population.

49
00:05:39,050 --> 00:05:45,160
You should be able to read that from the table. It's 49%. Okay.

50
00:05:46,280 --> 00:05:55,790
So that makes sense. So how I recommend you prepare, organize and print your notes or cheat sheets?

51
00:05:56,750 --> 00:06:07,630
I would. Probably try to summarize your notes on a couple sheets so that you're not, again, searching for everything.

52
00:06:09,640 --> 00:06:13,390
And complete the debugging lab next week.

53
00:06:14,570 --> 00:06:22,670
That'll be a normal lab next week. And there's also an optional review lab as well that you can do on your own to help you study.

54
00:06:25,860 --> 00:06:31,110
We're going to have our same office hours as usual. So please come to those if you have anything that you want to.

55
00:06:32,360 --> 00:06:36,080
Want to ask us. Or help you with.

56
00:06:37,790 --> 00:06:42,540
There's also going to be a practice exam on canvas. That will open up.

57
00:06:43,840 --> 00:06:47,200
On Tuesday. 25th.

58
00:06:47,220 --> 00:06:51,450
Tuesday? Yeah, Tuesday. So that's something you can try as well.

59
00:06:52,260 --> 00:06:56,690
The format there is it's on canvas. So it's a little bit more multiple choice and stuff like that.

60
00:06:56,700 --> 00:07:03,240
But it'll give you a good idea of what type of things that you'll need to know.

61
00:07:04,490 --> 00:07:10,300
Okay. So that's a good, good way to do it, a good way to prepare yourself.

62
00:07:12,190 --> 00:07:18,400
If you do have any accommodations that you're going to need, make sure you've got your paperwork in for that.

63
00:07:19,060 --> 00:07:24,880
And I'll ask you to remind me ahead of time, just so that I remember and can can accommodate you as needed.

64
00:07:25,600 --> 00:07:31,350
Okay. So just remind me next week or send me an email about that.

65
00:07:35,470 --> 00:07:45,680
Any other questions about the exam? No.

66
00:07:47,610 --> 00:07:52,800
There'll probably be an opportunity next week to ask questions as well. So. All right.

67
00:07:54,240 --> 00:07:57,510
Today, we need to talk about combining datasets.

68
00:07:58,860 --> 00:08:03,840
This is going to be something crucial for almost any analysis that you do.

69
00:08:05,240 --> 00:08:11,569
Up to this point, we've had single data sets and we've worked from well,

70
00:08:11,570 --> 00:08:17,150
if you need to combine those which you often do, you're going to need to know how to do that.

71
00:08:17,480 --> 00:08:20,840
So. When data unites.

72
00:08:21,330 --> 00:08:26,040
So this might mean that you have a lot of times like an N Heinz.

73
00:08:26,250 --> 00:08:39,110
You have multiple data sets. You might have to combine lab data with other health data with medical data with.

74
00:08:40,020 --> 00:08:43,860
Medication data. Right. Those are usually all in different data sets.

75
00:08:45,860 --> 00:08:49,130
So you'll need to be able to combine those in some way.

76
00:08:50,180 --> 00:08:57,860
So our learning objectives here this week are to combine datasets together using Cat Nation and matched merging.

77
00:09:00,720 --> 00:09:06,540
We want to understand the purpose of a unique identifier and know the features of a good identifier for epidemiological research.

78
00:09:08,860 --> 00:09:13,780
We want to be able to fix non-combat ability compatibility issues of those identifiers.

79
00:09:15,550 --> 00:09:22,750
And we're going to want to be able to utilize the in function to retain certain observations during a merge.

80
00:09:25,880 --> 00:09:34,900
So let's talk about concatenation first. So concatenation really just means that you have.

81
00:09:37,170 --> 00:09:47,400
Two datasets or more two or more datasets that generally have the same variables in it for the most part, but different people.

82
00:09:49,950 --> 00:09:55,710
And so really you're just trying to combine all those people together into one dataset.

83
00:09:58,950 --> 00:10:05,550
So it's like this. If you've got these two datasets blue in and the red one, you just kind of want to stack them on top of each other.

84
00:10:06,920 --> 00:10:14,630
To get one larger dataset. So it's the visual imagery here is you're just stacking them, right?

85
00:10:15,260 --> 00:10:20,840
You've got the same variables, different people. You're just making the data set longer.

86
00:10:22,290 --> 00:10:27,700
Okay. And luckily it's very easy to do in SAS.

87
00:10:27,720 --> 00:10:32,490
You just need a set statement, assuming these data sets are already SAS data sets.

88
00:10:32,940 --> 00:10:38,290
You've already imported them. And. Made them into fast data sets.

89
00:10:39,330 --> 00:10:44,930
You can just list. Those multiple data sets in the said statement.

90
00:10:48,430 --> 00:10:51,940
So if the blue ends at 81 and the red one stated two and they both live.

91
00:10:53,030 --> 00:10:56,360
In the temporary work folder in this code here.

92
00:10:57,920 --> 00:11:04,300
We'd stack them together. Okay.

93
00:11:07,190 --> 00:11:12,380
So that's great. Well, what happens if you have different variables and you try to do this?

94
00:11:14,780 --> 00:11:20,930
Well, that's not too big of a problem either. If you concatenate them with the set statement.

95
00:11:22,350 --> 00:11:26,540
The result will be something like this. So they're still stacked.

96
00:11:27,050 --> 00:11:30,080
And I'll just create a new column for any new variables.

97
00:11:30,530 --> 00:11:35,700
And those values will be missing. For the observations.

98
00:11:36,950 --> 00:11:42,270
For the data set were that variable didn't exist. Okay.

99
00:11:47,760 --> 00:11:53,430
So that's how that will work. This sometimes, however, might indicate a problem.

100
00:11:55,270 --> 00:12:00,220
And the problem would be if those two variables actually were meant to be the same.

101
00:12:00,730 --> 00:12:13,240
But they have different names for some reason. So if you had CRP values here and it was called CRP in one dataset and CRP s and another.

102
00:12:15,050 --> 00:12:19,580
Well, that was kind of an unintended difference. We would like these to be the same.

103
00:12:21,320 --> 00:12:26,540
So we can fix that by renaming the variable in one of the datasets.

104
00:12:29,780 --> 00:12:33,800
So here instead of just the set with CRP and CRP to.

105
00:12:35,060 --> 00:12:39,560
I can in parentheses because it's kind of a sub option just for that one data set.

106
00:12:40,710 --> 00:12:47,450
I can rename with the rename option. And it looks like it does here.

107
00:12:47,810 --> 00:12:54,290
So you have rename equals parentheses and you're changing KPRC, which is in CPR to.

108
00:12:55,620 --> 00:12:59,580
To the new name CERP, which is the same name as it is in CERP.

109
00:13:01,770 --> 00:13:05,339
Okay. You do need parentheses here?

110
00:13:05,340 --> 00:13:10,920
Like. Like they are. The outer parentheses indicate that it's just for that one data set and you're renaming

111
00:13:11,760 --> 00:13:17,040
and the inner parentheses are actually because you can list more than one rename here.

112
00:13:17,930 --> 00:13:26,990
Together. So if you also wanted to rename, say, age to age two, you can do that with a space age because age two.

113
00:13:28,240 --> 00:13:31,540
In the same parentheses, you can rename more than one thing at a time.

114
00:13:34,740 --> 00:13:38,170
Okay. And because this is.

115
00:13:39,370 --> 00:13:44,110
Then in this way the variables will now have the same name.

116
00:13:44,380 --> 00:13:52,320
And so they'll line up nice like they do here on the right. Makes sense.

117
00:13:55,960 --> 00:14:03,410
All right. So key takeaways in that section. You want to concatenate datasets by using a set statement within your data set.

118
00:14:06,080 --> 00:14:12,680
And you can fix data with the same variables when the same variables have different names by using that rename option.

119
00:14:14,300 --> 00:14:20,780
Okay. Well.

120
00:14:22,860 --> 00:14:27,130
Now. Let's say you have different data sets.

121
00:14:29,130 --> 00:14:33,660
But in this case, let's say the people in them are the same people.

122
00:14:35,010 --> 00:14:40,160
But they have different variables. This is how enhanced generally looks.

123
00:14:40,940 --> 00:14:45,620
Right. There's there's a demographics data set and then there's a.

124
00:14:49,420 --> 00:14:53,210
There's lots of them, but there's like the medication data set, right.

125
00:14:53,650 --> 00:14:57,430
And there's some physical measures, data set.

126
00:14:57,820 --> 00:14:59,470
These are all the same people generally.

127
00:15:00,890 --> 00:15:06,650
They might be subsets of each other, but generally they're the same people, but with different variables in them.

128
00:15:08,960 --> 00:15:12,590
So that's what we want to deal with next.

129
00:15:12,590 --> 00:15:17,410
And that's called a merge. Or a matched merge.

130
00:15:19,330 --> 00:15:24,730
And so we're going to want to figure out how to do that and understand the purpose of a unique identifier.

131
00:15:26,190 --> 00:15:33,000
So in order to merge data and have the same people in it, you do need to have a unique.

132
00:15:35,210 --> 00:15:42,540
Non identifiable ID. So.

133
00:15:43,580 --> 00:15:49,160
What makes a good identifier? I mean, would it be any of these things you suppose?

134
00:15:50,200 --> 00:15:53,270
What do you think? These things work as a unique identifier.

135
00:15:56,330 --> 00:15:59,730
Now, these are these are things that multiple people could have.

136
00:15:59,750 --> 00:16:03,480
Right. Even things. Even birthday or last name or first name.

137
00:16:03,500 --> 00:16:06,650
Right. Those are still things that multiple people could have.

138
00:16:08,440 --> 00:16:13,200
So generally you have some kind of ID number. Like here.

139
00:16:13,200 --> 00:16:21,780
It's just called ID, but it might be. It might be a Social Security number if you had that kind of data, right?

140
00:16:22,470 --> 00:16:25,840
It might be. Um.

141
00:16:29,120 --> 00:16:35,030
It might be some combination of a name and a birthdate and an address or something like that, right?

142
00:16:36,040 --> 00:16:40,330
It could be that. But in general, you'll have some.

143
00:16:41,680 --> 00:16:46,120
Unique identifier which will not identify the person.

144
00:16:47,420 --> 00:16:51,980
Usually that's the problem where we're doing this type of analysis.

145
00:16:53,100 --> 00:17:01,410
You don't really want to be able to tell who the people are. Most surveys are designed so that it's an anonymous right.

146
00:17:03,250 --> 00:17:07,210
Especially things that have health data in them, which they often do for epidemiology.

147
00:17:10,010 --> 00:17:13,850
So what we're talking about here is a 1 to 1 merge first.

148
00:17:14,480 --> 00:17:18,290
So in this case, we have the same three people in these two datasets.

149
00:17:18,770 --> 00:17:23,840
The first one has age and smoking status. The other has CRP and IL six.

150
00:17:24,860 --> 00:17:32,630
There are two inflammation measures. So the goal is to make them look like this in one dataset.

151
00:17:36,920 --> 00:17:42,000
And you can do that. With this type of code.

152
00:17:43,950 --> 00:17:48,480
So first of all. In order to merge datasets.

153
00:17:49,860 --> 00:17:54,320
They must be sorted. By the by the ID variable.

154
00:17:57,190 --> 00:18:00,900
Okay. Otherwise it just won't work.

155
00:18:00,910 --> 00:18:05,400
You'll be nearer in your log. It says they're not properly sorted. Okay.

156
00:18:06,460 --> 00:18:14,950
So if I was going to combine this play Wodumo and play with her birth my ID number, I need to sort them by ID number first.

157
00:18:18,580 --> 00:18:23,080
So that's always the case when merging. You have to you have to sort both datasets.

158
00:18:23,710 --> 00:18:27,100
So that's first and then you can use a merge statement.

159
00:18:28,740 --> 00:18:37,620
Merge them together and you need a buy statement as well to tell it the unique identifier that you're merging the my.

160
00:18:41,690 --> 00:18:46,520
This, whatever. Variables in the buy statement should be the one that you've sorted them.

161
00:18:49,590 --> 00:18:53,140
Okay. So these variables are the same here.

162
00:18:57,210 --> 00:19:04,970
Whenever you use a buy statement in general in SAS, you're going to have to sort first whether it's in a data step or a procedure.

163
00:19:06,610 --> 00:19:11,910
Okay. So here's an example.

164
00:19:15,520 --> 00:19:22,850
I've got these two data sets on the top. ID number is ID number is the unique identifier in both.

165
00:19:23,720 --> 00:19:28,530
And they had different variables. And you can see they have the exact same people in them.

166
00:19:29,310 --> 00:19:35,940
So when I read my log, I see that there is 365 observations in the first three, 65 of the second.

167
00:19:36,840 --> 00:19:44,290
And because I've matched merge them 1 to 1. I know I have the same 365 in my combined version.

168
00:19:46,760 --> 00:19:51,470
Okay. So same people just matched 1 to 1 in the two datasets.

169
00:19:57,340 --> 00:20:04,350
All right. Now the people aren't exactly the same.

170
00:20:05,830 --> 00:20:09,160
In the two datasets. That's okay too.

171
00:20:10,670 --> 00:20:14,930
It'll just have missing for some of the variables. Kind of like we saw when we.

172
00:20:15,980 --> 00:20:23,299
When we concatenated two data sets that had different variables in them, it left missing for some of the values.

173
00:20:23,300 --> 00:20:29,060
Right. The same thing will happen if you merge two data sets that have not exactly the same people.

174
00:20:30,120 --> 00:20:43,180
So let's say the first date is set here. Has 349 people in it, in the second has 304, and they overlap in a pretty significant way.

175
00:20:44,230 --> 00:20:50,910
Most of them, 288 overlap in the two. If you merge these.

176
00:20:51,910 --> 00:20:55,650
As we. In the same way that we saw in the previous example.

177
00:20:56,100 --> 00:21:05,960
It will still work. You'll see in our log that we've got 349 in the first three or four in the second, and now we have 365 in our combined version.

178
00:21:08,810 --> 00:21:12,710
That's because it just took everybody that was in either data set.

179
00:21:14,280 --> 00:21:19,860
And merge them together. However, there were there will be missing and those variables.

180
00:21:20,980 --> 00:21:25,060
For for the people that weren't in one data center or the other.

181
00:21:27,420 --> 00:21:31,420
Okay. Does that make sense?

182
00:21:37,100 --> 00:21:40,280
You can also match merge by more than one identifier.

183
00:21:42,420 --> 00:21:47,970
So this is often the case if we have some kind of longitudinal data like this example here.

184
00:21:49,200 --> 00:21:58,520
The two data sets on the right. You can see have multiple observations for the same person at the same ID number.

185
00:22:00,700 --> 00:22:10,790
But they happened on different dates. So if we need to merge these and match the same visit.

186
00:22:11,750 --> 00:22:18,010
So in other words, the same person and the same date. We can do that by listening more than one.

187
00:22:19,540 --> 00:22:27,810
Identifier in the buy statement. But again, we do need to sort them first.

188
00:22:28,560 --> 00:22:36,060
And if I'm going to match merge on more than one variable, I'm going to have to sort them on those multiple variables as well.

189
00:22:36,360 --> 00:22:41,080
So those should be listed in the by. The buy statement in the sort as well.

190
00:22:47,380 --> 00:22:57,890
Okay. Well, what if you have one too many merging?

191
00:22:59,230 --> 00:23:02,350
This is another case that will happen quite a bit.

192
00:23:03,430 --> 00:23:08,409
So you might have a longitudinal data set like this one in Iran over here and

193
00:23:08,410 --> 00:23:15,040
then just kind of an additional data set which has demographics on each person.

194
00:23:17,040 --> 00:23:24,200
Those aren't date specific variables, right? So we can still merge these together.

195
00:23:24,950 --> 00:23:29,180
And what will happen if we merge these is that it will match.

196
00:23:30,820 --> 00:23:37,900
Everybody who's a one here will get the race and sex values for one in the first dataset.

197
00:23:41,240 --> 00:23:48,330
Okay. So it's still going to keep. All of these are multiple observations for each person.

198
00:23:49,750 --> 00:23:56,020
It's just going to fill in the same values from that first data set for each each of those.

199
00:23:57,120 --> 00:24:04,540
Those observations for that person. This would we would call a one too many merge.

200
00:24:08,080 --> 00:24:15,030
Okay. And here's an example of actual code that would do that.

201
00:24:17,110 --> 00:24:23,140
So it looks pretty much the same as it did. We sort them first.

202
00:24:23,740 --> 00:24:32,430
We use a merge statement. You can see in this example, we're actually merging three data sets together at the same time.

203
00:24:34,020 --> 00:24:40,510
Which you can also do. You can merge as many as you want at the same time in the same merged statement.

204
00:24:43,480 --> 00:24:48,130
So you end up with multiple observation for each person.

205
00:24:49,570 --> 00:24:58,560
Where the. The variables all line up next to each other like you see below.

206
00:25:03,120 --> 00:25:09,310
All right. So it's making sense that everyone.

207
00:25:10,290 --> 00:25:20,630
Yes. That's a great question.

208
00:25:22,250 --> 00:25:30,650
It doesn't really matter which order you put them in, but whichever one you put first, the variables in that data set will show up first.

209
00:25:31,400 --> 00:25:36,300
Yeah. But you'll still get the same type of merge.

210
00:25:37,220 --> 00:25:43,900
Whether you order them one way or the other. Okay.

211
00:25:47,120 --> 00:25:53,959
You know the questions on that. All right.

212
00:25:53,960 --> 00:26:01,400
So key takeaways in that section match merged two more datasets together using merge inside a data step.

213
00:26:03,160 --> 00:26:07,270
You must include a buy statement with the unique identifier identifiers.

214
00:26:08,630 --> 00:26:14,500
And you always have to use practice sort. To sort by that unique identifier before merging them.

215
00:26:18,120 --> 00:26:27,280
Okay. Let's talk more about fixing incompatible identifiers.

216
00:26:29,820 --> 00:26:34,889
So they do need to be unique in order to match, which makes sense.

217
00:26:34,890 --> 00:26:39,150
Right. And you can't match something that's not exactly the same in all data sets.

218
00:26:41,710 --> 00:26:51,940
By is the critical piece to most merges. The variable must be exactly the same in name and content in order to match them.

219
00:26:52,940 --> 00:26:58,490
If you had a character identifier like AOL five, for example, and that's got a character in it.

220
00:26:59,420 --> 00:27:04,160
Which means it's by necessity a character variable in SAS.

221
00:27:05,620 --> 00:27:10,270
It will matter if you have capitalization in one and not the other.

222
00:27:11,330 --> 00:27:15,050
Or spaces. In front one and not the other.

223
00:27:15,680 --> 00:27:20,570
So in this one you've got a five and then you've got a space of five there.

224
00:27:21,910 --> 00:27:26,260
Those are not the same identifier. Incest unless you fix it.

225
00:27:28,670 --> 00:27:33,020
Okay. They must match.

226
00:27:33,020 --> 00:27:36,800
Exactly. Okay.

227
00:27:37,010 --> 00:27:42,910
The format should be the same. So even if you had just five.

228
00:27:44,850 --> 00:27:52,320
And it was the same in both. But one of those variables was numeric and the other was coded character.

229
00:27:53,770 --> 00:27:58,170
Those would not match either. You would get an error in your log in that saying that the.

230
00:27:59,530 --> 00:28:04,570
The the bi variable was both numeric and character and it couldn't match them.

231
00:28:06,660 --> 00:28:12,940
So they do have to match. Is both character, both numeric and the length should also be the same.

232
00:28:13,360 --> 00:28:16,960
This you might be able to get away with. With not having.

233
00:28:18,610 --> 00:28:26,440
Not fixing. But it will give you a at least a warning in your log if the length of the two variables are different.

234
00:28:27,340 --> 00:28:33,040
So if this first one had length three and this one has length for because there's well,

235
00:28:33,280 --> 00:28:38,440
even if they're the same, because this could still have a length of four that was assigned to that variable.

236
00:28:39,840 --> 00:28:45,340
Right. If they were the same, it would match them together.

237
00:28:45,790 --> 00:28:50,770
But it would give you a warning. The problem is going to occur if.

238
00:28:51,990 --> 00:28:57,570
One is much longer than and then the other. You might get some truncation that happens.

239
00:29:00,490 --> 00:29:04,010
Right. It's going to choose the length.

240
00:29:05,310 --> 00:29:14,760
For the new data set. I'll have to check on this, but I believe it would choose whatever dataset was listed last for the length.

241
00:29:15,420 --> 00:29:22,950
So if if the first one had a longer length and the second one had a shorter length, you might get some truncation happening happening there.

242
00:29:24,950 --> 00:29:34,840
Okay. So let's learn how to deal with with different identifiers.

243
00:29:37,320 --> 00:29:44,410
So in this example. The identifier is called ID in the first dataset and is called ID number in the second dataset.

244
00:29:46,420 --> 00:29:47,590
So if you try to merge them,

245
00:29:47,830 --> 00:29:58,120
this is actually the error that you'll see in your law by variable ID is not on input data set worked at age 2020 because we tried to merge my ID.

246
00:29:59,650 --> 00:30:04,060
So it's really just saying, well, that ID variable is not on the second data set.

247
00:30:06,750 --> 00:30:15,230
Okay. So we can fix that with a rename again, just like we did for concatenation.

248
00:30:17,840 --> 00:30:22,960
And it works exactly the same way. Okay.

249
00:30:23,200 --> 00:30:29,530
So you in parentheses you put your rename equals next to the data set that you want to rename the variable in.

250
00:30:30,860 --> 00:30:35,510
And in a second set of parentheses, you indicate the change that you want to make.

251
00:30:37,850 --> 00:30:42,100
Old variable equals new. And would be the order there?

252
00:30:42,130 --> 00:30:48,940
Yes. Yeah, you could do that.

253
00:30:48,950 --> 00:30:53,590
You could put another rename statement next to the the base h data set.

254
00:30:54,540 --> 00:30:58,100
Okay. So if you want to rename them both to say.

255
00:30:59,840 --> 00:31:10,640
Number, right? You could rename it to number in the next to the first dataset and then rename it to number in the second dataset.

256
00:31:12,190 --> 00:31:20,240
Yeah, you could do that. Generally it's not necessary.

257
00:31:20,450 --> 00:31:23,830
You've got. At least one decent name.

258
00:31:24,040 --> 00:31:27,040
And in one of them, if they're terrible names, they might want to change your mouth.

259
00:31:27,060 --> 00:31:31,120
But if you've got one decent one, you can just change the other one to the good one.

260
00:31:32,760 --> 00:31:37,140
Okay. All right.

261
00:31:38,500 --> 00:31:49,150
What if they have different formats? Well, in this example, we're trying to merge the same data sets, but now it is well, it's the same name.

262
00:31:50,050 --> 00:31:54,250
But in the first dataset there's kind of these leading zeros which.

263
00:31:55,510 --> 00:31:58,630
Which necessitates that being a character variable.

264
00:32:01,500 --> 00:32:07,450
We're in the second dataset. It's a numeric variable. And this is the error you'll see if that occurs.

265
00:32:07,900 --> 00:32:11,380
Variable enum has been defined as both character and numeric.

266
00:32:14,750 --> 00:32:24,370
So we'll work. Somebody remember how you can change character to numeric or numeric to character?

267
00:32:25,470 --> 00:32:30,370
You remember those functions? Put an input.

268
00:32:30,610 --> 00:32:36,420
That's right. So that's what we can do here. We're going to have to convert one of those.

269
00:32:37,690 --> 00:32:47,550
In order for them to match. So character ten to numeric we use input and numeric to character we use put.

270
00:32:51,800 --> 00:32:57,590
This in format and format here that's in the in the function always reflects the number.

271
00:32:59,840 --> 00:33:04,490
Okay. So you'll have, for example, 3.4.

272
00:33:05,430 --> 00:33:11,220
As opposed to, say, dollar sign for DOT, which is a character format.

273
00:33:13,480 --> 00:33:19,900
Okay. So you're always reflecting the number portion of what you're trying to convert or convert to.

274
00:33:22,260 --> 00:33:30,000
All right. And the other caveat here is that you must have a new name when doing this,

275
00:33:30,570 --> 00:33:38,250
because once SAS defines a variable as a certain type, either numeric or character, you can't change it.

276
00:33:41,480 --> 00:33:46,590
So you have to give it a new name. Right.

277
00:33:48,730 --> 00:33:54,720
So here's an example solution. In a data set dataset.

278
00:33:55,450 --> 00:34:00,120
Sorry, I did a step. I'm taking that base age text.

279
00:34:01,890 --> 00:34:06,300
Data set and I'm changing the id num variable.

280
00:34:07,800 --> 00:34:15,360
Into a numeric version of itself called ID. Right.

281
00:34:19,250 --> 00:34:25,040
Once I've done that. You're not quite done yet, right?

282
00:34:25,670 --> 00:34:30,500
Because you still have to merge them by the exact same IDs in both files.

283
00:34:32,730 --> 00:34:38,940
But if you have a new variable in the right format but it has a wrong name, the variable is still not going to be in a merger.

284
00:34:38,940 --> 00:34:46,110
Right? So. Here's here's the full code that could be used here.

285
00:34:47,660 --> 00:34:52,070
So we change it to add in a data step.

286
00:34:54,970 --> 00:35:00,700
And then. Well, this isn't quite it yet, because we're.

287
00:35:01,090 --> 00:35:06,010
We're. We're still merging by ID number in this case.

288
00:35:08,620 --> 00:35:13,670
So. Oh, I'm sorry I missed the rename up there.

289
00:35:13,690 --> 00:35:19,480
We renamed it we renamed it to Idina at the top of the code as well.

290
00:35:20,880 --> 00:35:25,840
In the data statement there. Okay.

291
00:35:27,830 --> 00:35:33,790
So if you change the variable to ID. Essentially you're just got to change it back.

292
00:35:38,950 --> 00:35:44,170
There's kind of a weird combination of things here because we've renamed something to to ID that's numeric.

293
00:35:44,950 --> 00:35:53,710
We dropped ID number out of it. And then we renamed it when we saved the new dataset.

294
00:35:56,010 --> 00:36:01,270
Right. We renamed it back to what it was before. Yes.

295
00:36:04,770 --> 00:36:15,060
The 8-K. Yes. So that is a length. It's a it's a format of the new numeric variable that we're creating.

296
00:36:18,920 --> 00:36:23,470
Yep. It's just a format. Which means length eight and numeric.

297
00:36:25,750 --> 00:36:36,430
Okay. So now this work, we can now merge them together in a in a different data step.

298
00:36:38,420 --> 00:36:45,970
With. The bi variable I.D. number because it's matches in both data sets and now they're both numeric as well.

299
00:36:50,720 --> 00:36:57,620
Okay. Here's another option there.

300
00:37:00,810 --> 00:37:04,080
You can. Drop it.

301
00:37:05,670 --> 00:37:12,540
I think that should say I.D. number and then you can rename it in the same kind of sub statement here.

302
00:37:15,210 --> 00:37:24,000
Next in the merge in the merge statement. So there's no harm in dropping and renaming at the same time.

303
00:37:27,180 --> 00:37:35,010
So this will also work. Key takeaways in this section.

304
00:37:36,290 --> 00:37:40,870
Unique identifiers must match. Exactly. In value.

305
00:37:40,900 --> 00:37:46,830
Name and type. Rename is going to be useful again to fix names.

306
00:37:48,420 --> 00:37:54,190
The formats differ. You can follow these procedures here.

307
00:37:54,190 --> 00:38:00,730
So step one, change the format of one of the IDs to make the identifiers with matching in formats in each data set.

308
00:38:01,870 --> 00:38:09,790
Step two Drop the old ID with the right name, wrong in format, and step three, rename the new ID the right in format to also have the right name.

309
00:38:12,810 --> 00:38:16,050
So there are basically three steps you have to do if if you have one of these.

310
00:38:17,490 --> 00:38:24,680
One of these mismatches. Okay.

311
00:38:30,780 --> 00:38:35,040
Next. Let's talk about the in. The end statement here.

312
00:38:38,220 --> 00:38:41,700
Sometimes you really do have big mismatches between data sets.

313
00:38:42,640 --> 00:38:50,350
So while you still want to merge them, the people in them might be very different or they might have minimal overlap.

314
00:38:51,720 --> 00:38:53,100
And the actual people that are in them.

315
00:38:54,330 --> 00:39:01,050
So if you had kind of this geographical situation here and you really only wanted to look at those people in the circle.

316
00:39:01,560 --> 00:39:04,880
Well, there's a bunch of. There's a bunch of people.

317
00:39:06,330 --> 00:39:09,810
In those different regions that overlap in the middle there.

318
00:39:12,080 --> 00:39:17,210
So there's some are the same, but some are different in those in those regions.

319
00:39:18,820 --> 00:39:29,800
So a lot of times you're only going to want to keep observations from one dataset or the other, or only keep them if they're in both or all datasets.

320
00:39:35,150 --> 00:39:38,620
So one possibility. You could merge them together.

321
00:39:40,420 --> 00:39:43,180
In delete and some of the variables in the file that should not be missing.

322
00:39:44,200 --> 00:39:56,320
So if you merge them together and age and you know, here we're missing on most of the people, you might just you might just.

323
00:39:58,850 --> 00:40:04,460
Drop those variables. Okay.

324
00:40:07,230 --> 00:40:11,220
But a better option is to actually use the in operator.

325
00:40:13,760 --> 00:40:23,749
So remember this example where when we merged them together and they had different people but in overlap it just combined everyone.

326
00:40:23,750 --> 00:40:27,470
So everyone who was in either dataset showed up in the new one.

327
00:40:29,400 --> 00:40:34,090
Right. But. If we wanted.

328
00:40:34,090 --> 00:40:42,280
Only the overlap there. Only the 288. We could do that with this in option here.

329
00:40:46,160 --> 00:40:52,740
So this is a basically a tag. It's basically placing a name tag on that dataset.

330
00:40:54,340 --> 00:40:58,910
So you can think about it. Demo.

331
00:40:59,030 --> 00:41:07,320
Here is the nametag we're giving to first dataset. And birth is a nametag we're giving to the second dataset set.

332
00:41:14,030 --> 00:41:22,230
This is going to act as a temporary variable in sass. Which is only going to exist during the running of this particular data step.

333
00:41:26,460 --> 00:41:29,760
Demo is going to be one. It's going to equal to one.

334
00:41:30,480 --> 00:41:33,840
If the record is in the first dataset and demo dataset.

335
00:41:35,920 --> 00:41:44,670
And it's going to be zero otherwise. Birth will equal one if the record is in the second dataset.

336
00:41:48,350 --> 00:41:56,860
So let's see how that works. Once I've given those name tags and emerging buy ID number.

337
00:41:58,500 --> 00:42:02,670
I can then say something, some kind of logical statement.

338
00:42:03,510 --> 00:42:07,410
In this case, if demo and birth.

339
00:42:08,630 --> 00:42:12,910
Which means essentially. Subset.

340
00:42:14,380 --> 00:42:19,830
My marriage. To only include those values where demo is true.

341
00:42:21,050 --> 00:42:29,330
Meaning it's in the first data set. And birth is true, which means it's also in the second data set.

342
00:42:34,120 --> 00:42:40,250
Okay. Of course, you could use different combinations of this.

343
00:42:40,580 --> 00:42:43,790
So if you really just wanted everyone that was in the first dataset.

344
00:42:47,560 --> 00:42:53,230
Okay. And the matches that were included in the second day set but no one additional.

345
00:42:53,620 --> 00:43:05,960
You could just say if demo. Likewise if you wanted everyone who is in the second data set and only those that matched in the first.

346
00:43:07,200 --> 00:43:12,710
You could say if birth. Okay.

347
00:43:13,620 --> 00:43:19,710
In this case. We want. Each observation to be included in both.

348
00:43:20,670 --> 00:43:28,110
Data sets because we're using the demo and birth. Okay.

349
00:43:31,090 --> 00:43:35,720
So this is essentially what's happening. Soon as you include a tag here.

350
00:43:37,760 --> 00:43:44,240
Here. I'm including a tag. It's called A which represents the fact that it's in that il6 data set.

351
00:43:46,270 --> 00:43:54,790
What's going to happen is it's going to create a variable. Coli, which is one if it's in the il6 dataset.

352
00:43:55,780 --> 00:44:04,640
And zero otherwise. So when it merges them, this is kind of an intermediate step that you wouldn't see generally.

353
00:44:05,300 --> 00:44:09,440
But for illustrative purposes, this is what would happen.

354
00:44:09,470 --> 00:44:14,320
So you've got a one for all those observations that were in the six data set.

355
00:44:14,840 --> 00:44:22,660
You've got. A missing or actually that would probably be a zero for that.

356
00:44:22,870 --> 00:44:26,530
Number three, subject, which wasn't in the AL six dataset.

357
00:44:30,310 --> 00:44:33,580
Okay. And then when you have the if a at the end.

358
00:44:34,830 --> 00:44:43,180
It's going to subset. The merge so that it only includes those values or those observations where a equals one.

359
00:44:49,420 --> 00:44:59,850
So it looks like this. And then a this this you also wouldn't see then a would actually go away.

360
00:45:01,190 --> 00:45:05,240
After you're done running this. It's a temporary variable.

361
00:45:08,340 --> 00:45:15,470
Okay. So you wouldn't actually see a in your dataset when you were done, but you would only see these people.

362
00:45:19,020 --> 00:45:22,230
You wouldn't see that. Person three Who is in the first dataset?

363
00:45:25,020 --> 00:45:35,250
So it's making sense to everyone. Okay.

364
00:45:37,050 --> 00:45:41,640
So the key takeaways merge statements can create dummy variables to flag those records.

365
00:45:43,560 --> 00:45:47,020
In certain datasets. This end.

366
00:45:47,440 --> 00:45:53,560
This in command from the merge statement must be paired with an EF statement in order to select those certain records.

367
00:45:54,700 --> 00:45:58,000
So this wouldn't work if you didn't have the eight at the end.

368
00:45:59,620 --> 00:46:05,890
It would basically do nothing. It would create the variable and then it would just get rid of it when you're done.

369
00:46:07,870 --> 00:46:13,050
You need the FAA in order to subset. Emerge on that temporary variable.

370
00:46:15,500 --> 00:46:22,830
Okay. And that's the end.

371
00:46:25,320 --> 00:46:29,800
For today. No questions.

372
00:46:33,890 --> 00:46:39,520
So this is what you're going to practice in your lab today. It's also the the bulk of what you'll see on your homework five.

373
00:46:39,530 --> 00:46:44,020
That's due next week. Okay. All right.

374
00:46:44,060 --> 00:46:44,870
Good luck on your lab.

