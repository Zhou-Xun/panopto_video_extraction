1
00:00:16,520 --> 00:00:21,560
Okay. I hope that I did it right.

2
00:00:21,740 --> 00:00:42,080
Okay. So let's get started. So we're almost done with this homework proposal.

3
00:00:42,110 --> 00:00:47,910
So I went to Great Finish grading and giving feedback.

4
00:00:49,880 --> 00:00:55,400
By the end of the last week, but it's been taking a little bit more.

5
00:00:55,400 --> 00:01:04,010
So I believe that I gave at least a one comment for pretty much every proposal I graded.

6
00:01:04,010 --> 00:01:07,430
I think I have one more left. I think so.

7
00:01:07,430 --> 00:01:14,480
I'll, I'll try to finish it today. Um, so your score.

8
00:01:14,780 --> 00:01:21,889
So honestly, there is a large variation in the quality of the proposal,

9
00:01:21,890 --> 00:01:31,549
I would say because I saw some proposal is very concerning that they don't contain any details like what the plan was.

10
00:01:31,550 --> 00:01:35,150
Oh, this is just the idea. Just the idea.

11
00:01:35,150 --> 00:01:41,180
And doesn't have any plan. Real, real plan. So those were really concerning.

12
00:01:41,390 --> 00:01:48,980
And I did, you know, specify what kind of what kind of concerns I had in that particular case.

13
00:01:50,030 --> 00:01:55,399
So but, you know, your score for the proposal itself wouldn't very much.

14
00:01:55,400 --> 00:02:06,200
So I try to minimize the variation because the intent of the proposal was, uh, was to, you know,

15
00:02:06,320 --> 00:02:13,460
help, help you get started not really trying to, uh, the make a final judgment about your plan.

16
00:02:14,840 --> 00:02:16,340
So keep that in mind.

17
00:02:16,340 --> 00:02:27,200
So if you are, are you got very so if you got a perfect score in your well in your proposal, that means that your proposal is decently written.

18
00:02:27,200 --> 00:02:37,159
It doesn't necessarily mean that your plan is perfect because we I, I don't know which one is exactly actionable, which one is not,

19
00:02:37,160 --> 00:02:44,810
which I, I tried to give some comment when I, whenever I, I know, but I think a lot of proposal was actually very great.

20
00:02:45,050 --> 00:02:52,670
So, and I was very pleased to see most of the proposal was actually very thought through and uh, so on.

21
00:02:52,670 --> 00:02:53,600
So probably it should,

22
00:02:53,600 --> 00:03:03,350
it should start with the positive comments that I just wanted to make mention that there were some proposals I had concerns with and those are,

23
00:03:04,130 --> 00:03:08,690
you know, if you did your property, you didn't get a perfect score.

24
00:03:09,110 --> 00:03:15,319
It's not the end of the world, obviously, and it's usually it's either of two.

25
00:03:15,320 --> 00:03:24,320
So one case is that your proposal itself is good, but your writing itself is not very good quality.

26
00:03:24,320 --> 00:03:30,050
So because I'm grading based on the rating, so if you have a lot of, you know,

27
00:03:30,170 --> 00:03:37,890
mistakes or some flaw in the in the writing, then then you could, you could get some deduction.

28
00:03:38,720 --> 00:03:47,180
Uh, or your plan itself is not very good, so, and you have a problem in, in that plan.

29
00:03:47,180 --> 00:03:53,089
So either of them might be. So probably half of the students got a perfect score and half of them didn't.

30
00:03:53,090 --> 00:03:56,329
I guess. I guess maybe one third about perfect score.

31
00:03:56,330 --> 00:04:00,260
I'll, I'll have to see. But the great,

32
00:04:00,260 --> 00:04:07,700
great credit will be don't worry about the score much but you know that that that is the reason if you if you did didn't get a perfect

33
00:04:07,700 --> 00:04:19,069
score just so you know more important thing is that take my comment into account seriously that I my comment that might be misleading.

34
00:04:19,070 --> 00:04:24,080
I mean I might have been confused. I might not have understood your proposal very well.

35
00:04:24,560 --> 00:04:28,049
So that might be why I gave that kind of comment in the case.

36
00:04:28,050 --> 00:04:37,030
And just, you know, let me clarify it. But the main purpose of this, uh, know,

37
00:04:37,160 --> 00:04:46,129
main purpose of this proposal is to communicate and I want to communicate with you to make your project successful.

38
00:04:46,130 --> 00:04:53,150
So if you see some comments, uh, please, please take it seriously.

39
00:04:53,150 --> 00:05:01,459
And I might give another comment. I wanted to have a second read, but I didn't have time yet, so I'll try to give a comment.

40
00:05:01,460 --> 00:05:14,330
And if you check in, I believe that if I give a comment, it should notify to the to the to the author of the owner of the document.

41
00:05:14,330 --> 00:05:25,580
I believe about if if you. Yeah. So turn that notification on if that's all for some reason you so so that's main comment about

42
00:05:25,580 --> 00:05:32,840
it so there was one group who didn't so in in the Google to which I said that it's okay but.

43
00:05:33,170 --> 00:05:38,420
That comment I need to give just said in the email or something.

44
00:05:38,420 --> 00:05:41,600
So I'll, I'll do that and.

45
00:05:42,770 --> 00:05:47,900
Okay. And then that's, that's the comment about the final project.

46
00:05:48,230 --> 00:05:51,500
I know you're very big. You're still you know,

47
00:05:51,830 --> 00:05:55,729
some of you are still working on the homework for many of you are probably

48
00:05:55,730 --> 00:06:02,629
working on the midterm project but are I'm working on the final project should

49
00:06:02,630 --> 00:06:15,080
be fun hopefully and something that is that that actually expand your horizon and I try to understand the real problem in the studies or computing.

50
00:06:16,190 --> 00:06:25,909
Yeah. And I find your real interest in specific method or domain and working on a challenging computational problem.

51
00:06:25,910 --> 00:06:31,370
And that's what I'm hoping for. I understand not everyone is in that stage, in their in their research.

52
00:06:31,370 --> 00:06:38,730
But you know, when you work together, I hope that you can find some shared interest to that,

53
00:06:38,740 --> 00:06:45,410
that that then motivates you and inspires you so that that's what I'm hoping for with this final project.

54
00:06:46,460 --> 00:06:55,970
So yeah, in the case you got a you really think that all given my given the comment from instructor I need to really

55
00:06:55,970 --> 00:07:06,350
like revamp my my plan or some of the lessons you have recently learned that give you more recipe or you know,

56
00:07:06,350 --> 00:07:12,180
dynamic program anything that actually want you to steer your project into some other directions.

57
00:07:12,200 --> 00:07:18,800
Feel free to consult me and I'm happy to meet with you to provide more specific advice.

58
00:07:20,790 --> 00:07:29,760
Okay. So that is the comment about the, uh, about the final project proposal.

59
00:07:30,270 --> 00:07:34,770
Any, any other particular questions about your final product?

60
00:07:36,630 --> 00:07:42,490
Yep. So we don't need to respond to your comments. You don't need to respond the comment if you do respond.

61
00:07:42,590 --> 00:07:52,499
I'll try to respond again. Okay. So if you wanted to communicate and then go, that is a great way to communicate with a specific topic.

62
00:07:52,500 --> 00:07:55,920
So yeah, I encourage you to respond if you can.

63
00:07:56,580 --> 00:08:01,230
Okay. That's a good question. Okay. But you don't have to respond.

64
00:08:01,380 --> 00:08:08,480
Okay. So. Okay. Okay.

65
00:08:09,620 --> 00:08:17,330
And let's then keep working on our sleep from last lecture.

66
00:08:19,730 --> 00:08:36,280
Okay. So I just ran this part to make it fast.

67
00:08:37,210 --> 00:08:41,950
So we had this part.

68
00:08:42,490 --> 00:08:53,020
We, we stopped at okay. So, and I just explained as a kind of DC C++ function is a kind of black box.

69
00:08:53,140 --> 00:08:58,990
Okay. So, uh, it might be still like black box to you.

70
00:08:59,380 --> 00:09:04,720
Okay. So, uh. So.

71
00:09:06,000 --> 00:09:12,870
There is a six or seven lecture that talks about C++.

72
00:09:13,050 --> 00:09:14,940
I think this is a great lecture.

73
00:09:14,940 --> 00:09:29,610
So I think if you wanted to write about C++ language, then would be a good class to sit in or take take and learn about the details.

74
00:09:29,820 --> 00:09:32,970
Detailed syntax is of the C++ language.

75
00:09:34,270 --> 00:09:40,380
In my opinion, I really think that with the StackOverflow and YouTube lectures,

76
00:09:41,310 --> 00:09:53,190
I don't think you really need a class to learn those new skills necessarily because there are so many good lectures you can just self learn from it.

77
00:09:53,190 --> 00:09:57,060
Just what what what limits you here.

78
00:09:57,180 --> 00:10:11,520
All of you is just time, right? So and I think learning some basics of C++ would be good if you wanted to become a very good C++ programmer.

79
00:10:12,490 --> 00:10:19,890
It's it it'll be probably very challenging and you need to spend a lot of time to do the C++ coding.

80
00:10:20,670 --> 00:10:29,880
But if you're not if you don't have to use the pointers in C++ and if you don't have to deal with that pointer.

81
00:10:31,550 --> 00:10:35,690
C++ is actually I think it's a very straight forward.

82
00:10:35,690 --> 00:10:44,179
And so it is a quite, quite easy to learn in, in, in the level of a lot of programing you need to deal with in OCP.

83
00:10:44,180 --> 00:10:51,499
You don't need to deal with pointers and those stuff. So I, you probably need a little bit of understanding of how the pointers and left parentheses

84
00:10:51,500 --> 00:10:57,110
are different from the call by value called by levers and the concepts like that.

85
00:10:57,110 --> 00:11:02,870
I, I wish that I'd have time to talk about it, but I, it, this is not a C++ lecture.

86
00:11:02,870 --> 00:11:09,409
So those are like if you have understanding of difference between the call by value and call by reference,

87
00:11:09,410 --> 00:11:14,450
that's probably the only thing you need to know to make your RCP program more efficient.

88
00:11:16,110 --> 00:11:24,410
Um, I'm going to briefly mention it, but, but what I wanted to say is that learning C++ is not hard,

89
00:11:24,890 --> 00:11:31,969
and especially learning RTP is less hard than learning like C++.

90
00:11:31,970 --> 00:11:42,290
That's what I would like to claim. So and we're not going to teach all the syntax since the syntax is of course I RCP today,

91
00:11:43,220 --> 00:11:55,040
but I hope that you can get at least a glimpse of it so that you can get started with it and actively use in your in your project.

92
00:11:55,220 --> 00:12:01,160
I really strongly encourage you to use at least some part of your project in RCP

93
00:12:01,160 --> 00:12:07,670
so that you can have understanding of why it's so useful and when it's useful.

94
00:12:07,670 --> 00:12:11,750
And how is it useful? Okay, that's a long, long read.

95
00:12:11,960 --> 00:12:21,440
Okay. So again, I'm not going to explain the details in Texas, but I'm going to explain it slightly here today.

96
00:12:22,280 --> 00:12:31,280
So we're going to use a lot of c p function in our lecture because it's just easy to use in the note due to the notable kind of setting,

97
00:12:31,820 --> 00:12:36,559
so called setting. So I don't recommend to use the c p function.

98
00:12:36,560 --> 00:12:40,310
There is a source copy and using the RCP packages.

99
00:12:40,310 --> 00:12:43,730
So that's what I that's the method I recommend.

100
00:12:43,730 --> 00:12:52,010
But in this notebook setting, this is the easiest way to load a C++ function on your own.

101
00:12:53,150 --> 00:12:57,889
So you can just write your C++ plus function as a string like this.

102
00:12:57,890 --> 00:13:01,610
So sip, sip function. But it would take the source code as a string.

103
00:13:02,660 --> 00:13:11,660
And here when you define a new function in C++, what you need to do is the syntax is a little different.

104
00:13:11,660 --> 00:13:20,300
So you need to start with a return type. So if it's a return something it has, it has an integer or a double or whatever return type is.

105
00:13:20,840 --> 00:13:25,309
But in this case of this, this function doesn't return anything.

106
00:13:25,310 --> 00:13:31,520
It's a void. If it doesn't return anything. And this is a function name and this is an argument.

107
00:13:31,910 --> 00:13:39,190
Okay. And this argument is basically whenever you pass a vector, okay.

108
00:13:39,740 --> 00:13:47,840
To a function. So C++ wants to know what what was to know what the type of your argument is.

109
00:13:47,840 --> 00:13:51,980
So that's the main difference from Python in R.

110
00:13:52,430 --> 00:13:58,459
So you need to specify what what types are your passing, passing on?

111
00:13:58,460 --> 00:14:07,070
And if you pass on the numeric vector, you can pass as a numeric vector and you can put the ampersand or not.

112
00:14:07,070 --> 00:14:17,420
So this is a this is the difference between the call by value and call by reference and the and I probably don't have time to explain it,

113
00:14:17,420 --> 00:14:30,800
but the very one, one, one line of version is that COBOL reference is but if you, if you pass by reference when you update this object,

114
00:14:31,130 --> 00:14:36,770
it's, it also is updated from the original function you're calling from.

115
00:14:36,770 --> 00:14:44,120
So that's the difference from the R where you in R, you have no way to update your arguments.

116
00:14:44,120 --> 00:14:49,850
If you if you give an excessive parameter, then unless you are using global the assignment,

117
00:14:50,270 --> 00:14:57,679
all of the update you made on the parameter is gone when the function it had function is has finished it.

118
00:14:57,680 --> 00:15:11,360
That's a very confusing part. If you haven't if you have used R Python has a slightly different logic about how the past argument was handled.

119
00:15:11,360 --> 00:15:23,150
Sometimes it gets updated, sometimes non. So you know those those details are probably most confusing part to distinguish between the C and C++ are in

120
00:15:23,990 --> 00:15:30,740
Python when you when you do the programing but that's important distinction because that that that explains how.

121
00:15:31,440 --> 00:15:34,920
Each of the languages handles each of the object inside the memory.

122
00:15:36,030 --> 00:15:40,110
So anyway, so if you don't mind, if you are not going to,

123
00:15:40,650 --> 00:15:44,480
if you don't mind updating the value instead of a function that this is the

124
00:15:45,060 --> 00:15:49,190
putting up ampersand is a little more efficient and this is actually a part.

125
00:15:49,200 --> 00:15:56,010
So it just runs a full loop from the follow up.

126
00:15:56,070 --> 00:16:06,810
So the another main difference between the art and C++ is that I'll start with all the indices from one base indexes.

127
00:16:07,080 --> 00:16:17,430
That's pretty much I think it's only are does that I most most of the most primitive energy so python and C++ is using zero based

128
00:16:17,430 --> 00:16:27,930
index so which means that if you do this I equal want this I'm starting from the second element okay and the exercise is until,

129
00:16:27,960 --> 00:16:35,340
until you reach the, the, the length of the vector, you keep adding it and what you are doing it.

130
00:16:35,340 --> 00:16:43,079
I am adding and updating my second element or third element by adding the value from the previous element.

131
00:16:43,080 --> 00:16:46,770
So this is the same code you have seen from the version.

132
00:16:46,770 --> 00:16:59,330
It's just the C++ version. Okay. And when you run this, uh, uh, uh, I needed to load the micro benchmark.

133
00:16:59,340 --> 00:17:03,950
I did not. Okay. So, uh, sorry.

134
00:17:04,350 --> 00:17:09,960
I think I have to load the other kinds of functions too.

135
00:17:10,800 --> 00:17:19,170
Sorry about that. And now let's really do it then.

136
00:17:21,210 --> 00:17:29,310
These are our version of the to to implementation come some function is a really slow and the

137
00:17:29,310 --> 00:17:38,940
built in comes on function is very fast and the C++ version is a much faster the wise faster.

138
00:17:38,940 --> 00:17:47,350
Well it's short answer is that whenever it involves a loop loop is much more efficient in C++ that's that's the one primary region.

139
00:17:47,790 --> 00:17:56,310
Okay. So that's, that'll that'll I hope that that motivates you to use our trip a little bit more.

140
00:17:56,710 --> 00:18:06,690
Okay. So if you use RCP, I'm going to explain not just shortly that not everything gets faster,

141
00:18:06,690 --> 00:18:11,340
but some, some gets could get slower, but most of them get faster.

142
00:18:11,850 --> 00:18:15,010
This this comes from the SIP packaging.

143
00:18:15,030 --> 00:18:26,219
Okay, so. So C++ languages can address some of these issues.

144
00:18:26,220 --> 00:18:32,340
So the main difference between the C++ and art is that art is an interpretive interpretation.

145
00:18:32,700 --> 00:18:40,770
Language C++ is a compiled language, which means that artists looking processing one nine each each time.

146
00:18:41,130 --> 00:18:49,710
But C++ can look ahead all out of all the code and try to figure out how to optimize your the code when you run it.

147
00:18:50,070 --> 00:18:59,040
Okay. So one example is that when you run a loop instead of running, running, it's out running one line at a time.

148
00:18:59,520 --> 00:19:05,490
C++ can figure out how to utilize the CPU more efficiently by.

149
00:19:06,630 --> 00:19:14,460
It's a code of equalization, so it's when the CPU is doing some calculation in the loop,

150
00:19:15,000 --> 00:19:26,150
then it it has multiple steps, like to copy something from memory to two parts to a location and do some some.

151
00:19:26,430 --> 00:19:31,440
So at that part that using memory and the next part it uses CPU.

152
00:19:31,470 --> 00:19:36,020
It does it does the addition of multiplication. So it has multiple steps.

153
00:19:36,030 --> 00:19:44,370
So if you look at which cycle CPU was used, sometimes it was an item like, oh, it's a copying for memory.

154
00:19:44,370 --> 00:19:49,330
At the time it is not used and CPU is used, it is not used, iPads used and so on.

155
00:19:49,350 --> 00:19:58,170
So that's that typically happens that it simply is not fully utilized because of that sort of periodic cycles.

156
00:19:58,820 --> 00:20:08,219
So if you have a C++ language that does good deprecation, what it does, oh, I, I know that I can, I can do sort of pipeline.

157
00:20:08,220 --> 00:20:13,170
So when I copy this, I can also do this computation in parallel.

158
00:20:13,740 --> 00:20:15,330
Then I can make it a little faster.

159
00:20:15,330 --> 00:20:24,630
So you can, you can do some of those kind of type tedious optimization, then maybe they may not be of your interest, but make the competition fast.

160
00:20:24,810 --> 00:20:30,330
So those are those are one, one good benefit.

161
00:20:32,400 --> 00:20:39,930
And there are when you when you do the function calls, function calls are much lighter in C++ than are.

162
00:20:39,950 --> 00:20:45,810
So if you make a lot of function calls using recursion or something else, ah, is much slower.

163
00:20:47,850 --> 00:20:58,110
And if you want to use some advanced data structures like a tree or table so that there are, you know,

164
00:20:58,410 --> 00:21:07,920
there are two that said you probably didn't didn't take the data data structure class or you may not know what I'm talking about,

165
00:21:08,460 --> 00:21:17,640
but there are many other mass data structure like graphs and many different data structure that's not easy to use in R and C++.

166
00:21:17,940 --> 00:21:26,490
Standard Template Library offers a lot of those basic data structure you need for more sort of advanced programing.

167
00:21:26,850 --> 00:21:34,440
So those could be helpful for for you to implement something using some efficient data structure.

168
00:21:34,620 --> 00:21:40,770
Then I improvise by default because those are good reasons to use RCP.

169
00:21:43,340 --> 00:21:49,540
So all example in the lecture you need to be packaged.

170
00:21:50,000 --> 00:21:55,190
I use the latest version, but anything that is 0.10 point one or after should be fine.

171
00:21:56,510 --> 00:22:00,770
And you need to install us if you package it.

172
00:22:01,160 --> 00:22:10,130
Okay. And one thing very important is that if you try to use RTP in your computer locally,

173
00:22:10,580 --> 00:22:17,480
it may not work out of the box because you need the C++ compiler in your computer.

174
00:22:17,810 --> 00:22:23,210
Okay. So some some of you may already have it, but some of you may not.

175
00:22:23,240 --> 00:22:31,670
So in that case, you need to use install tools or X code to be able to install the C++ component.

176
00:22:31,680 --> 00:22:35,540
So if you install the RCP package.

177
00:22:36,950 --> 00:22:41,450
But if the if this code does not work.

178
00:22:42,230 --> 00:22:46,910
So try to write any of this code in the column and try to copy that.

179
00:22:46,910 --> 00:22:55,760
And if it doesn't work in your local computer, that means that you need to install a C++ compiler and make it make your org to be aware of it.

180
00:22:57,620 --> 00:23:00,680
Okay, so these are the instructions how you do it.

181
00:23:02,270 --> 00:23:12,320
Okay. So, so now let's look at how to use the CPP function here.

182
00:23:12,530 --> 00:23:15,800
Okay. So here is another example.

183
00:23:16,100 --> 00:23:28,550
Okay. Basically what we have here is that we have some function called ADD and this that simply added three integers and a return return the sum.

184
00:23:28,940 --> 00:23:43,190
Okay. So if you have this function, if you run this function, I'm going to run this this out first, then it does return six.

185
00:23:43,370 --> 00:23:46,550
Oh, okay. That does this does a good job.

186
00:23:47,780 --> 00:23:57,379
And if you just usually what what you usually have is that if you have some function that you want to know what how is implemented.

187
00:23:57,380 --> 00:24:02,690
I don't know if you know this, but let's say I want to want to know how the elm function looks like.

188
00:24:03,170 --> 00:24:10,550
Then you can just type the function name and it shows the detail, the implementation of the function like this.

189
00:24:10,940 --> 00:24:14,420
Okay. So you can see how the function looks like.

190
00:24:16,100 --> 00:24:20,990
So in C plus it's a RCP function.

191
00:24:21,500 --> 00:24:24,730
If you do this, then it shows like this. Okay.

192
00:24:25,310 --> 00:24:28,280
So it is it says is the function that takes three arguments.

193
00:24:28,820 --> 00:24:38,780
But inside, you know, basically what it means that, oh, when I call this function, I go to this part of memory and run this binary code.

194
00:24:38,960 --> 00:24:49,730
That's what it means. Okay. So because it's a compile the binary code, I doesn't know the detail, the implementation, but still those can be executed.

195
00:24:49,940 --> 00:24:54,380
Okay. Okay. So.

196
00:24:56,030 --> 00:25:00,890
So let's move on. Let me just make sure that I didn't miss anything.

197
00:25:01,460 --> 00:25:04,830
Okay. Yeah. So, um.

198
00:25:05,570 --> 00:25:11,240
So that's a how. So this is just to explain how a simple, simple function works.

199
00:25:11,240 --> 00:25:18,180
So RCP basically will compile the code you pass as a string and, and make a,

200
00:25:18,890 --> 00:25:27,980
make a part of the memory readable part of memory that saves these binary code to that binary compiler.

201
00:25:27,980 --> 00:25:31,100
The code so machine can understand how to run this function.

202
00:25:32,000 --> 00:25:41,900
But it's not human readable then are basically interfaces creating those by the code and uh,

203
00:25:42,470 --> 00:25:46,780
and the function you just made and that, that's how that works inside our.

204
00:25:47,510 --> 00:25:59,889
Okay. So now we're going to try to just gradually explain how the, how you can implement some functions.

205
00:25:59,890 --> 00:26:08,240
So I'm going to focus on implementing specific functions in, in this, so in, in this example.

206
00:26:08,240 --> 00:26:16,310
So first one is a simplistic tempo where you have no inputs and you have color output.

207
00:26:16,700 --> 00:26:26,990
Okay, here. So it's a it's a the this example is prepared in the back to back with a R function.

208
00:26:27,000 --> 00:26:35,590
So this is a corresponding function. So you can make a function that returns just, you know, you don't even need a written statement if you do one.

209
00:26:35,600 --> 00:26:39,020
L That means that I'm going to return an integer value of one.

210
00:26:39,320 --> 00:26:47,800
K This function doesn't do anything. Just return. One it came out as part of the sea equivalent is this.

211
00:26:48,010 --> 00:26:55,870
Okay. So then it just takes time because it compiles this code into, into the, into binary function function.

212
00:26:56,860 --> 00:27:04,750
So if you are running both of them, if you run this function without any argument, it returns a single value here.

213
00:27:04,910 --> 00:27:08,410
Okay. So. But.

214
00:27:10,280 --> 00:27:15,320
So here. So this one explains some differences.

215
00:27:15,470 --> 00:27:26,830
So. So when you when you make a function, it doesn't.

216
00:27:28,720 --> 00:27:33,630
So the way how you generate the function make or function is a slightly different.

217
00:27:33,640 --> 00:27:39,490
So this is how you how you define the function in C++.

218
00:27:39,490 --> 00:27:41,640
So it it looks like we are calling a function,

219
00:27:41,650 --> 00:27:54,620
but indeed you are actually defining a function and you have to declare the type of the your output and also inputs later.

220
00:27:54,640 --> 00:28:04,600
So you need to. So C++ is a strongly typed language, so it wants to know the type of every variable you define or you're going to use.

221
00:28:04,720 --> 00:28:16,240
Okay. So the type so the type that are compatible with R is a numeric vector integer vector character vector in logical vector.

222
00:28:16,600 --> 00:28:22,179
And most of them, when you when you use some variable, we are in most of the case,

223
00:28:22,180 --> 00:28:25,890
you are actually dealing with a vector even if you think it's a single number.

224
00:28:25,900 --> 00:28:29,890
So you can you can usually test them as a vector.

225
00:28:30,200 --> 00:28:35,470
Okay. And a scholar scholars and vector are equivalent in R.

226
00:28:35,920 --> 00:28:49,000
So for example, in R, you can say, okay, so let's say print one and print C one, one, two.

227
00:28:49,030 --> 00:29:00,820
So if you do this, okay, then this is a one and this is one, two and inside are both of them are treated as a vector.

228
00:29:01,060 --> 00:29:08,290
Okay. But, and for so, for example, if you if you if you print a type of.

229
00:29:11,160 --> 00:29:18,880
One person's type of. One, two, it says both on a double.

230
00:29:19,240 --> 00:29:32,440
When it's a numeric factor. There is no concept of scale in the in in in R, but in C++, Carlos and vectors are different.

231
00:29:32,770 --> 00:29:45,170
So when you have a single value, you need to instead of using dramatic vector integer vector kick, the vector unit is double int or string and bool.

232
00:29:45,190 --> 00:29:48,010
So those are those are the types you need to use.

233
00:29:48,550 --> 00:29:56,680
And instead of using the string object, you can also use a as just as close as to call a column string if you want, if you know how to use it.

234
00:29:58,480 --> 00:30:09,400
Okay. And in in C++, when you want to return it, you need to make a return statement or you can use returns to invert or you can eliminate.

235
00:30:09,400 --> 00:30:17,350
But in C++, you cannot committed. Okay. And a important thing is that every statement should be terminated by the semicolon.

236
00:30:17,350 --> 00:30:22,000
So the semicolon without semicolon, it doesn't recognize as an end of the statement.

237
00:30:22,960 --> 00:30:26,260
Okay. So that's that.

238
00:30:27,460 --> 00:30:37,060
Let's move on. Any questions so far? Okay, so now let's define a function that takes the Scala is input.

239
00:30:37,060 --> 00:30:47,620
Scalar is input in scalar output. So here this example is that, oh, if the take up value of X, if value is greater than zero,

240
00:30:47,650 --> 00:30:52,950
return one, if values are zero, return zero, otherwise return negative one.

241
00:30:52,960 --> 00:30:57,850
So this is sine function basically. So you can do the same thing here.

242
00:30:58,240 --> 00:31:05,680
So the way how you make a statement is very similar with a C, C between C and C++.

243
00:31:05,680 --> 00:31:15,999
But when you define it as a as I said, you need to have a return type and you need to also have an argument type.

244
00:31:16,000 --> 00:31:25,120
So you need to provide this information and it is each of the statement to the semicolon in return so that that's just what you need.

245
00:31:27,330 --> 00:31:39,030
So then if you if you do this sign or sign, see, both of them should return one negative one depending on the sign of input, which looks good here.

246
00:31:40,080 --> 00:31:50,210
Okay. So the next one as a vector input is color output.

247
00:31:50,750 --> 00:31:55,610
So, so when you when you're, when you have an input,

248
00:31:55,610 --> 00:32:10,249
an input that are really long vector and are looking over really long vector is A is inefficient in R, but it's it usually is more efficient in C++.

249
00:32:10,250 --> 00:32:17,540
So you so when you so when you use the like we're not going to teach CMC in our class.

250
00:32:17,540 --> 00:32:30,469
I don't think we have time. But if you use an CMC or Monte Carlo method usually requires a lot of iterations, so and your looping over multiple times.

251
00:32:30,470 --> 00:32:40,370
So in that case if you in this case the using C++ routine can help a lot make you your aluminum a lot faster.

252
00:32:40,370 --> 00:32:42,019
So if you're using any time,

253
00:32:42,020 --> 00:32:52,430
anything like a monte Carlo method or any of your functions requires a huge number of iterations of converting your code into C++ can help a lot,

254
00:32:52,580 --> 00:32:54,230
I think. Okay.

255
00:32:54,800 --> 00:33:12,290
So for example here what so you have a, you're basically doing the seek along, uh, just uh, the going along the, along this, uh, this element.

256
00:33:12,830 --> 00:33:22,700
Okay. And if you do this, the calculation of the, some of them, this is a taking, this is a routine to take the summation of it.

257
00:33:23,690 --> 00:33:27,139
And if you take the you can make a similar kind of thing.

258
00:33:27,140 --> 00:33:31,970
So I'm taking numeric vector here. You can say you can do this or do this.

259
00:33:32,120 --> 00:33:43,040
Okay, both of them are okay. I, I usually it so agip is actually smart enough that it doesn't copy everything here.

260
00:33:43,040 --> 00:33:48,559
So per passing code by value and global reference is not too much of a difference.

261
00:33:48,560 --> 00:33:57,680
But this is a probably, you know, this probably give you a peace of mind, but in this case, it doesn't make a difference.

262
00:33:58,190 --> 00:34:14,209
So so here you take, calculate the size of the array and go go through that array, uh, and calculate the total.

263
00:34:14,210 --> 00:34:18,080
You need to define all the variables with a type. And we took the total here.

264
00:34:18,080 --> 00:34:21,440
So it's a, it's a good translation between these two.

265
00:34:23,000 --> 00:34:32,270
So then what, what this is intended to is that I have a, some R and some C now and a let's try to evaluate how fast each algorithm is.

266
00:34:32,270 --> 00:34:35,720
And, you know, the built in are with them. Some should be fast.

267
00:34:35,810 --> 00:34:38,299
Right. So how, how does it compare?

268
00:34:38,300 --> 00:34:48,890
So if you see again some are version of some is very slow, but the summation using built in summation is obvious is obviously fast.

269
00:34:49,340 --> 00:34:52,790
And so RCP version of it is quite fast.

270
00:34:52,970 --> 00:34:57,800
Okay. So without, without, without having any any further optimization.

271
00:34:59,240 --> 00:35:02,270
Okay. Any questions so far?

272
00:35:05,250 --> 00:35:10,650
Okay. Uh. Uh, yeah.

273
00:35:10,930 --> 00:35:14,150
I think I made a mistake here.

274
00:35:14,160 --> 00:35:20,940
So is RSVP button is, uh. Is faster that I think I meant the faster than our version.

275
00:35:21,090 --> 00:35:25,410
Okay, so if you have a vector input in vector output here.

276
00:35:25,740 --> 00:35:31,800
Okay. Uh, so this is an interesting example.

277
00:35:32,260 --> 00:35:44,130
Okay. So you have, uh, so this, this function is basically calculating the, the squared differences between our two known.

278
00:35:44,550 --> 00:35:48,630
Oh, well, yeah, it's pure differences. Not so skirt squared.

279
00:35:50,010 --> 00:35:55,140
Yeah. So the different calculate the difference is square and.

280
00:35:57,190 --> 00:36:04,840
So then this one is pretty easy to implement.

281
00:36:05,050 --> 00:36:09,190
Okay. So this is how we implement in our.

282
00:36:09,730 --> 00:36:19,240
Well, now, when you have when you have a vector like this, the nice thing about R is that you have a lot of function that works right out of a vector.

283
00:36:19,240 --> 00:36:23,030
So you don't have to do it or loop. Right? Just do this.

284
00:36:23,050 --> 00:36:31,710
So this is how you do it. But if you implement the C++ in this particular case, you need to create a vector that that is output vector.

285
00:36:31,720 --> 00:36:40,840
So I'm creating the vector the size of and and try to fill in each of those elements one by one.

286
00:36:41,650 --> 00:36:46,320
So that's how you usually would do it. But the nice thing is the loop should be very fast.

287
00:36:46,390 --> 00:36:54,820
So this should be good enough. Good, good as well. So in this case, you have two versions of the same code.

288
00:36:54,940 --> 00:37:02,620
Which one do you think is best? Faster. Well, shouldn't C++ be faster?

289
00:37:03,310 --> 00:37:16,480
Let's see. Actually, that takes a long time because it's a million object and it's a calculated thousand times.

290
00:37:16,920 --> 00:37:25,030
Okay, so so if you see this our version and see version, this is minimum time, median time,

291
00:37:25,040 --> 00:37:32,110
the median time, the hour version is faster, 6.7 seconds in the 9.2 to 5 here.

292
00:37:32,680 --> 00:37:48,079
Why do you think our body any faster? What we are trying to out is using recreation.

293
00:37:48,080 --> 00:37:56,420
Very good. So this one is. This security function takes the vector right in and do back operation.

294
00:37:57,200 --> 00:38:03,290
And look look how the square root of function was implemented in security.

295
00:38:05,690 --> 00:38:08,790
And what does it say? Have you have it?

296
00:38:09,270 --> 00:38:15,960
Have you done before this that primitive? Is that this is something that is a serious and implemented impulse.

297
00:38:16,010 --> 00:38:24,220
Right. That that's what it means. So it has a lot of functions that is implemented to improve the efficiencies.

298
00:38:24,470 --> 00:38:31,910
Okay. So that's how our is trying to be efficient. So in this case, this function is implemented in low level language.

299
00:38:31,910 --> 00:38:39,190
It doesn't use loop. So that's why. So if you change this security without just a loop, that that'll be very slow, right.

300
00:38:39,200 --> 00:38:43,460
So yeah, it does use some built in function that is well that price.

301
00:38:43,470 --> 00:38:47,570
So that's why. Right. So then you don't need to reinvent the will.

302
00:38:47,570 --> 00:38:54,050
So if you know that, oh, there's already a security function that does what I need efficiently,

303
00:38:54,440 --> 00:38:58,990
you don't have to implement these things again in C++, just do the same thing.

304
00:38:59,000 --> 00:39:07,910
Right? So in this case, well, this is not too slow, but this is not probably what are this a complex implementation yourself?

305
00:39:08,090 --> 00:39:11,410
Right. So. Okay.

306
00:39:11,980 --> 00:39:16,980
So. So whenever you can use this primitive function, you can just use it.

307
00:39:16,990 --> 00:39:22,230
You don't have to implement everything in C++. Okay.

308
00:39:22,980 --> 00:39:29,550
Uh, next one, matrix input vector output.

309
00:39:29,850 --> 00:39:34,800
Okay. Um, so for this type l I also it's a manifester.

310
00:39:34,890 --> 00:39:47,000
Okay. So, uh. So this one is what what I'm going to compare with is a real sums.

311
00:39:47,320 --> 00:39:53,620
Then you know what the rossum's starts, right? So rossum's take the sum of each of the row and.

312
00:39:54,610 --> 00:39:59,000
Well, maybe. Maybe I can make it a little bit more interesting.

313
00:39:59,560 --> 00:40:07,110
Okay, so maybe, uh, but also, I'm going to just make a rossum's too.

314
00:40:07,130 --> 00:40:16,870
I'm just improvising now. Okay. And you can just say that, oh, I'm going to just apply x one.

315
00:40:16,870 --> 00:40:23,890
So this is this is same as Rossum, basically, right? So this is low sums to I'm going to make it okay.

316
00:40:24,340 --> 00:40:29,080
And let's add blossoms, too. I'm curious to know what what's going to happen.

317
00:40:29,800 --> 00:40:35,260
So because you have roles and function, you have this apply that does the same thing basically.

318
00:40:35,980 --> 00:40:42,730
And C++ Virgin you you. So when you take the matrix, you need to say this is a matrix, not a vector.

319
00:40:42,980 --> 00:40:49,950
Okay. So yeah, it does, it does need to know what, what time it is.

320
00:40:49,960 --> 00:41:00,010
So then you can get at the number of rows and number two columns and make make a output as a vector.

321
00:41:00,670 --> 00:41:06,790
Okay. And initialize each of the elements as zero and add them.

322
00:41:07,120 --> 00:41:16,090
So when you when you access. So one thing you might want to know is that one your access matrix, you need to use this for the parenthesis.

323
00:41:16,720 --> 00:41:22,180
Previously, when you access the vector, you, you use this a square bracket.

324
00:41:22,480 --> 00:41:26,650
So. So it's the way how your access element is is slightly different.

325
00:41:27,760 --> 00:41:32,379
And yeah. So. So that's.

326
00:41:32,380 --> 00:41:37,900
That's that. Okay, so let's see, let's compile this and see how this works.

327
00:41:39,640 --> 00:41:43,090
Okay. Then low some 18 seconds.

328
00:41:43,090 --> 00:41:48,490
Well, the let's look at the immediate mean meantime median time.

329
00:41:48,610 --> 00:41:52,450
So 21 seconds and 45 seconds and 18 seconds.

330
00:41:52,690 --> 00:41:58,990
Okay. So. Well, some to apply function is slower than Roseanne.

331
00:41:59,000 --> 00:42:10,930
So if you have use apply function if could consider changing to low sums that that's a slightly faster rossum's C is actually doing really well here.

332
00:42:11,380 --> 00:42:18,850
So apparently this is not I thought it was a slow but it was fast so.

333
00:42:19,090 --> 00:42:25,030
But you know in the same order so the you don't need to reinvent the wheel just to make it faster.

334
00:42:25,630 --> 00:42:28,660
But it does make this operation is quite fast.

335
00:42:29,320 --> 00:42:37,240
Just going over there over the over the matrix element is pretty, pretty quick.

336
00:42:37,780 --> 00:42:40,809
Obviously, matrix on operations is not going too fast.

337
00:42:40,810 --> 00:42:45,430
So I haven't talked about how to use the matrix libraries.

338
00:42:45,430 --> 00:42:52,719
Like there's a there's an alien armadillo and those are a little bit more, more things to teach.

339
00:42:52,720 --> 00:43:00,760
So I didn't cover it here. But those are the RCP has a package that that can help handle the Matrix operation efficiently,

340
00:43:01,570 --> 00:43:08,500
but that's not necessarily faster than R because the underlying function that uses all the data class.

341
00:43:09,070 --> 00:43:12,910
So a matrix operation itself should be pretty comparable in my opinion.

342
00:43:14,800 --> 00:43:21,670
Okay. But so well, these are good, but you're not going to do that every time.

343
00:43:21,670 --> 00:43:28,680
This is so ugly, right? So you need to put and put all this tree copy and paste in your function.

344
00:43:28,700 --> 00:43:40,020
So this is yeah. When we're doing this and we parsing matrix, is it maintaining the column measure and whether they are all very good question.

345
00:43:40,030 --> 00:43:45,430
I think it does so. It does so it doesn't make a make a clone of the matrix.

346
00:43:45,460 --> 00:44:01,180
So what, what this is doing here is that so all is very, very how I was seen, very sophisticated language, you know, because I mean,

347
00:44:01,240 --> 00:44:07,330
if I if I put in the present way so it try to avoid the copying unnecessary copying so

348
00:44:07,330 --> 00:44:12,370
worried about why it does is if you do this it actually doesn't duplicate the matrix.

349
00:44:12,650 --> 00:44:20,710
It actually points where the matrix is located and try to use it until you update it.

350
00:44:21,100 --> 00:44:25,180
Once you updated it, make a new copy of it, I think.

351
00:44:25,930 --> 00:44:32,080
And I I'm not under pressure when you make a new new matrix like this.

352
00:44:32,920 --> 00:44:40,560
So if you make a new matrix the is a column major Romain Major so I'm not 100% but I think all the RC people.

353
00:44:40,630 --> 00:44:44,110
Matrix is a respecting they'll call a major order.

354
00:44:44,120 --> 00:44:47,379
So that's what I think. I have to double check. You can.

355
00:44:47,380 --> 00:44:50,920
You can. You can you can probably check it now faster than me.

356
00:44:51,790 --> 00:45:02,840
But that's what I think. But I don't think so when and usually put put art and C++ talk has a ability to handle both the column major and road majors.

357
00:45:02,860 --> 00:45:07,420
Which one is default? Basically? Yeah. Okay.

358
00:45:10,670 --> 00:45:17,780
So, uh, yeah. So when you, when you make a, you know, you're not going to do this ugly part.

359
00:45:18,620 --> 00:45:26,209
And so what, what you want to do is I want to write my C++ code into a separate file,

360
00:45:26,210 --> 00:45:33,290
and I just want to be able to use a nice I.D. and everything to edit it in a fancy way.

361
00:45:33,980 --> 00:45:46,340
So how do you do it? Okay. Well, I am so I'm going to show that I'm doing some some some really silly thing now because the the limitation

362
00:45:46,340 --> 00:45:52,820
of using these to code level Jupyter Notebook is that you cannot load some external file easily here.

363
00:45:53,030 --> 00:45:58,550
So I am just trying to create a file.

364
00:45:58,890 --> 00:46:02,540
Okay. So this is a very stupid way, but you know, it works.

365
00:46:02,540 --> 00:46:05,660
So what I'm going to this, I'm going to create a file like this.

366
00:46:05,780 --> 00:46:14,290
Okay? So usually you wouldn't do this, you just type this file in your in your art studio and that's how you do.

367
00:46:14,310 --> 00:46:17,780
But because I don't have that interface, I'm going to do this here.

368
00:46:19,280 --> 00:46:23,179
So basically you're you're writing a file very similar.

369
00:46:23,180 --> 00:46:33,950
So this part is exactly similar to what you would do in the in this just a CPU inside a step function.

370
00:46:34,700 --> 00:46:42,410
But if you want to load some if you want to some form save some function in C C++ in want to use in RCP,

371
00:46:42,920 --> 00:46:49,969
you need to provide some additional information so that RCP can properly recognize it.

372
00:46:49,970 --> 00:46:54,410
And this is the line you need to add. Okay, so what does it do?

373
00:46:55,640 --> 00:47:00,620
So you need to include RCP, that h pedophile.

374
00:47:00,890 --> 00:47:09,520
Okay, it goes up all these numeric vector and some there is a some specific part that that only can be recognized

375
00:47:09,560 --> 00:47:18,200
when you use RCP and in C++ it may not recognize until you unless you properly import these headers.

376
00:47:18,200 --> 00:47:27,290
So you need to, you need to include them to specify this is something our RCP should recognize and

377
00:47:28,790 --> 00:47:35,389
this using namespace RCP is basically what it does is that if you didn't have this,

378
00:47:35,390 --> 00:47:43,940
this, you have to, you have to do this every time, whenever you, you use something that that is specific to our sleep.

379
00:47:44,450 --> 00:47:56,750
So if you don't want to do this, then just if you do using a namespace RCP, you allow it allows to omit those namespace which is RCP column column.

380
00:47:57,380 --> 00:48:09,740
So that that's it. In this RCP column, click export is a line that that makes you makes are to recognize this function.

381
00:48:10,520 --> 00:48:17,140
Okay. So if you let's say you have your C++ code has like ten functions.

382
00:48:17,830 --> 00:48:22,360
But I want to. But I don't want ARG to know all these functions.

383
00:48:22,370 --> 00:48:24,520
You could have that kind of case.

384
00:48:24,670 --> 00:48:33,980
I have a very complicated C++ code that has multiple functions, but I have only one function that is actually that will be called in r k.

385
00:48:34,060 --> 00:48:37,330
Other functions are just the code inside the C C++.

386
00:48:37,840 --> 00:48:47,680
In that case, you need to add only this line only to the only to the function that will be visible by R.

387
00:48:48,970 --> 00:49:00,120
Then if you do this, RCP will do some special compiling so that R can so it adds some some some special code in the inside

388
00:49:00,130 --> 00:49:09,220
RCP package so that I can recognize this function as if it's just a regular function you can call.

389
00:49:09,610 --> 00:49:12,430
So that's, that's the magic behind the hardship.

390
00:49:13,060 --> 00:49:21,700
So you need to add this line, but you make sure to add this line only the part of the function you need.

391
00:49:21,700 --> 00:49:32,620
Otherwise, some of the function that you know you are just using inside the inside or inside the C++ code, they may not be properly supported.

392
00:49:32,740 --> 00:49:38,170
So you need to you need to have some rules for them, for it, recognize what the numeric vector is.

393
00:49:38,170 --> 00:49:42,660
But if you define your own class, it does not recognize what it what it is.

394
00:49:42,670 --> 00:49:48,940
So some special type you may not recognize. So just use our zip code.

395
00:49:49,010 --> 00:49:53,139
Export to the function you really want to use inside.

396
00:49:53,140 --> 00:49:54,430
Inside. Ah. Okay.

397
00:49:54,910 --> 00:50:05,590
So when I did this because I did this cat and file thing, I create a file example that type that contains this thing, this, this content.

398
00:50:05,590 --> 00:50:07,990
So I'm going to show you that,

399
00:50:08,290 --> 00:50:20,260
oh now I have some file example the CP here and you can obviously print out the content of the file that the content of file looks like this.

400
00:50:20,440 --> 00:50:27,820
Okay. Now what I want to do is and now I would like to compile the C++ function using source copy.

401
00:50:28,240 --> 00:50:34,630
So instead of the using step function, which is just take the string as a source code,

402
00:50:35,020 --> 00:50:44,709
this one is more elegant way to import any C++ function and you can easily reuse it because it was saving a file.

403
00:50:44,710 --> 00:50:49,510
You can you can import in different, different place to place in your code.

404
00:50:49,750 --> 00:50:56,290
Okay. And then if you run it, this is a mean C in the mean.

405
00:50:56,950 --> 00:51:00,250
Well, I was surprised. It means is faster. Okay. Interesting.

406
00:51:00,400 --> 00:51:04,360
Okay. But it is faster. Okay. I think it minces problem.

407
00:51:04,420 --> 00:51:08,110
Well, I don't I don't know why is best, but it's a it's interesting.

408
00:51:08,200 --> 00:51:15,210
Okay. But anyway, both of them are fast. Okay. Okay.

409
00:51:17,580 --> 00:51:21,830
So that's the part I just mentioned. And this is a source tip.

410
00:51:21,840 --> 00:51:30,840
You need to add this to part. Okay. And you also need to need to export through the RCP export line.

411
00:51:31,230 --> 00:51:35,910
It's a comment line. So it looks looks very strange and it's very tricky about that.

412
00:51:35,920 --> 00:51:44,819
You really need to add in a very specific way, slash, slash, and you need a one space here and a two to double bracket.

413
00:51:44,820 --> 00:51:50,400
So you need to have exactly the same line, which this is a matching line you need.

414
00:51:51,630 --> 00:51:55,660
Okay. Okay.

415
00:51:55,660 --> 00:52:01,180
So now that we're almost done and let's talk about the attributes in other classes.

416
00:52:01,780 --> 00:52:11,670
Well, you know that our has, uh, you know, many, many different things like that, not just, uh.

417
00:52:13,080 --> 00:52:17,090
You know, not just the basic data type you have, at least in data frames and so on.

418
00:52:17,100 --> 00:52:24,450
So I just wanted to explain a little bit. So. So all of all object has some attributes.

419
00:52:24,630 --> 00:52:34,860
So you can actually add attribute and attribute names in the name of attributes.

420
00:52:34,870 --> 00:52:40,110
So what it does here is that, oh, let's say this is attributes.

421
00:52:40,410 --> 00:52:44,390
Okay. Is actually create a vector, which is just a vector.

422
00:52:44,400 --> 00:52:53,820
One, two, three. But when you have a when you have one, two, three, I want to I want to have like those column names.

423
00:52:53,820 --> 00:52:59,430
So sometimes when you have a vector, you want to you can add the name in the each of the elements.

424
00:53:00,120 --> 00:53:11,730
So what I want to do is I'm going to make a name of this element, ABC And I also want to add an attribute just to make my attribute in classes.

425
00:53:11,760 --> 00:53:23,710
This is just an arbitrary value that if you do this, then it does modify the object in this way.

426
00:53:23,730 --> 00:53:33,170
So basically you recognize this not just 1 to 3, but you can have the modify the the column name here.

427
00:53:33,180 --> 00:53:36,720
So instead. So in vector you can do that too.

428
00:53:38,250 --> 00:53:45,250
So and you can add. So this additional attribute in the class is added here.

429
00:53:45,270 --> 00:53:48,360
So this is an entire object.

430
00:53:48,630 --> 00:53:51,570
I know that you're not using attribute a lot,

431
00:53:51,570 --> 00:54:02,610
but this is a very basic principle of how you can modify a are an object that can be recognized in R within RCP.

432
00:54:02,910 --> 00:54:11,300
Okay. So why do I do that? Well, then you can use that to recognize that is not a built in type.

433
00:54:11,310 --> 00:54:21,300
So there are list data frames and you know, the those new data types you can you can use.

434
00:54:21,660 --> 00:54:29,600
So we are not going to go go all the details like how to read DataFrame, how to write DataFrame, so on.

435
00:54:29,610 --> 00:54:37,020
You can easily Google that. But this example is basically what what is trying to do is this.

436
00:54:37,290 --> 00:54:41,980
Okay. So I have a.

437
00:54:44,010 --> 00:54:52,740
So, so I'm going to create an X and Y, just random value and the runner linear model element.

438
00:54:52,950 --> 00:54:59,310
Okay. So then is it the object? Return by alone is a pretty complex object.

439
00:54:59,550 --> 00:55:12,600
Right. But what I want to do is I want to calculate the, you know, calculate a specific value from that fitted value in the trade to return that.

440
00:55:13,140 --> 00:55:17,160
So that's what I wanted to do. What I then this fit is a complex object.

441
00:55:17,160 --> 00:55:18,600
So how do I put put it in?

442
00:55:19,560 --> 00:55:30,600
So this empty function is basically take the, take the output from Elm, which is in this case, the list that you can actually try to see.

443
00:55:31,030 --> 00:55:36,180
Well, let me let me actually show you. So why do I do this?

444
00:55:36,540 --> 00:55:39,870
And you can say type of fit.

445
00:55:43,060 --> 00:55:47,350
Then. So this is a list. So you take the list.

446
00:55:48,100 --> 00:55:58,209
Take take them as a list. And you can test whether using that innate function or is this actually calculate from Elm than otherwise.

447
00:55:58,210 --> 00:56:03,520
Even though this is the list, I don't know how to parse this information, so I'm going to return an error.

448
00:56:03,670 --> 00:56:06,940
So you can do that. And you can take the.

449
00:56:07,690 --> 00:56:13,599
So this is a list. So you can actually take the each of the element by name.

450
00:56:13,600 --> 00:56:20,410
So here you can take the residual and feed it values here so that that as a numeric vector so you can do this.

451
00:56:21,730 --> 00:56:26,890
And after that, calculate the size. And what I want you to do is I want you to do this.

452
00:56:26,910 --> 00:56:34,569
I want to calculate this relative error as a summation of the residual divided by 50 value plus residual.

453
00:56:34,570 --> 00:56:41,440
So that that's what I want you to do then. So this is a very specific way to calculate it and the returns return this thing.

454
00:56:41,590 --> 00:56:46,180
Okay. So that what you can do.

455
00:56:49,490 --> 00:57:00,380
Then if you if you run this function, it does recognize that value that this this type properly and return the value you desire to calculate.

456
00:57:00,440 --> 00:57:06,550
So this is one example to how to handle complex data type in our CTP.

457
00:57:08,090 --> 00:57:11,840
But there are many other examples as such. Oops.

458
00:57:14,210 --> 00:57:19,370
Okay. So some of the additional information.

459
00:57:20,360 --> 00:57:26,470
So. I'm sorry.

460
00:57:26,980 --> 00:57:36,170
Oh. So RCP provides a class at least in data frames, so you can use them.

461
00:57:37,280 --> 00:57:41,540
They are useful for output and input. I mean more useful you get.

462
00:57:41,540 --> 00:57:45,410
You oftentimes wanted to create a dataframe in the returns.

463
00:57:45,690 --> 00:57:58,549
So one thing you can actually do. One one cool thing I think you can do is that you can use RCP to load a specific, very complex,

464
00:57:58,550 --> 00:58:03,350
complex input file you have like have you done that with the table is very slow, right?

465
00:58:03,650 --> 00:58:08,209
Sometimes if you read a very large file in R so many,

466
00:58:08,210 --> 00:58:14,570
many of you are using data that people have packaged to use every is that I guess I don't know if you do that I do that.

467
00:58:15,200 --> 00:58:19,130
So those are those all actually implement in RCP.

468
00:58:19,550 --> 00:58:23,960
So let's say I have a huge data file that actually in the very customized format.

469
00:58:24,320 --> 00:58:30,380
No, our function can read it and I don't want to read that with R because it is so slow.

470
00:58:30,920 --> 00:58:34,910
Then you can make the RCP function to be the file so fast that you can do that.

471
00:58:35,170 --> 00:58:44,380
Okay. So and when you do that, you want to return a data frame usually so you can create a data frame and inside RCP function and return it.

472
00:58:44,730 --> 00:58:54,170
Okay. So in a recent data frame can contain arbitrary class and the C++ need to know what what type you have.

473
00:58:54,170 --> 00:58:56,600
So you need to just be more structured.

474
00:58:56,600 --> 00:59:06,860
But as as long as you allow RCP to understand the data structure, it should be able to parse that and try to extract the right information.

475
00:59:07,190 --> 00:59:19,300
Okay. So, so object K by elm in this case, you know, you can recognize it, but you need to have a prior understanding of how the data was structured.

476
00:59:19,310 --> 00:59:28,340
It's probably harder for RCP to parse out some arbitrary data structure without prior knowledge.

477
00:59:28,560 --> 00:59:40,120
Okay, so this is a, uh, of okay, this is a bit less than data, but this is a data frame of the general.

478
00:59:40,180 --> 00:59:44,750
We just did this. Sorry. And now the last part that that does function.

479
00:59:44,870 --> 00:59:54,760
Okay. So this is just a this is not useful, practical, useful, but I'm just trying to show how you can do it.

480
00:59:54,970 --> 00:59:58,970
How what? How you can use this r object.

481
00:59:59,690 --> 01:00:06,649
Sometimes you don't need to know what I want, what thing I just got passed on.

482
01:00:06,650 --> 01:00:15,320
I just need to pass it again to some, some other function. Okay, so in this case, our, our can.

483
01:00:15,650 --> 01:00:19,430
And so RCP can recognize a function as a function class.

484
01:00:20,300 --> 01:00:24,740
And this is a, this is this is n, right?

485
01:00:24,740 --> 01:00:29,360
So then what I want to do is that this, this is kind of silly.

486
01:00:29,840 --> 01:00:37,400
You take the function, this could be R function usually, and I'm going to call this function inside my R zip code.

487
01:00:37,670 --> 01:00:44,360
Sometimes you want to do it right. So I have RCP code about I need to call R function inside my RCP code.

488
01:00:44,360 --> 01:00:49,520
Sometimes you need you need to do it there when you return it because this is genetic.

489
01:00:49,970 --> 01:00:55,900
I don't know if this f of end will return released data frame or whatever.

490
01:00:55,910 --> 01:01:02,870
I don't know what's going to return. Then what you can do is that I'm going to say I'm going to return R object.

491
01:01:02,960 --> 01:01:10,100
That's a very general object. So you can return anything like integer double or class dataframe.

492
01:01:10,100 --> 01:01:24,320
So it doesn't doesn't matter. It should always work. Okay, so if you do this okay then this is basically if you the seek along for example.

493
01:01:24,500 --> 01:01:28,219
Okay, I don't know why it did hundred.

494
01:01:28,220 --> 01:01:31,370
This doesn't make sense, but it's less than one 1/100.

495
01:01:31,460 --> 01:01:37,850
Right. Okay, so if you do this, then it's going to do the same thing.

496
01:01:37,850 --> 01:01:41,510
Basically a kick along is a iterating from 1 to 100.

497
01:01:41,990 --> 01:01:45,840
And this this is actually. No, it takes that integer.

498
01:01:45,840 --> 01:01:49,700
I'm sorry. It cannot take the vector. Okay, so.

499
01:01:50,150 --> 01:01:58,100
Well, this function 600 doesn't, doesn't really do anything, but it just a return one because of the size of the vector is one.

500
01:01:58,790 --> 01:02:08,959
But it does it does work. It's a hugely inefficient, obviously, because you are calling some R functions that are steep and return them to R again.

501
01:02:08,960 --> 01:02:14,630
So it's a it's a waste of waste of these all these interfaces.

502
01:02:14,630 --> 01:02:23,330
So it is much slower, but it does work and it does it does basically do the same thing with the single long classic along with do.

503
01:02:23,330 --> 01:02:28,670
So if you look at the type of this output, is it returning integer?

504
01:02:28,780 --> 01:02:37,410
Properly you had even though you said this is I object because it it doesn't care what, what,

505
01:02:40,530 --> 01:02:48,089
what type of output you are returning does it returns and the I should figure out what type it is with within the

506
01:02:48,090 --> 01:02:59,190
routine so it does in this example looks strange but is a good temple of how art and RCP can interact with each other.

507
01:02:59,190 --> 01:03:04,139
So sometimes RCP can call something in R and return to our again.

508
01:03:04,140 --> 01:03:08,160
Right. So that that is possible. RCP is not like close the world.

509
01:03:09,720 --> 01:03:12,030
So that's what I wanted to say.

510
01:03:12,660 --> 01:03:21,060
So well this is a you can also instead of doing the C along, you can do something else like Ireland for example, and it does still work.

511
01:03:21,310 --> 01:03:29,580
Okay as you expect. Okay. So and in this case, obviously, it's returning a vector, right?

512
01:03:29,610 --> 01:03:34,710
And you can you can do anything else. Okay. Okay.

513
01:03:36,090 --> 01:03:45,660
So that's pretty much all in in in this RCP part, but this lecture is not done yet.

514
01:03:46,230 --> 01:03:53,690
Okay, any question? Okay.

515
01:03:54,680 --> 01:04:08,970
So. So now I'm going to talk about the how to write our package so that which is important for the project.

516
01:04:09,000 --> 01:04:12,090
So in the project you need to write in our package that's requirement.

517
01:04:12,810 --> 01:04:22,290
You are strongly encouraged to you are strongly encouraged to post your art package into some public space like GitHub.

518
01:04:22,530 --> 01:04:29,270
Okay. So that it's your work is more readable, but that that is not in part.

519
01:04:29,370 --> 01:04:37,050
And so and putting your package in the GitHub is actually relatively easy.

520
01:04:38,010 --> 01:04:45,690
If you would just follow the standard just to the extent that it used to have tools that actually takes care of it.

521
01:04:45,690 --> 01:04:55,050
So hopefully that's not too complicated. Writing our packages could be complicated, some of the people, especially when you haven't done it before.

522
01:04:55,200 --> 01:04:58,170
So I'm going to just to give an example of how you can do it.

523
01:04:59,430 --> 01:05:05,430
So so our package system is one of the key factors of the overall success of the project.

524
01:05:05,610 --> 01:05:14,069
And you can make a package to allow easy and transparent and cross-platform the access of your code.

525
01:05:14,070 --> 01:05:18,360
And you can extend that extend our base system by, by using the package.

526
01:05:19,350 --> 01:05:27,420
And our packages are, you know, basically a collection of functions and data sets you can arbitrarily define in your own name.

527
01:05:27,630 --> 01:05:33,090
Okay. So this is, of course, like you need to follow, okay?

528
01:05:33,090 --> 01:05:37,260
And I'm going to show a demo today and I hope that works.

529
01:05:38,040 --> 01:05:41,369
Sometimes it's just not it's some some step.

530
01:05:41,370 --> 01:05:52,560
It's not going to work exactly right. But I think and I know the difficulties that you when you when you work with a so heterogeneous environment,

531
01:05:52,860 --> 01:06:00,120
some of we are using Windows with our version of 3.4, something I don't know and some about using the 4.2.2.

532
01:06:00,810 --> 01:06:07,680
So we just need to be aware that this can break in some, some cases.

533
01:06:07,680 --> 01:06:11,910
But I do think this should work in most of the cases.

534
01:06:13,530 --> 01:06:18,360
Okay. So what do you need to do? This is step by step instruction.

535
01:06:18,600 --> 01:06:22,770
You need to install these three packages before starting.

536
01:06:22,770 --> 01:06:28,080
So this depends on these packages. So I you my computer is already installed in your computer unit.

537
01:06:28,180 --> 01:06:34,410
Sorry. Okay. And our packages, you need to have your, our function, right?

538
01:06:34,650 --> 01:06:38,910
So you need to write your, our function into our file.

539
01:06:39,240 --> 01:06:46,470
So in the, in, in today's lecture, I think I had that here now.

540
01:06:47,190 --> 01:07:01,560
So if I, if you I had this 2 to 1 hour, one hour for our file and one C++ file, you can download it, but it's also in the slides, you can type it.

541
01:07:02,310 --> 01:07:08,610
So you need to have something you want to basically packages.

542
01:07:09,240 --> 01:07:17,460
Okay. And, and the next thing you need to do is to document your function in our option to style.

543
01:07:18,210 --> 01:07:30,210
So a document, if you document this way, then our, you know, our oxygen too will create a documentation automatically for you.

544
01:07:30,210 --> 01:07:34,350
So you don't have to write your own documentation, which it takes a lot of time.

545
01:07:34,590 --> 01:07:41,040
Okay. And you create a package. So those are two things you need to prepare the prepare your source code,

546
01:07:41,250 --> 01:07:50,610
document it accordingly with the standard format and run the package the skeleton to create a package and modify some,

547
01:07:50,970 --> 01:08:00,690
some, some files and add the license and, you know, do so through the steps and the package will be created.

548
01:08:00,690 --> 01:08:03,830
So that's what we're going to do today. Okay.

549
01:08:06,260 --> 01:08:07,670
So let's do it. Okay.

550
01:08:08,300 --> 01:08:17,330
So the the function I'm going to package is this first simple linear regression we covered in the very earlier part in the lecture.

551
01:08:17,720 --> 01:08:28,370
So it's basically does a linear regression between two vectors, but it is supposed to be much more efficient than what you should provide.

552
01:08:28,640 --> 01:08:34,590
So I have that, uh, conveniently ready here.

553
01:08:34,610 --> 01:08:38,900
So. So this is. This is in my current directory.

554
01:08:39,050 --> 01:08:45,170
Okay. You need you obviously need to go through the code to set you're working directly to,

555
01:08:45,440 --> 01:08:56,080
to contain this file and you need to start changing working directory to the, to the directory you wanted to create packages under.

556
01:08:56,660 --> 01:09:01,400
Okay. So this file is.

557
01:09:01,790 --> 01:09:11,610
So this is original code, but you need to document this code to be able to people can see how to use it.

558
01:09:11,630 --> 01:09:17,600
If you make a package that nobody else will can can use is because of documentation.

559
01:09:17,600 --> 01:09:20,840
That'll be a shame. So how they do it.

560
01:09:20,930 --> 01:09:29,150
So. Well, the first line. So the log into documentation starts with sharp.

561
01:09:30,260 --> 01:09:37,280
So the comment comment about this, you need to have these single code get sharp.

562
01:09:37,280 --> 01:09:42,050
Single quote is a is a magic the line to start with.

563
01:09:42,310 --> 01:09:48,790
Okay. So then after that it will be recognized as our option to start document.

564
01:09:48,800 --> 01:09:56,000
You can look at the package, to look at the whole explanation of how to write, to write it.

565
01:09:56,000 --> 01:10:02,840
But basically, you you give up, give a brief description of what the what the function should look like.

566
01:10:03,350 --> 01:10:07,280
And you need to describe parameter with the column keyword.

567
01:10:07,520 --> 01:10:12,170
Okay. And you need to describe the return value with the return keyword.

568
01:10:12,950 --> 01:10:16,880
You can also give an example and I'll give some examples,

569
01:10:17,600 --> 01:10:27,290
and you also can specify what kind of dependency it has, and you can say this is important, you need to export.

570
01:10:27,980 --> 01:10:34,820
So when you say export limit, this means that this is going to be exported to the packages of package.

571
01:10:34,830 --> 01:10:43,640
Users can use this function if you don't have export, it's not it's not going to be usable for the packages or so and any function.

572
01:10:43,660 --> 01:10:47,750
So your from your article can have like five different functions.

573
01:10:47,750 --> 01:10:55,700
But if you want to, if you want your users to use only two of those functions, just that have,

574
01:10:55,700 --> 01:10:59,540
that have an export, you need only those two functions, but not nothing else.

575
01:10:59,750 --> 01:11:03,820
But you can still document other functions if you wish. But.

576
01:11:05,300 --> 01:11:15,020
So. So then what I'm going to do is this package, the skeleton I'm going to do this year package a skeleton.

577
01:11:15,590 --> 01:11:19,999
And here my so my simple item is a package name.

578
01:11:20,000 --> 01:11:23,630
So you can you can make some other package name if you want.

579
01:11:24,740 --> 01:11:29,420
And you can specify quote files here.

580
01:11:29,430 --> 01:11:42,319
If you you can always add code, you can actually copy your files simple are so you can after create in package you can add more files inside.

581
01:11:42,320 --> 01:11:48,200
So it's all it's definitely a lot but if you have already file available you can just write it this way.

582
01:11:48,980 --> 01:11:52,760
Then if you go it created this directory.

583
01:11:52,760 --> 01:11:58,460
Now my simple alarm and it create a sort of texture like structure here.

584
01:11:58,610 --> 01:12:05,630
Okay, so that's the first thing you need to do, okay? And you need to do some work.

585
01:12:05,870 --> 01:12:13,790
So, well, let me actually change my working directly to this correctly because I need to go inside this directory.

586
01:12:14,030 --> 01:12:17,329
So set WD to destroy create that.

587
01:12:17,330 --> 01:12:23,130
That's what there's one thing you need to do. And after that there's a description file here, okay?

588
01:12:23,690 --> 01:12:36,320
And you need to write a description. So. Well, what this package does, this is a fast vignette I'm just making up and who wrote it?

589
01:12:36,830 --> 01:12:46,040
You know, you can write your name will complain to you know you can you can write someone else's name.

590
01:12:46,040 --> 01:12:53,900
You're going to like to do that in a description.

591
01:12:55,400 --> 01:13:00,469
You know this and I'm going to just brief because this is not going to be real.

592
01:13:00,470 --> 01:13:03,560
We have packages a license is under.

593
01:13:03,920 --> 01:13:10,219
So you can say, oh, I'm going to use a GPL GPL three and you can use Apache license or whatever.

594
01:13:10,220 --> 01:13:13,910
I'm not going to explain what what the differences are.

595
01:13:14,540 --> 01:13:17,930
It's important to write the encoding as a UTF eight.

596
01:13:18,110 --> 01:13:24,409
So I'm going to recommend that the right encoding is otherwise our oxygen two will complain.

597
01:13:24,410 --> 01:13:36,550
So I'll just do this. Okay. And also you need to go to this manual and need to update this package, you two.

598
01:13:36,850 --> 01:13:44,020
Okay. So what allows Jen doesn't doesn't know is how to document how to document your packaging.

599
01:13:44,020 --> 01:13:48,249
It can help you document your function, but it doesn't help document your packages.

600
01:13:48,250 --> 01:13:55,570
So you can go here. And this is this is a fast linear regression text.

601
01:13:55,610 --> 01:14:00,950
Simple test, the simple linear regression. Okay. Okay.

602
01:14:01,040 --> 01:14:05,500
So. And you can either party the need to change.

603
01:14:05,510 --> 01:14:08,870
Sometimes you don't you don't need to reference keyword. You can just scope.

604
01:14:09,380 --> 01:14:13,550
You can just delete it if you want. And you can you can write that.

605
01:14:13,550 --> 01:14:19,700
You can record here x equal. Usually writing if you don't record is a good practice.

606
01:14:19,700 --> 01:14:29,090
So you can write it this way. And probably physical based, simple linear regression.

607
01:14:33,330 --> 01:14:42,000
Ryan. It's something like this. So you save it, then you change it, change your directory.

608
01:14:42,010 --> 01:14:52,410
And there's a huge, huge, huge this whole package that I think you can just, uh, use three license.

609
01:14:53,160 --> 01:14:56,630
So you've killed three. Is it.

610
01:14:56,640 --> 01:15:00,900
Is it maybe. Sorry, I. I did not know that this is too small.

611
01:15:01,530 --> 01:15:04,530
I need to make it bigger.

612
01:15:05,820 --> 01:15:09,300
Apologies. You keep your license.

613
01:15:11,150 --> 01:15:18,200
Okay. And you don't have to use cheaper political trees very, very, very openly.

614
01:15:18,800 --> 01:15:23,540
Okay. And I think you need to delete some file.

615
01:15:23,540 --> 01:15:31,820
So it's important to delete this namespace file because our oxygen wants to recreate the file.

616
01:15:32,090 --> 01:15:41,870
So if you if it exists, it doesn't be created. And after that, to this step to colon, colon document this one, create a document.

617
01:15:41,960 --> 01:15:51,470
So if you see here. Well, it actually, I need to I need to delete this, too, because I want to create a new document.

618
01:15:52,430 --> 01:15:56,630
So I think it's probably safer to delete it.

619
01:15:57,590 --> 01:16:03,080
And if you if you do the document. Uh oh.

620
01:16:04,010 --> 01:16:07,610
Did I just delete something wrong? I did.

621
01:16:08,930 --> 01:16:13,760
Uh, okay. Uh, okay.

622
01:16:13,940 --> 01:16:16,940
I, I, I was supposed to delete this file.

623
01:16:16,940 --> 01:16:24,020
I deleted the other file, so I'm now in trouble, I guess, because I delete a file.

624
01:16:24,350 --> 01:16:27,950
I wasn't supposed to delete. So I need to recreate it somehow.

625
01:16:29,150 --> 01:16:39,640
Okay. So I probably will not finish this successfully because I deleted some extent it delete a file I was not supposed to delete.

626
01:16:39,650 --> 01:16:49,880
So let me see if I can. Sometimes if we do redo this, it's sometimes work.

627
01:16:50,180 --> 01:16:56,720
Well, it doesn't work. So I probably need to do to do this.

628
01:16:57,570 --> 01:17:05,830
I'm I'm doing the hacking now, so I just create a new directory and I need to copy copy this file because,

629
01:17:06,260 --> 01:17:13,020
you know, a copy this file and modify it somehow to to create, create and create a package again.

630
01:17:13,040 --> 01:17:18,200
So, so sorry for the mistake. Okay. But you need all these files.

631
01:17:18,350 --> 01:17:21,770
So after that, you need to run them to check. Okay.

632
01:17:22,310 --> 01:17:30,590
Which is not going to work because the file is missing, and I don't have time to fix that, unfortunately.

633
01:17:31,820 --> 01:17:42,050
So I'm going to just show that it doesn't work. Okay. And I probably will start again with with the with thing that that actually works.

634
01:17:42,200 --> 01:17:50,440
So here I think, you know, it does it basically it doesn't have some information they need.

635
01:17:50,450 --> 01:17:54,170
So I think that that's what this complaint of complaining about now.

636
01:17:55,140 --> 01:17:59,650
Uh. Sorry.

637
01:18:00,070 --> 01:18:03,790
Okay. So. Yeah, so. So. But if I.

638
01:18:03,820 --> 01:18:08,860
If I didn't delete the file. Okay. Uh, I.

639
01:18:08,860 --> 01:18:14,770
Yeah. If I did, I delete the wrong file. But if I. If I didn't delete the file, those checks should work well.

640
01:18:15,040 --> 01:18:21,699
And you can build the packages. So hopefully in your example, you don't make make the same mistake I did.

641
01:18:21,700 --> 01:18:26,590
And I'm going to restart from this part of the preparing, the filing the right way.

642
01:18:27,020 --> 01:18:34,780
Okay. In the next lecture. Okay. And we're going to talk about the RC how to make a recipe package later.

643
01:18:34,790 --> 01:18:38,619
And that's that's all of the lecture 15.

644
01:18:38,620 --> 01:18:41,890
And we're almost done. Okay. Okay.

645
01:18:41,920 --> 01:18:46,270
Thank you for your attention. And let's, uh, stop here.

