1
00:00:17,840 --> 00:00:23,270
Right. Welcome to week two of our epidemiologic data analysis.

2
00:00:23,290 --> 00:00:27,540
In our class we are recording.

3
00:00:27,550 --> 00:00:33,700
Excellent. Our next section that we'll transition to is all about data management.

4
00:00:33,910 --> 00:00:39,700
This is the biggest challenge oftentimes in being an epidemiologist is cleaning that dataset.

5
00:00:40,280 --> 00:00:44,230
So it'll take two weeks. I recommend you get started on that a little bit earlier.

6
00:00:44,350 --> 00:00:49,120
But the scale of this particular assignment really reflects, I believe,

7
00:00:49,120 --> 00:00:53,290
accurately what it's like when we're actually analyzing and preparing datasets.

8
00:00:54,790 --> 00:00:58,330
All right. So what we're gonna do first is we're going to recap last class and homework.

9
00:00:59,830 --> 00:01:03,460
This Thursday, class will start here. We'll do size and functions, coding on functions,

10
00:01:03,790 --> 00:01:13,179
take a break and then jump into how to read in the external data sets in our couple come in homework challenged us.

11
00:01:13,180 --> 00:01:17,830
Some people only gave me output or only give me code. I want to try to get both of those together.

12
00:01:18,130 --> 00:01:24,190
So what were some approaches that people took to try to bring those two pieces into one file?

13
00:01:25,090 --> 00:01:32,010
Was a strategy that works for you. When you understand people.

14
00:01:32,370 --> 00:01:39,780
Yeah. Yeah. So if rendering successfully works so that render button at the top of markdown, that'll stitch together and all that's good.

15
00:01:40,560 --> 00:01:46,260
We've got some challenges that we're still working through with rendering that are even still challenging me at this stage.

16
00:01:46,530 --> 00:01:51,269
But we'll try to work through. But copying and pasting code and output together is also a great approach.

17
00:01:51,270 --> 00:01:57,450
So if we're stuck at that particular stage, go ahead and use that strategy.

18
00:01:58,770 --> 00:02:02,310
Something I noticed that a couple of people were flipping those fraction here

19
00:02:02,640 --> 00:02:08,070
and I want to take this as an opportunity to remember this logic check model.

20
00:02:08,190 --> 00:02:11,280
So what do you expect? What do you get and do they match?

21
00:02:12,000 --> 00:02:17,790
So always be using your outside resources and knowledge and the internet to think about it.

22
00:02:17,970 --> 00:02:23,970
Does this make sense? So looking here, does this boiling point make sense based on outside resources?

23
00:02:24,630 --> 00:02:30,450
And if you see, hey, this isn't matching my expectations, so it's an opportunity to go back in and do some troubleshooting.

24
00:02:31,110 --> 00:02:37,320
So be doing your work with not just on autopilot pilot where you're just accepting the values that are provides you,

25
00:02:37,800 --> 00:02:40,350
but that you're thinking about what are your expectations there?

26
00:02:44,730 --> 00:02:50,230
And there's we're still learning about some of our calculator symbols and ah, can anybody help me out?

27
00:02:50,250 --> 00:02:54,660
So what does the upward facing carrot mean?

28
00:02:56,100 --> 00:03:01,889
Exponential. Yeah. So this one is saying the square and can I help me out?

29
00:03:01,890 --> 00:03:05,420
What does the asterisk mean? Much, much worse.

30
00:03:05,550 --> 00:03:11,070
Yeah. So this one's about Z times two. All right, so Z squared versus these times two, those are two different concepts.

31
00:03:11,310 --> 00:03:18,930
Now we'll get more familiar with the calculator expressions going forward then based on some of the other pain points for their homework,

32
00:03:18,930 --> 00:03:22,260
anything that they work through, there's no late penalties for that.

33
00:03:22,270 --> 00:03:26,010
So if you haven't had a chance to submit it, please go ahead and do so. And when you're able to.

34
00:03:33,790 --> 00:03:43,570
Right. So what did we learn last time? Last time we spent a lot of time talking about objects and objects in our are anything we assign a name to.

35
00:03:44,150 --> 00:03:48,410
Right. So data can be objects. Plots can be objects.

36
00:03:48,820 --> 00:03:57,790
Results of regression models can be objects. What symbol or character operator do we do to assign an object?

37
00:03:58,210 --> 00:04:02,850
What pops in your mind there? And what's the key symbol for assigning an object you?

38
00:04:07,560 --> 00:04:10,830
Equal. Yeah. Equal to airplane up.

39
00:04:11,070 --> 00:04:14,790
Yeah, you got two options. So whatever it might be here.

40
00:04:14,820 --> 00:04:23,870
So, like, let's say the value of ten and we want to assign it as an object I might call a.

41
00:04:26,130 --> 00:04:31,740
We do this to a character keystroke that helps remind us that it points from right to left.

42
00:04:31,890 --> 00:04:35,670
So we're taking the value of ten and assigning it as an object culture.

43
00:04:36,420 --> 00:04:41,600
Your folks mentioned that we can also use an equal sign we can do here. So take the value of ten is equal to characters.

44
00:04:43,140 --> 00:04:46,170
So these are equivalent statements. You can do whichever one you like better.

45
00:04:46,710 --> 00:04:53,250
This one saves you a keystroke. This one helps remind us that we're pushing everything, reading everything from right to left.

46
00:04:53,940 --> 00:05:00,930
All right, so this is how to give anything a name. And once we give something a name, a pop up in our global environment, that's means it's an object.

47
00:05:01,200 --> 00:05:10,750
In our current, our session is ready for us to use. What are some types of objects we talked about?

48
00:05:12,130 --> 00:05:20,970
I really remember a type of object. Yeah.

49
00:05:20,980 --> 00:05:28,870
So back door is a great object type, and vectors are objects that have information in one dimension.

50
00:05:30,550 --> 00:05:35,920
So if we're thinking about it like this, we have one dimension of values.

51
00:05:37,680 --> 00:05:42,480
Vectors also have positional information. So it doesn't just list.

52
00:05:42,600 --> 00:05:45,510
These values are not random. It matters what position they're in.

53
00:05:46,380 --> 00:05:53,130
So we have a certain symbol that we use to designate positions and ah, can anybody remember what that symbol is?

54
00:05:56,790 --> 00:05:59,910
He's going to use her position temporarily to square everything.

55
00:06:00,060 --> 00:06:05,380
Exactly. So this, for example, right here is position one X.

56
00:06:05,440 --> 00:06:15,579
So these would be the values and these would be the positions and we would refer to this.

57
00:06:15,580 --> 00:06:23,730
So, for example, if we wanted to call up position one of carrot, we would put the object name and then the position.

58
00:06:25,410 --> 00:06:28,860
So you put the object name right in front of the square brackets that you want to refer to.

59
00:06:31,080 --> 00:06:37,260
The key thing with R is that within a vector it wants all of the values to be the same type.

60
00:06:38,340 --> 00:06:41,940
So you can make that one if you want to have some that are millions of entries long,

61
00:06:42,540 --> 00:06:46,979
but they want the type of information that's in here to be all the same category.

62
00:06:46,980 --> 00:06:50,310
And then what do you think of a type of vector that we learned about?

63
00:06:52,610 --> 00:06:59,990
Similar types of information saw in affected characters.

64
00:07:00,320 --> 00:07:08,090
Now you characters, this is probably the most like permissive or flexible vector type.

65
00:07:08,090 --> 00:07:12,140
This is any thing that you provide it surrounded by pairwise close.

66
00:07:13,700 --> 00:07:17,690
So this would be like three text information.

67
00:07:19,100 --> 00:07:24,739
A lot of datasets will come in with this format and then I try to get them out of character

68
00:07:24,740 --> 00:07:30,350
format pretty quickly because there could be a lot of variability and data entry,

69
00:07:30,590 --> 00:07:35,990
like somebody might not have capitalized at just one time or and then the next time they capitalize on it.

70
00:07:36,170 --> 00:07:42,970
So are very sensitive specific ones in terms of what these values are going to match here.

71
00:07:42,980 --> 00:07:46,310
So character is our most flexible one,

72
00:07:46,400 --> 00:07:54,020
but there might be a lot of data cleaning sets with a character expression or some other type of vector we learned about.

73
00:07:55,730 --> 00:08:02,750
Yeah, yeah, it's metric. So if we have numbers in there, this might be a numeric vector.

74
00:08:02,930 --> 00:08:07,460
And within that there's two subtypes, one is called integer and that's called double.

75
00:08:08,750 --> 00:08:12,260
I kind of like channel and think of them all in the same headspace.

76
00:08:12,260 --> 00:08:19,910
The integer wouldn't allow decimal places, whereas in America double monthly was another vector type.

77
00:08:23,990 --> 00:08:31,160
Logical? Yes, logical. This is the one that we use when we ask our questions like true false questions.

78
00:08:31,970 --> 00:08:37,400
And those will be the values of true and false will turn purple.

79
00:08:38,360 --> 00:08:45,670
So we write these in capital letters. And was another one I have to mention.

80
00:08:55,910 --> 00:09:04,970
One's fault factor. And I kind of think a factor, almost like a character object with boundaries around it.

81
00:09:05,270 --> 00:09:12,020
And so whereas character didn't have literally anything in here, The Factor says we can only have these specific levels.

82
00:09:12,680 --> 00:09:18,520
So you specify what levels you want. So you might specify, I want the levels to be low, medium high.

83
00:09:18,530 --> 00:09:22,519
I want the levels to be hot and cold like you designate.

84
00:09:22,520 --> 00:09:30,390
What are the possible values that can be there? And the one that I'm hunting into later to talk about is a date, date and time factor.

85
00:09:30,410 --> 00:09:36,790
So if you have that type of information to share, you're not having questions about that.

86
00:09:37,200 --> 00:09:44,090
That's awesome. So this is why we have information in one dimension.

87
00:09:44,810 --> 00:09:48,560
Can anyone remember what an object's called when we have information in two dimensions?

88
00:09:57,610 --> 00:10:01,500
Any thoughts, Adam? Yeah, please.

89
00:10:03,820 --> 00:10:11,950
Yeah. So if we have information in two dimensions, meaning it's going to look kind of like a grid or a Excel spreadsheet.

90
00:10:12,310 --> 00:10:18,010
And there's two names for it, a matrix or a data frame.

91
00:10:21,760 --> 00:10:25,870
And these are essentially organized as a series of vectors in the columns.

92
00:10:26,910 --> 00:10:32,130
So a series. This would be a vector. This would be a vector.

93
00:10:33,780 --> 00:10:39,419
This would be a vector. So what it is, is it's treating each column just like before.

94
00:10:39,420 --> 00:10:47,819
It wants all of the columns to have the same data type. So I want this entire column to be numeric, this entire column to be something else.

95
00:10:47,820 --> 00:10:56,100
Okay. So we generally, when we're doing data cleaning of a matrix, our data from within these columns, these are related concepts.

96
00:10:56,640 --> 00:10:59,880
The data frames more flexible because it allows you to have.

97
00:11:02,190 --> 00:11:08,100
Different vector types in the columns. A matrix requires every column to be the same vector type.

98
00:11:09,300 --> 00:11:16,290
So generally I use differences. I might have a column that's a numerical column, that's character or whatever in my dataset.

99
00:11:16,440 --> 00:11:22,800
So related concepts in general use those terms interchangeably, but there's that small difference between the two.

100
00:11:24,840 --> 00:11:32,430
If we want to find the coordinates or the positions like we did in the vector with us wherever I go,

101
00:11:32,550 --> 00:11:39,780
how are we going to do it here with a if we have a data frame to give it two dimensions of information, right?

102
00:11:40,110 --> 00:11:44,490
So let's say I want to find this position.

103
00:11:45,180 --> 00:11:48,300
How, how am I going to position around or index around in there?

104
00:11:49,110 --> 00:11:56,470
I cannot provide this. You put a dollar sign?

105
00:11:56,950 --> 00:12:02,180
Oh, yeah, that would definitely be a way. So I could. Let's say these columns all have names.

106
00:12:02,200 --> 00:12:08,050
So this might be. I might call this one tomato.

107
00:12:09,520 --> 00:12:15,580
I might call this one this one might be my carrot variable and my potato variable, something like this.

108
00:12:17,410 --> 00:12:29,620
And if the overall dataframe might be called vegetables, I can use the dollar sign to call out one of those columns by name.

109
00:12:29,620 --> 00:12:37,090
So many dollar signs. MARTIN So you use the column names and use the dollar sign to refer to it.

110
00:12:37,600 --> 00:12:40,810
So this would be a way to pull out this column.

111
00:12:41,050 --> 00:12:45,730
And then if we wanted the first position, we could use the square brackets to say position one.

112
00:12:46,090 --> 00:12:53,590
So what this is saying is, look, in the veggie data frame, specifically in the tomato column, and then give me position one in that column.

113
00:12:53,740 --> 00:12:56,980
And I might think of a different way to do it without the dollar sign.

114
00:13:01,460 --> 00:13:05,900
Yes. Used to row by column. Yeah. So we could do the name of the dataset.

115
00:13:05,900 --> 00:13:15,860
So in this case, Benji and then with the square brackets are always wants us to give them rows and then comma columns.

116
00:13:16,520 --> 00:13:23,150
That's one of the few things we have to memorize. But so in this case it would be row one, column three.

117
00:13:23,720 --> 00:13:27,470
So this would be with great brackets, row one, column three.

118
00:13:30,410 --> 00:13:34,399
So so we're using the square brackets to get positional coordinates.

119
00:13:34,400 --> 00:13:40,170
Women would then have to assign. Yeah.

120
00:13:40,190 --> 00:13:44,940
And when we're doing data cleaning, we'll make sure that all of the columns have the same type of information.

121
00:13:44,940 --> 00:13:53,849
And then I think these are some of the main things I wanted to talk about.

122
00:13:53,850 --> 00:13:59,340
What are the square brackets with the dollar sign or anything else? What's on your mind from last class that you want to check in about?

123
00:14:02,300 --> 00:14:09,990
I. Well, we'll transition to and we'll start talking about functions which are the actions we can perform on these objects.

124
00:14:10,020 --> 00:14:13,790
Now that we've got objects, now that we have data sets, could perform some functions on.

125
00:14:14,220 --> 00:14:17,620
And before we do that, I just want to double check. Is everybody here?

126
00:14:17,640 --> 00:14:23,969
We might have new folks joining us today. Does everybody here have access to the canvas for those classes or anybody who does not have access

127
00:14:23,970 --> 00:14:30,900
to our campus is one of these checkpoints because we'll be sharing information over websites,

128
00:14:30,900 --> 00:14:41,810
but you'll be able to access their. All right, then we will talk about function.

129
00:14:42,110 --> 00:14:48,680
So our goal in this section is to talk about how to are to learn how to implement functions, to perform actions on data.

130
00:14:50,060 --> 00:14:57,580
So think about functions. Kind of like a spoken language wouldn't be on verbs in the language of our.

131
00:14:57,610 --> 00:15:03,910
So this is how we perform any kind of task, how we perform any kind of activity, and essentially what a function will do.

132
00:15:04,000 --> 00:15:10,390
It will accept an object as input, and then it will provide some kind of transformed output.

133
00:15:10,900 --> 00:15:17,500
There's a lot of built in base functions that are queued up and ready for you right when we turn our on.

134
00:15:17,740 --> 00:15:21,070
And thankfully, some of these have relatively intuitive names.

135
00:15:21,820 --> 00:15:24,850
So there's a function called Mean that calculates averages.

136
00:15:25,330 --> 00:15:29,200
There's a function called Min that calculates the minimum value in an object.

137
00:15:29,590 --> 00:15:33,160
There is a function called Max that calculates the maximum value in an object.

138
00:15:33,430 --> 00:15:38,590
So so I use this to illustrate that a lot of the concepts you might have learned about statistics class,

139
00:15:38,920 --> 00:15:50,690
there's functions to do each of those activities. Here's the basic structure of function coding.

140
00:15:51,230 --> 00:15:56,450
So we're going to this this first right facing arrow.

141
00:15:56,450 --> 00:16:02,360
This is the command prompt, right? We don't take this. This is our way of telling us that it's ready to accept input.

142
00:16:02,870 --> 00:16:06,050
But when we start typing is whatever the name of the function.

143
00:16:07,260 --> 00:16:11,040
And I know it's a function because it's coming in from rounded parentheses.

144
00:16:13,800 --> 00:16:17,730
So just like we knew it was an object because there was like a square brackets,

145
00:16:19,440 --> 00:16:23,249
whatever you see around in parentheses and there's a word in front of it.

146
00:16:23,250 --> 00:16:28,080
Usually that means it's a function. So we're thinking about square brackets with objects.

147
00:16:28,680 --> 00:16:36,180
And when we think about rounded parentheses with functions. Then we provide whatever object we want to perform that function on.

148
00:16:37,800 --> 00:16:43,190
And if you want, you can give as many options as you like. If you want, you can just close out.

149
00:16:43,200 --> 00:16:49,050
We put the second now the parentheses right here after the object and run everything on the default settings.

150
00:16:49,770 --> 00:16:53,219
But if you want to override some of the default settings, specify your own options.

151
00:16:53,220 --> 00:17:03,170
You can put as many as you want in there, separated by commas. When you run this ad, I'll show you the results in the council.

152
00:17:04,560 --> 00:17:09,720
Or you can take run that function on an object and assign it as a new object.

153
00:17:11,000 --> 00:17:16,490
Almost everyone. So in this way, you can start performing functions on objects, creating new objects.

154
00:17:16,700 --> 00:17:21,500
The number of objects we're going to be creating can expand dramatically.

155
00:17:22,130 --> 00:17:28,610
And a reason why we might do something like this, for example, we might perform a linear regression on an object.

156
00:17:29,360 --> 00:17:32,300
We want to assign it as an output because now we want to plot that output.

157
00:17:32,900 --> 00:17:38,600
So oftentimes there might be some statistical action you want to perform and you want to find it as an

158
00:17:38,600 --> 00:17:43,010
object so that you can plot that object or you can perform additional functions on that new object.

159
00:17:48,960 --> 00:17:52,190
This is called base function. Base coding style.

160
00:17:52,200 --> 00:17:53,610
This is traditional coding style.

161
00:17:53,910 --> 00:18:04,020
If you like, there's a newer coding style called tidy verse coding style that uses operator symbol called the pipe operator.

162
00:18:04,650 --> 00:18:10,680
So this is like a three key stroke command. A percent sign, a right facing arrow and another percent sign.

163
00:18:11,100 --> 00:18:15,630
And again, if that last way of coding was intuitive to you, hold on to it and use it.

164
00:18:16,140 --> 00:18:19,620
If you like, you can use this. So you'll start to develop your own coding style.

165
00:18:19,620 --> 00:18:29,340
And I. So we were just talking about how you can perform a function on an object with a pipe operator.

166
00:18:30,270 --> 00:18:36,510
You activate it with the table package, but we take an object and we pipe it into a function.

167
00:18:38,100 --> 00:18:41,880
So these are equivalent statements and whichever format makes more sense to you.

168
00:18:42,150 --> 00:18:45,240
So here is taking that object and typing it into a function.

169
00:18:46,830 --> 00:18:53,400
The reason why people like this newer style is because you can take an object and pipe it into multiple functions.

170
00:18:53,850 --> 00:19:02,040
So they can like string together a longer set of actions where you only type the object once.

171
00:19:02,370 --> 00:19:06,330
So you would just type the object, type it into a function, pipe it into another function.

172
00:19:07,440 --> 00:19:11,099
It might save a little bit of time. But these are the same.

173
00:19:11,100 --> 00:19:20,420
And you can think about which way of coding makes more sense to you. Where do these functions come from?

174
00:19:21,710 --> 00:19:28,790
They're stored in packages. These are also called libraries. And some of them are built into are these are default based packages.

175
00:19:29,000 --> 00:19:35,410
So you can notice, right when we turn on our last class, there is already some functions queued up and ready and available for us to do.

176
00:19:35,450 --> 00:19:42,710
Those are really useful. Otherwise, if you have more specialized activities, you can load or attach those packages yourself.

177
00:19:43,340 --> 00:19:46,340
In the future, you might even want to create your own or packages.

178
00:19:47,210 --> 00:19:53,630
So we've got some to get going. And then as you want to do more specialized work, you can add new ones yourself.

179
00:19:58,160 --> 00:20:03,290
When you load in new packages, they're kept in the memory during that interactive session.

180
00:20:03,560 --> 00:20:13,680
They're not permanently stored yet. So here for example is a screenshot from my laptop of.

181
00:20:14,740 --> 00:20:21,580
You see it's just packages with names starting between 8ac and we already get cut off.

182
00:20:21,790 --> 00:20:25,840
So in my general data, they are coding. There's a ton of packages out there.

183
00:20:26,080 --> 00:20:30,400
These are ones that I've used. Just a screenshot of some of the ones in my work.

184
00:20:31,120 --> 00:20:36,280
So you can see what are the available packages that you have ready with this country club library?

185
00:20:36,640 --> 00:20:39,970
See what's there? What are some short descriptions that are happening?

186
00:20:40,720 --> 00:20:45,040
But your workflow may begin to develop and use a lot of different packages.

187
00:20:47,090 --> 00:20:51,770
The way in which you get a new package is a two step procedure.

188
00:20:52,400 --> 00:20:59,719
So first we have to install the new packages. This is an AR function that's going to talk to the Internet and it's going to

189
00:20:59,720 --> 00:21:04,760
go grab that package from the Korean website and download it to your computer.

190
00:21:05,780 --> 00:21:10,040
So this is a step of actually downloading the package from the Internet to your computer.

191
00:21:10,280 --> 00:21:15,380
You only have to do this once. It's like when you are installing a new program on your computer.

192
00:21:15,770 --> 00:21:19,310
So you're talking to the Internet. We're downloading and installing it to our computer.

193
00:21:21,860 --> 00:21:25,970
I might have a couple hundred packages downloaded and installed on my computer.

194
00:21:27,470 --> 00:21:35,210
I'm not using them all the time, so I have to decide during my current session which ones are those do I want to use?

195
00:21:36,140 --> 00:21:42,740
So I do this type of library using the library function to queue up which of those packages I actually want to use.

196
00:21:43,340 --> 00:21:46,459
So these are all the ones you might have downloaded. This is something you have to do.

197
00:21:46,460 --> 00:21:51,860
Every single time you use are to queue up which of those available packages that you have downloaded.

198
00:21:52,040 --> 00:21:55,430
Do you actually want to use? Those would be a common error you get.

199
00:21:55,670 --> 00:22:02,600
It might say, Hey, this function is not available. Usually that means that we haven't loaded the package that the function comes in.

200
00:22:03,710 --> 00:22:07,100
So we'll work through using make our way through some of those errors.

201
00:22:10,040 --> 00:22:16,190
So to recap, functions are verbs that are action, words that are perform them on objects.

202
00:22:17,180 --> 00:22:20,990
We get our packages, we got functions from packages or libraries.

203
00:22:22,370 --> 00:22:27,290
They have to be actively loaded in our current section of our to actually be available.

204
00:22:28,430 --> 00:22:35,089
And you can only specify other options beyond the default settings and a alternative way of coding.

205
00:22:35,090 --> 00:22:38,600
You can pipe those objects into the functions if you like.

206
00:22:39,890 --> 00:22:44,600
So let's pause here. We're folks curious about with respect to functions.

207
00:22:52,640 --> 00:22:56,210
Jonica could about functions. It's probably it's probably best thing, right?

208
00:22:56,480 --> 00:23:03,530
So we're going to jump back into our posit cloud workspace if this is your first time visiting us.

209
00:23:03,920 --> 00:23:07,080
Click, click the link to join the past cloud workspace.

210
00:23:07,100 --> 00:23:10,480
Otherwise you can reenter from here.

211
00:23:12,270 --> 00:23:16,590
So this will give you that view where you can see, here's my instructor account, our project.

212
00:23:17,190 --> 00:23:22,440
If you have one affiliated with your name from LastPass, you can go ahead and reenter it.

213
00:23:23,970 --> 00:23:27,450
All of my different sections and off at different places.

214
00:23:27,690 --> 00:23:32,730
So I'm just going to copy and make it start fresh. So if this is your first time joining us,

215
00:23:32,740 --> 00:23:39,180
you hit the copy button next to my instructor introduction class and this will get you your own personal version.

216
00:23:39,930 --> 00:23:42,810
You can revisit and save and make all the changes you want.

217
00:23:54,020 --> 00:24:04,120
So you may have had trouble accessing has a couple of these along the line and there's a third of them.

218
00:24:06,570 --> 00:24:11,310
So I'm going to navigate in the lower right hand corner.

219
00:24:11,580 --> 00:24:19,280
We're going to work from the class introduction markdown file that's open that you don't want us using the class to.

220
00:24:19,410 --> 00:24:25,260
And. We'll get to that later. I was not quite ready for class two yet.

221
00:24:26,220 --> 00:24:29,580
By the end of this function section, we'll move on to class to your question.

222
00:24:30,880 --> 00:24:35,830
All right, so this should pop up. Class one markdown here that you might already have active up top.

223
00:24:37,900 --> 00:24:44,140
I have in my notes that we just finished in this particular session the object's area.

224
00:24:49,030 --> 00:24:59,169
So I would like to establish that this is this is my kids.

225
00:24:59,170 --> 00:25:00,910
This was my house. I think we're somewhere.

226
00:25:01,870 --> 00:25:09,550
The number row number, my number might be different for you on this empty because you might have been taking notes or something along the way.

227
00:25:09,760 --> 00:25:12,790
Some are online 175 for about object classes.

228
00:25:12,790 --> 00:25:14,990
Is that consistent with where we left off? Okay.

229
00:25:15,250 --> 00:25:22,719
If you ever want to navigate to there, we can use this outline and this is a nice way to find all those headers.

230
00:25:22,720 --> 00:25:26,800
So here's the object classes here. We can get rid of that for a specific reason.

231
00:25:28,570 --> 00:25:31,930
Okay, cool, cool.

232
00:25:32,650 --> 00:25:36,040
You may notice that my environment is empty. I've got no objects in there.

233
00:25:36,040 --> 00:25:40,980
Does do other folks have objects? Yeah. You might have some from your homework, I think.

234
00:25:40,990 --> 00:25:41,620
Different thing.

235
00:25:42,100 --> 00:25:53,680
But to catch up for me, to catch up to where you are, what I'm going to do is click this downward facing arrow, downward facing arrow.

236
00:25:54,850 --> 00:25:58,090
We hover over it. It's going to run all the chunks above.

237
00:25:58,660 --> 00:26:02,710
So essentially this is going to grab all the our code that's up above, run it all.

238
00:26:03,190 --> 00:26:08,170
So I expect a bunch of objects to pop up for me. So I'll be all caught up to where you all are.

239
00:26:11,300 --> 00:26:14,480
So I ran all the chunks above that and all those objects came out.

240
00:26:14,490 --> 00:26:26,860
So hopefully our environment looks similar. So we've got some of these objects that we made last class and we can start performing functions on.

241
00:26:27,430 --> 00:26:33,549
So this line of code right here, what portion here is the function and which portion is the object?

242
00:26:33,550 --> 00:26:39,090
And how do you know? This first line of code for me is fine.

243
00:26:39,100 --> 00:26:48,070
One, two, three. Where's the function? Where's the object? Half is the function and then the objects in the parentheses.

244
00:26:48,340 --> 00:26:52,360
Yes. Or a function name is just outside of the round of parentheses.

245
00:26:52,360 --> 00:26:58,210
So this is a function called class. So I'm asking what class of object is the number of Apple object?

246
00:26:59,410 --> 00:27:04,840
And we can look at the output for that. And this tells us that the number of Apple's object is numeric.

247
00:27:06,100 --> 00:27:10,540
That's consistent with over here. If we look in the environment, the number of Apple objects is in app here.

248
00:27:10,540 --> 00:27:17,210
So you can get the same information multiple ways. I can also run a class function on the £4 object.

249
00:27:17,240 --> 00:27:23,719
You see, that one's a character. So here's where we see an example where we got objects of different types and

250
00:27:23,720 --> 00:27:28,700
different some functions like class work equally well on both types of objects.

251
00:27:28,970 --> 00:27:33,800
In the future, we'll see. Certain functions don't work on different types of objects.

252
00:27:33,810 --> 00:27:42,470
Like if we wanted to run like a more quantitative function, we can mean a number of apples.

253
00:27:44,000 --> 00:27:54,200
That works just fine. We can calculate the average. But if we try to run a mean on fruit farms, it's going to say no, that we can't do that.

254
00:27:54,920 --> 00:27:58,190
So we'll start to see that based on the type of objects that we have.

255
00:27:59,090 --> 00:28:06,940
There's different functions that become eligible for a related function to class is one called structure.

256
00:28:06,950 --> 00:28:11,359
This is what I personally like because it gives a ton of information. It gives us the type of the object.

257
00:28:11,360 --> 00:28:16,610
The character gives us the number of positions that are there in the first couple observations.

258
00:28:17,840 --> 00:28:24,830
So these are pretty similar functions, structure and class. Whichever one sticks in your head, grab on to that and let the other one go.

259
00:28:25,160 --> 00:28:28,790
You start to develop an affinity for different types of functions and.

260
00:28:36,760 --> 00:28:41,559
So as we were talking about, the rounded parentheses are referring to functions here.

261
00:28:41,560 --> 00:28:46,690
I'm saying how long is this object? What's the length of it versus here in the square?

262
00:28:46,690 --> 00:28:50,919
Brackets are for objects, so I'm trying to index it around something.

263
00:28:50,920 --> 00:28:57,610
What is the position three of four times? What is the position?

264
00:28:57,610 --> 00:29:04,480
What value is in position to other fruit of the fruit firm's object here to use the colon.

265
00:29:05,140 --> 00:29:12,870
This is a convenience operator in R so this means this all I think of the colon to mean the word

266
00:29:12,880 --> 00:29:24,610
through so it's actually saying positions one through three for the fruit palms object here.

267
00:29:24,610 --> 00:29:31,059
We've been selecting positions in that object based on based on position.

268
00:29:31,060 --> 00:29:38,080
We can also do it based on values. So here I am saying show me the values average.

269
00:29:38,080 --> 00:29:41,980
This number of apples object has the values that are less than four.

270
00:29:44,030 --> 00:29:49,070
So it's a saying in position one, those position one have a value less than four.

271
00:29:49,880 --> 00:29:56,090
That's true. Yes, it does. I think that has a value one in position two does not have a value less than four.

272
00:29:56,160 --> 00:30:02,450
That's true. Yes, I do. So this is where we can use those logical vectors to ask our questions and the other ones true and tell false,

273
00:30:02,450 --> 00:30:05,899
which I think this has a value of four and four is not less than four.

274
00:30:05,900 --> 00:30:07,340
So it's going to save us. That's not sure.

275
00:30:08,000 --> 00:30:16,800
So here we can look for criteria, value criteria, and then we can specify which positions have values less than four.

276
00:30:17,270 --> 00:30:20,510
So it's the same positions one, two and three have values less than four.

277
00:30:21,950 --> 00:30:27,799
And this is the quit line down below. These are these are the same these mean the same thing.

278
00:30:27,800 --> 00:30:31,280
Whichever always more makes more sense to you. And we'll practice doing this going forward.

279
00:30:31,280 --> 00:30:33,200
But this is very common. For example,

280
00:30:33,200 --> 00:30:44,660
we might want to select just our participant who has edges greater than 50 or our participants in our dataset who have certain disease status.

281
00:30:44,990 --> 00:30:55,130
So these type of selecting observations, meeting certain value criteria is very, very common in our type of public health analysis.

282
00:30:57,170 --> 00:31:01,710
And let's stitch these together.

283
00:31:01,730 --> 00:31:06,230
Let's try to make our first data frame. Okay? So so far we've been talking about individual vectors.

284
00:31:08,150 --> 00:31:14,930
I like when they're together and identified and get a lot more information traveling together as a little more real world.

285
00:31:15,260 --> 00:31:19,669
So who has a guess? What do you think is going to happen here?

286
00:31:19,670 --> 00:31:29,660
So here's a function called DataFrame. We've never run it before, but I'm feeding into it three vectors that we already have in our environment.

287
00:31:30,050 --> 00:31:36,440
What do you think is going to be the output? What do you think is going to be produced when we provide this line of code?

288
00:31:36,440 --> 00:31:47,890
Doesn't really have any guesses. It'll make apple farms a bit of rain with those three vectors, like the three columns.

289
00:31:48,110 --> 00:31:50,530
Oh, yeah. So we're going to make a difference.

290
00:31:51,550 --> 00:31:57,580
We're going to sign as the name of Apple Farms, and we're expecting these three vectors to be the three columns,

291
00:31:58,720 --> 00:32:03,670
because our likes to have the vectors in the columns, and I expect them to be in that order.

292
00:32:03,820 --> 00:32:08,990
So I expect the first column to be number of apples, next, hungry short names and the next column to be fruit.

293
00:32:09,280 --> 00:32:13,770
So you can see how you could modify the code to produce a data parameter, a different order, if you wanted it.

294
00:32:14,800 --> 00:32:18,820
So we set an expectation. Let's see what we got. What do we get?

295
00:32:18,850 --> 00:32:24,070
We look at that Apple finds object. We see it's shaped like a table like we were expecting.

296
00:32:25,140 --> 00:32:30,780
We've got the number of Apple's object in the first column. It's the one of these double, which is the type of numeric vector.

297
00:32:31,740 --> 00:32:36,870
We've got the short names vector, which was a character, and then the fruit primes, which is also a character.

298
00:32:37,110 --> 00:32:40,470
So it's stitching them together in the order that we gave it.

299
00:32:42,330 --> 00:32:47,840
So in that way we can take individual vectors and stitch up together and make make a data frame for ourselves.

300
00:32:47,840 --> 00:32:54,840
So now that we have a data frame, we can call up different columns with a dollar sign.

301
00:32:54,840 --> 00:33:01,560
So here say look within the apple farms dataframe and show me just the number of apple columns.

302
00:33:01,830 --> 00:33:08,220
So I'm expecting it just to show me this column. And I say, Yeah, it's just showing me those values.

303
00:33:08,490 --> 00:33:11,580
And I hear saying, Look around in that data frame, it should be just the fruit farm.

304
00:33:12,370 --> 00:33:18,060
Okay? So you can use the dollar sign to pull out columns based on their names.

305
00:33:24,350 --> 00:33:33,860
In a related way that we can. Pull out observations in the diagram is to use the coordinates so that you

306
00:33:33,860 --> 00:33:38,690
might have a guess which who are we looking at here in this line of code 245.

307
00:33:39,500 --> 00:33:44,920
What position in the data frame of my, my pulling out right now be.

308
00:34:00,080 --> 00:34:05,770
Okay. Come on. Yeah. Nailed it. So this is going to pull out row three, column one.

309
00:34:06,010 --> 00:34:08,980
And whenever I'm doing this, I always anchor myself on a comma.

310
00:34:09,610 --> 00:34:16,360
So anything to the left of the commas, talking about rows, moving to the right of the cross, talking about columns, pull out.

311
00:34:16,360 --> 00:34:20,060
What is the row three column one, value row this one.

312
00:34:20,080 --> 00:34:23,770
I've left something out. You might have a guess what's going to happen.

313
00:34:24,400 --> 00:34:33,010
What rows are columns. And I specified here with all of the values.

314
00:34:33,640 --> 00:34:38,390
No. Yeah. So we know it's rows because that four is in front of the comma.

315
00:34:38,400 --> 00:34:45,070
So row four, if we don't specify any columns by default, it would give us all of our row for all columns.

316
00:34:46,660 --> 00:34:51,880
Same thing over here. Scroll down to show. So here's row for all columns.

317
00:34:52,150 --> 00:34:56,260
I could also pull out column one all rows.

318
00:34:56,680 --> 00:35:02,400
So if we leave it, this is saying give me call when I'm not specifying which row so it's going to give me on.

319
00:35:06,730 --> 00:35:09,959
Here's an example how we can end. But those are indexing based on position.

320
00:35:09,960 --> 00:35:11,740
Are we going to also do it based on values?

321
00:35:11,740 --> 00:35:18,550
So here I'm asking where are the positions that have a number of apples greater than four or the matrix and pulses?

322
00:35:18,910 --> 00:35:25,180
And then I can pull out those information. So I'm saying give me just the rows at which those values are true.

323
00:35:25,510 --> 00:35:38,829
My practice looks a lot going forward. You might need to use this type of indexing to record your data so that sometimes you

324
00:35:38,830 --> 00:35:43,360
find out there's an error somewhere along the way and we need to update the dataset.

325
00:35:43,870 --> 00:35:48,250
So this is by doing it and ah, you have a record of that change of the dataset.

326
00:35:48,550 --> 00:35:51,550
It's not just happening randomly, it's documented.

327
00:35:51,640 --> 00:35:58,000
The next person who takes over the project from you will be able to see where and why you made this change.

328
00:35:58,930 --> 00:36:05,740
So here I'm saying take the value of five and assign it to the firm's object, but not everywhere.

329
00:36:06,340 --> 00:36:09,910
The only position I want to assign it to is row three, column one.

330
00:36:10,510 --> 00:36:21,340
So let's look at the dataset first. Which which value in here do you expect to change to the value of five when we run the code?

331
00:36:22,010 --> 00:36:28,780
Do you have a guess? I.

332
00:36:34,840 --> 00:36:39,930
So I'm expecting row three. One, two, three, column one.

333
00:36:39,940 --> 00:36:45,099
So right here, I'm expecting this value of three to get recoded as a five on that.

334
00:36:45,100 --> 00:36:49,030
See it. See if it works well.

335
00:36:49,030 --> 00:36:56,990
Yeah. So that now we have a value of 503 so you can like check it before doing your recode and then check it after,

336
00:36:57,010 --> 00:37:06,540
make sure that that actually happens successfully. All right, let's check it out.

337
00:37:06,590 --> 00:37:16,730
Options and a function. So something I do every time I'm working with a new function to me, I look it up in the help viewer.

338
00:37:17,510 --> 00:37:22,790
So one of these tabs in the lower right hand corner. So far we've been playing a lot with the files tab.

339
00:37:23,240 --> 00:37:30,630
We also have a helped them. And within the Help tab, there is a box with a magnifying glass.

340
00:37:31,260 --> 00:37:34,410
You can look up any function that you want in here.

341
00:37:35,070 --> 00:37:45,720
So I'm going to look up the see function. There's a lot of authors in art, so there's a lot of variability and preferences that come up with our.

342
00:37:45,960 --> 00:37:51,540
But one thing that they've done a nice job of making sure all packages have the same good all have the same format of these

343
00:37:51,540 --> 00:38:00,030
health files so we can practice getting to know them and you'll be able to use that no matter what package you're working on.

344
00:38:00,990 --> 00:38:06,090
So the information might be a little intimidating or the format might be confusing at first.

345
00:38:06,390 --> 00:38:12,210
So when we look up a function in the Health York, in the upper left hand corner gives us the name of the function.

346
00:38:12,900 --> 00:38:16,890
And then here in the curly brackets, it gives us the name of the package that it came from.

347
00:38:18,360 --> 00:38:23,850
So if you ever get one of those errors, that's like, I can't run, this function doesn't exist.

348
00:38:24,270 --> 00:38:29,250
Well, then we need to load that package to make sure that that package is activated and those functions are available.

349
00:38:29,700 --> 00:38:36,350
So this is the C function. It comes from the base package, which is one of these default packages that is loaded for you.

350
00:38:36,360 --> 00:38:40,170
Every time we turn our on, that gives you the name of the function more fully.

351
00:38:40,590 --> 00:38:46,700
A short description of it. And next they give us the default settings.

352
00:38:47,750 --> 00:38:55,340
So this is saying the C function counts from the number one to the number one and it counts by one.

353
00:38:57,460 --> 00:39:02,250
And then you can look down a little more detail like what are these different options mean?

354
00:39:04,010 --> 00:39:07,980
There is like a lot of details in here where they'll give you.

355
00:39:08,220 --> 00:39:12,810
Even some articles you might want to read for more information.

356
00:39:12,810 --> 00:39:18,360
If it's like an advanced statistical method, they'll give you some citations and then something I like.

357
00:39:18,360 --> 00:39:21,090
They give you these self-contained examples at the bottom.

358
00:39:21,660 --> 00:39:28,290
So if I'm ever having trouble with a function, I always try to run their examples first that I can figure out is the challenge,

359
00:39:28,290 --> 00:39:31,230
is the issue with the function or the issue with my data set?

360
00:39:32,730 --> 00:39:37,020
Lastly, at the bottom of the Help viewer, it tells you which version of the package is running.

361
00:39:38,040 --> 00:39:43,890
Art gets updated almost every day in some packages, so this will help you if you ever need to check the.

362
00:39:44,070 --> 00:39:48,660
Oh, I'm running. Base package version 4.2.2.

363
00:39:48,660 --> 00:39:52,110
Maybe my colleagues running version 3.7.1.

364
00:39:52,110 --> 00:39:56,310
That might be why our values are a little bit off from each other or something like that.

365
00:39:57,330 --> 00:40:03,540
So this this format of the Help file is something that you can look up and

366
00:40:03,540 --> 00:40:10,380
use to help understand new functions and to help troubleshoot if you get any.

367
00:40:11,800 --> 00:40:16,660
So here specifically, I want to use it in the context of talking about options in a function.

368
00:40:19,070 --> 00:40:23,120
So what do you think this is going to do based on what we just saw in the text?

369
00:40:23,120 --> 00:40:27,840
What do you think? This function I'm running right here. See? From 10 to 23 by one.

370
00:40:27,860 --> 00:40:35,870
What do you expect that output to be based on their description of what this function does?

371
00:40:39,500 --> 00:40:43,020
This can go 10 to 23. Yeah.

372
00:40:43,020 --> 00:40:48,780
And it's going to count by one. So I expect it to provide ten, 11, 12, 13 all the way up to 23.

373
00:40:51,580 --> 00:40:54,130
Is that right? That's exactly what it does.

374
00:40:55,240 --> 00:41:01,450
What about if I type the same thing, but I leave out that buy statement because the buy statement is the default setting.

375
00:41:02,650 --> 00:41:06,910
The default was the count by one. But if I leave that out. Do you get the same thing?

376
00:41:09,270 --> 00:41:13,170
Yeah, we got the exact same thing. So this is a stylistic choice when you're coding.

377
00:41:14,400 --> 00:41:21,930
You never have to specify the default if you don't want to. Sometimes you might want to do it to help remind yourself what settings you have going on.

378
00:41:22,530 --> 00:41:29,519
But these are equivalents. What about this one? So here I've got a lot less information I'm not providing from I'm not providing the two,

379
00:41:29,520 --> 00:41:33,810
but I'm giving them in the order of information that I was expecting.

380
00:41:36,720 --> 00:41:40,980
Becker says the exact same thing as well. So all three of these lines of code are the same.

381
00:41:41,880 --> 00:41:47,100
And it's up to you how much, how like verbose you want your code to be and you want it like very complete.

382
00:41:47,430 --> 00:41:52,620
Like clearly specifies everything here. Or are you just doing kind of quick coding for yourself?

383
00:41:53,220 --> 00:42:00,180
Or are you just providing some of the baseline information? It'll kind of depend on how often you use that function, how comfortable you are with it.

384
00:42:00,960 --> 00:42:07,140
But I just want to let you know that there are there's all kinds of different ways to code in our I mean, whichever one makes the most sense to you.

385
00:42:09,680 --> 00:42:15,080
I provide this because somebody was asking my husband, if you want to count backwards so we can count the negative three.

386
00:42:15,710 --> 00:42:20,730
And somebody also asked me what happens if we want to count by something besides one?

387
00:42:20,780 --> 00:42:24,780
So there we would specify or change that by option.

388
00:42:27,200 --> 00:42:32,740
So you never have to include an option if it's a default. But if you want to change it up from the default names, including.

389
00:42:38,210 --> 00:42:43,620
There. We can perform some calculations on that dataframe. So here I'm taking a new function to us.

390
00:42:43,640 --> 00:42:48,140
I'm using the sum function, but I'm not performing the same function on the whole data frame.

391
00:42:48,500 --> 00:42:52,670
I'm just calculating the sum of the number of apples object.

392
00:42:54,160 --> 00:42:58,690
Remember number of Apple's column? I'm doing the meaning of that commenter.

393
00:43:01,150 --> 00:43:07,450
So some examples of how we can perform functions on objects and we can position around

394
00:43:07,450 --> 00:43:11,740
in that object so that we specify which portion of the object we want it to add on.

395
00:43:18,370 --> 00:43:22,660
One of the optional ways of coding I was talking about is this I'm coding with the pipe symbol.

396
00:43:26,250 --> 00:43:33,840
The pipe operator. This percent rate case in Europe, percent is activated from the terrorist package.

397
00:43:33,960 --> 00:43:37,150
So first we have to load the Taylors package to make that available to us.

398
00:43:45,870 --> 00:43:50,700
And now the way we would read this is they take that number of Apple's object and pipe it into the same function.

399
00:43:51,450 --> 00:43:56,910
So the same way, it's equivalent code to what we did before, but just a different style.

400
00:43:56,920 --> 00:44:01,140
So take that object and pipe it into the function and the utility of.

401
00:44:01,150 --> 00:44:06,209
That's why people like it is because you can pipe the output into more and more and more functions.

402
00:44:06,210 --> 00:44:13,590
So here, say take that object first pipe, but in the log functions we're going to transform all the values and then calculate the average.

403
00:44:13,830 --> 00:44:18,720
So it will automatically take the output from this function and pipe it into that function.

404
00:44:20,700 --> 00:44:26,159
So you can string together multiples of these at once and you can store those outputs in a

405
00:44:26,160 --> 00:44:31,470
new object or make more objects so we can keep keep making more and more and more objects.

406
00:44:33,760 --> 00:44:37,450
Why don't we have to install a timer here so I can just go straight to library?

407
00:44:37,870 --> 00:44:42,100
That is a great question. Where did that tidy verse package come from?

408
00:44:42,970 --> 00:44:46,540
Here, I'm just loading it. Why is it already installed?

409
00:44:46,600 --> 00:44:50,290
This is something I did behind the scenes and I should have told you about.

410
00:44:50,530 --> 00:44:58,989
So as part of this class workspace I already installed on packages, we need some of these,

411
00:44:58,990 --> 00:45:03,760
including the timer can take 5 minutes or more to install that first time.

412
00:45:04,690 --> 00:45:10,120
And I wanted us all to have the exact same version of every package running as like a common group.

413
00:45:10,390 --> 00:45:14,470
If you're taking this code and coding it on your personal computer.

414
00:45:15,160 --> 00:45:18,490
So before you can do this, you'll have to do that stuff that was just described.

415
00:45:18,730 --> 00:45:26,110
So you'd have to do the install that packages function and put the tidy verse in.

416
00:45:26,320 --> 00:45:30,040
I don't know why the install line puts it in quotes and the library doesn't.

417
00:45:31,420 --> 00:45:33,430
Probably written by different people who had enough.

418
00:45:33,640 --> 00:45:39,850
So if you're working on your own personal computer, you got to install this package first before you can load that library.

419
00:45:39,970 --> 00:45:42,970
But if you're working from the class, we do not have to install it.

420
00:45:42,970 --> 00:45:46,780
And I don't recommend that you do that right now because you'll be frozen for the next 5 minutes.

421
00:45:48,370 --> 00:45:55,540
So I'm going to put a hashtag in front of us because 100 comments it out so that when I click render, it will install that also.

422
00:45:56,320 --> 00:46:00,430
All right. So that you can do that with code and you can use the hashtag to comment it out.

423
00:46:00,430 --> 00:46:06,220
I mean, I will not actually run it when you click Render. It's an excellent question.

424
00:46:06,250 --> 00:46:10,420
I've got another question that I wanted to clarify.

425
00:46:10,420 --> 00:46:14,050
When you're using the multiple oh yeah.

426
00:46:14,680 --> 00:46:17,889
So would be the non-Apple.

427
00:46:17,890 --> 00:46:23,500
So whatever. So. So yeah, let's do it.

428
00:46:23,500 --> 00:46:27,160
Everything can be added, everything into the lung function.

429
00:46:27,280 --> 00:46:33,550
Yeah. And then whatever result we get we'll take it into the meeting function, right.

430
00:46:33,670 --> 00:46:37,420
Exactly. So we can do that step by step into a one at a time.

431
00:46:38,470 --> 00:46:45,340
So if I just do the log function first. So I typed that in the log function and then says, oh, brutal values.

432
00:46:45,370 --> 00:46:51,459
Like we don't want to be typing those individually. But if we want to, I think we could do it.

433
00:46:51,460 --> 00:46:59,860
Like the traditional way of coding would be mean log num apples.

434
00:47:01,540 --> 00:47:04,960
So whenever there's I think that's the exact same value hopefully.

435
00:47:05,650 --> 00:47:10,840
Yeah, whenever there's parentheses are will always do the innermost one first.

436
00:47:11,470 --> 00:47:15,460
So this is saying perform first to find the log on this and then perform the mean.

437
00:47:16,150 --> 00:47:17,830
So these two are equivalent.

438
00:47:18,550 --> 00:47:25,540
And whenever I have a question about that, I do exactly why you're struggling to split it up, like do this and then do the next step and then do that.

439
00:47:25,570 --> 00:47:28,149
Like make sure because because sometimes, yeah,

440
00:47:28,150 --> 00:47:34,690
you can confuse yourself when you're hoping to make things into one thing and I need to break the steps down for myself one at a time.

441
00:47:36,660 --> 00:47:45,390
Yeah. So people are curious about if you don't like the pipes, just ignore it and keep doing based on our styles.

442
00:47:46,590 --> 00:47:58,550
They're both working really well. This is just a regular reminder to take as many notes for yourself as humanly possible.

443
00:47:59,480 --> 00:48:05,030
You can put as many hash tags as you want. You don't have to end in a hashtag or anything like that.

444
00:48:05,550 --> 00:48:11,120
They can be on new lines. They can be halfway through the lines. Just encouraging you to take notes as possible because.

445
00:48:12,420 --> 00:48:15,570
You revisit this a month from now? Like, what was I thinking?

446
00:48:16,440 --> 00:48:23,580
Or at least that's something I haven't seen. There's also spaces are completely optional.

447
00:48:24,990 --> 00:48:28,020
I have a preference personally for like putting spaces between stuff.

448
00:48:28,020 --> 00:48:31,120
It helps me see things better, but you can stitch down together.

449
00:48:31,140 --> 00:48:37,100
You don't want to use as many keystrokes. For example, these are equivalent statements.

450
00:48:37,110 --> 00:48:41,090
I like to put spaces after commas that helps me see better. You don't have to do that.

451
00:48:44,200 --> 00:48:47,500
Similarly, you can press enter as many times as you want.

452
00:48:48,190 --> 00:48:51,819
Your I like to press enter because it helps me see that.

453
00:48:51,820 --> 00:48:57,880
Okay. Making sure each element in this vector has quotes, has a comma like all my pieces match.

454
00:48:58,270 --> 00:49:07,270
But if you want, you can do it all in one line. No problem. These are purely stylistic references and you can start to develop your own over time.

455
00:49:10,560 --> 00:49:14,670
Yeah. Any time I want to use a new function, I use the help viewer.

456
00:49:14,970 --> 00:49:19,500
We practice that with the seek function. But you can do it here with the class function.

457
00:49:21,560 --> 00:49:24,560
See what that's doing. All right, let's do a check in.

458
00:49:24,710 --> 00:49:34,790
Let's do this. Check your understanding. So I would like you to create a new numeric vector that repeats the number seven in the first four positions.

459
00:49:35,270 --> 00:49:39,080
And I'd like you to do this with the rec function. That's a function we've never heard before.

460
00:49:39,650 --> 00:49:47,690
So look it up in the viewer, see what's going on with it, and then see if you can implement it to make this new vector.

461
00:49:49,340 --> 00:49:53,060
Talk to your colleagues. Talk to your neighbors. Ah, as a community sport.

462
00:52:17,360 --> 00:52:23,780
All right, let's check in. How did people approach us? How does this affect how do you get some space to work in our life, make a new coaching?

463
00:52:23,780 --> 00:52:27,990
What's what's the stuff I do here? Yeah.

464
00:52:28,070 --> 00:52:32,959
Let's see what the boss. Yeah, we can press enter a couple times, get some white space and then they get an hour coaching.

465
00:52:32,960 --> 00:52:38,840
We can do the green see plus or you can see there's a if you hover over the keystroke command if you want to build that.

466
00:52:40,130 --> 00:52:46,790
So now we have space to code in our what's the next step anybody that how do you approach learning a little bit about the rec function?

467
00:52:50,840 --> 00:52:54,950
You just type in friends and they help. Yeah, we can type it up here.

468
00:52:55,790 --> 00:53:01,399
Look up rep. Can we get the rep function? Did anybody use a different way to get access to the help?

469
00:53:01,400 --> 00:53:07,480
You were here? Yeah, I did a question mark right in the console.

470
00:53:07,610 --> 00:53:15,020
Oh, nice. Yeah. So down here, we could do a question mark rep, and that pops up the help viewer for us.

471
00:53:15,140 --> 00:53:19,250
We could also use the help function and that'll pop up.

472
00:53:20,540 --> 00:53:25,220
So these are all three equivalent ways to do the same thing. Okay.

473
00:53:25,640 --> 00:53:29,240
And what do you learn once you get over here? What what do we learn about at function?

474
00:53:29,240 --> 00:53:33,770
We see it's a function in the base package, just the same package the C function came from.

475
00:53:34,430 --> 00:53:43,720
And we see that there's some implementation. So here we see the rec function is looking for is the value that you want repeated

476
00:53:44,450 --> 00:53:48,200
and then after the comma times is the number of times you want it repeated.

477
00:53:49,190 --> 00:53:52,760
So what value do we want to get repeated? What's our X in this case?

478
00:53:54,320 --> 00:53:59,910
So. Yeah, seven. And then how many times do we want it for?

479
00:54:00,980 --> 00:54:05,930
So if we want, we could tie up, repeat the value of seven, four times.

480
00:54:05,990 --> 00:54:11,600
And this gives us seven, seven, seven. Is there an alternative way to code this?

481
00:54:12,200 --> 00:54:16,610
You might think of a way we could get the same value.

482
00:54:17,090 --> 00:54:20,510
Another approach here could you assign like X to the value of seven?

483
00:54:20,510 --> 00:54:25,900
And then this function is like x four.

484
00:54:26,180 --> 00:54:30,790
Cool. So we could have an object that we're gonna make called this.

485
00:54:30,830 --> 00:54:34,760
Is this what you're thinking? So we've got a new object called X here.

486
00:54:34,880 --> 00:54:40,650
And then we could do. X equals x times equals four.

487
00:54:42,720 --> 00:54:45,810
I do the exact same thing. So they may. I'll take a different approach.

488
00:54:46,880 --> 00:54:55,910
Yeah, I bet you do. I, um. I did like x equals grep parentheses kind of equals or.

489
00:54:58,400 --> 00:55:02,390
Yeah. So we're already taking the next step to assign it as an object.

490
00:55:02,900 --> 00:55:09,690
So here I had a typo in this. This has got a couple of things going on.

491
00:55:10,020 --> 00:55:14,520
One is we've taken all that X equals. We're just providing the value of seven.

492
00:55:14,970 --> 00:55:19,900
We could also do that over here. Let me just do this without the x equals.

493
00:55:22,080 --> 00:55:28,380
You take this, I'll bring it back in a sec. But so this is an equivalent way of coding, or you could just provide the seven and the four.

494
00:55:28,620 --> 00:55:33,840
We're not saying the X equals. We're not saying the times equals. We're just giving it in the order that it expects it.

495
00:55:35,250 --> 00:55:37,590
If we ever flip that order, it'll do the other thing.

496
00:55:38,460 --> 00:55:45,870
So if you're not giving the Times headers, it's going to the ordering is important when you provide it here.

497
00:55:45,870 --> 00:55:49,590
But if you did times equals four and.

498
00:55:50,830 --> 00:55:54,370
X equals seven. Then you can give it in any order you want.

499
00:55:55,150 --> 00:56:00,940
So if you like, drop off these like prefixes here, you can scramble the order that you provide the option.

500
00:56:01,240 --> 00:56:04,720
But if you're dropping these prefixes, you've got to give it in the exact order.

501
00:56:06,580 --> 00:56:09,640
And then somebody mentioned that we can assign this as an object.

502
00:56:10,420 --> 00:56:13,470
So whichever way we do this, what do we want to call this object? I don't know.

503
00:56:13,480 --> 00:56:17,800
New object. And we can assign a rep.

504
00:56:19,620 --> 00:56:23,309
Seven comments for Rice. We've got a new object we can see.

505
00:56:23,310 --> 00:56:26,700
What's that new object shows up like this.

506
00:56:28,500 --> 00:56:31,800
And folks are mentioning we could also an equivalent way of coding.

507
00:56:32,310 --> 00:56:40,160
Instead of using this area, we could put a single equals sign. So multiple ways to approach this problem.

508
00:56:40,610 --> 00:56:44,629
And you notice there's only like ten of us in the room and everybody has a slightly different take on it.

509
00:56:44,630 --> 00:56:50,510
And that's that's wonderful. That's great. Is that anything else that people are thinking about as they were approaching this problem?

510
00:56:50,510 --> 00:56:54,540
Do you think they consider. It puts up a question.

511
00:56:54,650 --> 00:56:59,030
Yeah. So what does the rank and equal to and.

512
00:56:59,360 --> 00:57:03,499
And each other one mean? Whew. Oh, yeah.

513
00:57:03,500 --> 00:57:12,200
I've never tried that. So oftentimes when there's, like, a family of functions, they'll all be on the same help page.

514
00:57:12,740 --> 00:57:16,490
So these are alternative functions that are in the rec family.

515
00:57:16,760 --> 00:57:19,880
And I've actually personally never tried this function.

516
00:57:20,300 --> 00:57:25,520
So we could try. What are we going to do? What happens when we run the rec length function?

517
00:57:29,480 --> 00:57:33,530
We could say x equals seven like we were doing before.

518
00:57:34,340 --> 00:57:39,590
And then length out. I don't know what that one means yet. So we can scroll and see if there's any information.

519
00:57:40,100 --> 00:57:46,360
This is saying the desired one. Maybe this will work exactly the same way.

520
00:57:48,560 --> 00:57:52,610
Oop. No, don't like that. All right. Why don't I just put a hash?

521
00:57:52,620 --> 00:57:56,030
I am proud of that one. And I say that is one for another time.

522
00:57:56,450 --> 00:58:01,590
Maybe there is an example at the bottom on how to use that one. Rep length.

523
00:58:03,060 --> 00:58:07,290
Yeah. The function is run out of the end and not blame. Oh yes.

524
00:58:07,290 --> 00:58:10,510
Good troubleshooting. Okay.

525
00:58:12,270 --> 00:58:19,860
Well, that did work. Okay. So as they're all in the family, there's likely some, like, subtle differences between them.

526
00:58:20,580 --> 00:58:28,010
And we can read a little bit further to figure it out. And I think you guys did a great job and parsing that error message.

527
00:58:28,040 --> 00:58:32,320
So before when I had written this wrong, not as down here on the error.

528
00:58:32,340 --> 00:58:37,290
It says, we can't find that function. So this is a good practice to see.

529
00:58:37,650 --> 00:58:43,800
Either there's a typo in my function name, which we were able to diagnose by looking over here and being like,

530
00:58:44,130 --> 00:58:47,100
Yeah, that's not the right function name, Kelli. It shouldn't be this one.

531
00:58:47,670 --> 00:58:52,890
Or sometimes if you're sure you have the function name right, maybe your package isn't loaded.

532
00:58:52,900 --> 00:58:57,420
Yes, we call that package. So again, these kind of errors that we can't find that function,

533
00:58:57,420 --> 00:59:03,780
that's actually a useful one to get because then we can run through those troubleshooting steps and try and grab it.

534
00:59:05,150 --> 00:59:13,309
And at the very end, when we're happy with that, we've got all this code together.

535
00:59:13,310 --> 00:59:19,830
I'm going to click this render button. This is my favorite part.

536
00:59:20,790 --> 00:59:25,859
I like to watch it, make sure I see what's happening so all of the different code chunks are happening and

537
00:59:25,860 --> 00:59:36,090
then it pops up with a new report that contains all of our code and our output beneath it.

538
00:59:37,260 --> 00:59:45,240
So all of our code and our output and this is producing a website report as opposed to if you want to add a word document report or a.

539
00:59:47,190 --> 00:59:53,459
PDF report. There's all kinds of different ways you can even make PowerPoint slides with these all kinds of different things.

540
00:59:53,460 --> 01:00:03,250
And if you want to, if you ever would like to pull that file out of our cloud, we can navigate through it.

541
01:00:03,270 --> 01:00:10,470
So here's this email that we've just built with the render button. You can tell it just being from today, we can click the checkbox next to it.

542
01:00:12,000 --> 01:00:15,810
And then how do we how do we download it? You know, you have a guess how we pull a file out.

543
01:00:15,840 --> 01:00:20,790
How do you pull files out of here to submit them for your homework settings and then export?

544
01:00:20,940 --> 01:00:26,070
Yeah, we can click on this little blue gear and there's an export button and then I'll download.

545
01:00:27,860 --> 01:00:38,270
So it'll show up in your my downloads folder and then you can upload it to the class for new comments, questions about this.

546
01:00:39,200 --> 01:00:44,090
So this will be the wrap up of this first projects, this introduction class.

547
01:00:44,480 --> 01:00:52,580
We're going to take a five minute break and we come back. We will we will do slides related to reading and data sets.

548
01:00:53,630 --> 01:01:02,180
So we'll get away from my silly kind of farmers market related is that for the most part loading some human participant data.

549
01:01:03,200 --> 01:01:08,430
So let's take a five minute break. We'll come back to oh six and.

550
01:01:21,450 --> 01:01:30,430
Right. Well, I.

551
01:02:01,490 --> 01:03:46,120
You. Your partner.

552
01:03:49,060 --> 01:04:19,420
The whole. You know, don't.

553
01:04:33,040 --> 01:04:43,710
But hopefully.

554
01:04:51,070 --> 01:05:02,050
Yeah. Yeah, yeah.

555
01:05:03,160 --> 01:05:06,300
Or anything like that. Yeah.

556
01:05:09,740 --> 01:05:28,790
Yeah. I.

557
01:05:47,520 --> 01:05:59,390
You're. In the New York.

558
01:06:35,490 --> 01:07:19,049
Yeah. All right.

559
01:07:19,050 --> 01:07:25,650
Let's jump into it here. We'll talk about how we bring data into and out of art.

560
01:07:26,310 --> 01:07:31,770
So for this section, we're going to learn how to apply functions that allow us to read data into our and

561
01:07:31,770 --> 01:07:36,300
also apply functions that will allow us to bring the right data out outside of our.

562
01:07:36,870 --> 01:07:47,460
So this is all going to be about bringing in, taking out. There's a lot of terms that float around first, kind of the same concept.

563
01:07:48,360 --> 01:07:53,639
But bringing the act and bringing data into AR is often called breathing data.

564
01:07:53,640 --> 01:07:58,950
You might also see it called importing data. You also might see it called loading data.

565
01:07:58,950 --> 01:08:05,530
This is all the same general concept. I'm bringing that out of arc.

566
01:08:05,800 --> 01:08:09,910
This will generally be called righting data, exporting data or saving data.

567
01:08:11,020 --> 01:08:23,800
I might use these terms interchangeably. The key step in either of those processes is identifying the type of data that you want,

568
01:08:24,200 --> 01:08:27,040
that the file extension and the type of data you're working with.

569
01:08:27,520 --> 01:08:33,640
So file extension is the information that comes after the name of the file after the period.

570
01:08:33,970 --> 01:08:44,230
So the file might be flu data 2016 and then it'll have a period and usually some of these combinations.

571
01:08:44,620 --> 01:08:51,250
So it might be a tab, separated values file, maybe a comma separated values file,

572
01:08:51,580 --> 01:08:58,790
it might be an Excel X from Excel file, might be one of these extensions if the data were generated.

573
01:09:00,040 --> 01:09:03,250
So my colleagues work on data that produces these types of files.

574
01:09:04,000 --> 01:09:07,090
So these are the file extensions that come after the name of file.

575
01:09:07,120 --> 01:09:12,370
So first step in bringing data in is figuring out what is that file extension?

576
01:09:12,820 --> 01:09:19,960
Does anybody have any questions about what is the file extension where we find that information?

577
01:09:21,750 --> 01:09:27,970
And then we worked with data in other extensions besides these here, should I be added to this list?

578
01:09:29,500 --> 01:09:35,380
Pretty much R can bring any shape of data into our and granted there's a function for that.

579
01:09:35,710 --> 01:09:38,020
So step one is figure out what's the file extension.

580
01:09:39,460 --> 01:09:48,610
Step two is match it to a function so we can if the extensions tab separated by a value, then we're going to read a tab separated value.

581
01:09:49,420 --> 01:09:55,660
If it's a one of these functions, we're going to we're going to bring them all on.

582
01:09:55,870 --> 01:10:00,430
And you see that just like with any other function, they come from different packages.

583
01:10:01,510 --> 01:10:08,830
So for example, this haven package is one that's often used by epidemiologists because that pretty much brings in all the other software.

584
01:10:11,440 --> 01:10:15,880
So for example, we might be reading in a data frame, we want to match the function of the data type.

585
01:10:15,890 --> 01:10:20,950
So let's say our colleagues gave us a dataset called school districts that CSB.

586
01:10:22,670 --> 01:10:28,280
Now we know we want to use the read CSP function because that matches that CSP and

587
01:10:28,280 --> 01:10:32,150
we don't just want to read it and like show us the entire data set in the console.

588
01:10:32,660 --> 01:10:36,410
We want to assign that as a new object.

589
01:10:36,410 --> 01:10:43,340
We might cross tools. So here we're using the assignment operator to take the information in that dataset

590
01:10:43,340 --> 01:10:47,180
and assign it as a new object so that we can do calculations on that object.

591
01:10:50,300 --> 01:10:56,000
This is a common way to bring data in if your colleagues have generated the data somewhere else.

592
01:10:57,430 --> 01:11:04,840
Another convenience factor that's common for epidemiologists is a lot of the big national datasets we work with.

593
01:11:05,380 --> 01:11:09,370
They have our packages specific to help you bring in their data.

594
01:11:10,120 --> 01:11:14,499
This reduces the errors because you don't need to download the data and then bring

595
01:11:14,500 --> 01:11:18,820
it in and you can directly query all that data in your current hour session.

596
01:11:19,630 --> 01:11:26,170
So for example, some of the online repositories that I use in my work, this is from the National Institutes of Health.

597
01:11:26,170 --> 01:11:34,570
This is common for molecular epidemiology. If you want to work with DNA, methylation, gene expression, other kind of omics data, we can pull this.

598
01:11:34,690 --> 01:11:41,230
If you're interested in cancer, we can pull the Cancer Genome Atlas data and then the one we'll use in this class right now because it's a

599
01:11:41,500 --> 01:11:46,440
it's a useful population based survey is one from the National Health and Nutrition Examination Survey.

600
01:11:46,450 --> 01:11:52,120
So these are if you're ever like, oh, shoot, I don't have a data set to analyze.

601
01:11:53,210 --> 01:11:58,910
All of these are free and publicly available, and you can get started right away practicing, analyzing these data sets.

602
01:12:02,380 --> 01:12:07,180
So for the National Health and Nutrition Examination Survey, those of you who talk about statistics,

603
01:12:07,180 --> 01:12:13,570
521 might have been analyzing this data because I work with that instructor to help develop some of those example data sets.

604
01:12:14,170 --> 01:12:21,280
But this is generated by the CDC, approximately 5000 people every two years.

605
01:12:23,560 --> 01:12:31,330
And what we have there is somebody wrote a handy package called NHANES A with a capital X to that.

606
01:12:31,330 --> 01:12:33,130
So it has functions to help us pull the data.

607
01:12:33,220 --> 01:12:43,110
So you can select the years at which some type of information do want the demographics, the diet, the lab info, and we can plot all.

608
01:12:45,960 --> 01:12:55,390
All right. So whether we're using one of those reed functions or we're using one of these specialized data set packages, where are they going to go?

609
01:12:55,410 --> 01:12:59,430
They're going to go to the environment. It's going to be an object like we've been working with so far.

610
01:12:59,910 --> 01:13:05,100
And I want to point out the things in your environment here are inherently temporary.

611
01:13:05,640 --> 01:13:08,040
They're not actually saved to your hard drive at all.

612
01:13:08,850 --> 01:13:13,440
So that's an extra step you have to tell air to save at your hard drive things in your global environment.

613
01:13:13,440 --> 01:13:18,270
If your are session like crashes, you might lose things in the environment.

614
01:13:22,730 --> 01:13:28,070
So one way to help conceptualize this is thinking about something that might be familiar to you.

615
01:13:28,970 --> 01:13:33,470
These are values that you might have considered when you were purchasing your laptop or your tablet.

616
01:13:33,800 --> 01:13:41,630
Does anybody know what's the difference between active memory or RAM and hard drive storage on your computers?

617
01:13:41,900 --> 01:13:45,190
We have a guess about that. Those values means.

618
01:13:48,170 --> 01:13:51,620
Vaguely aware when you're buying something, you want higher numbers for those.

619
01:13:53,750 --> 01:14:05,840
Which one of these two values is usually higher between the two? Padron Yeah, so the hard drive storage is pretty much how much stuff can you like.

620
01:14:06,170 --> 01:14:14,750
Bank won't turn and the ram active memory is how much computing power can actively think about at one time.

621
01:14:15,650 --> 01:14:21,470
So this can include things that are stored long term and this is what am I actively thinking about?

622
01:14:21,830 --> 01:14:24,980
So this might be 16 gigs, this might be 500 gigs.

623
01:14:25,250 --> 01:14:29,780
So there's way more that you can store and you can think about all at once.

624
01:14:30,440 --> 01:14:35,620
And so things that are in your environment. Our part of the active memory.

625
01:14:35,830 --> 01:14:38,800
So those data objects that are part of the environment, they're an active memory.

626
01:14:39,100 --> 01:14:44,620
If we have a package loaded that's part of the active memory, these things are not stable if things crash.

627
01:14:44,650 --> 01:14:50,230
These are temporary things that are being held in our software right now.

628
01:14:51,730 --> 01:14:55,630
If we want to put them in long term storage, that takes an extra step.

629
01:14:55,810 --> 01:15:02,980
So we have to do an actual like say a function or write function to pull the data out to save those outputs.

630
01:15:03,880 --> 01:15:06,250
So it takes an extra step to bring things out of our.

631
01:15:10,480 --> 01:15:18,610
When we want to bring things out of our there's a family of functions that are very similar to the re functions.

632
01:15:19,410 --> 01:15:23,800
So but here we think about the desired data type we want to produce.

633
01:15:24,040 --> 01:15:29,760
So essentially I ask the people, I'm sharing the data with someone, what format would you like the data?

634
01:15:29,930 --> 01:15:33,370
So what would be useful for you? What what can you open?

635
01:15:33,670 --> 01:15:38,110
And they might say, Kelly, you know, I really I need an Excel X file in an Excel file.

636
01:15:38,350 --> 01:15:41,379
So I'll write an Excel X who?

637
01:15:41,380 --> 01:15:44,830
That's hard to say. I will write an Excel file for them so they can use it.

638
01:15:45,040 --> 01:15:48,759
So this will be I'll ask my collaborators, what do you want? And I'll use it.

639
01:15:48,760 --> 01:16:00,100
Right. Function of matching. So for example, if you want to take that school object that we read in before, we can write it to an eye self.

640
01:16:00,540 --> 01:16:07,530
And the key is you want to make that function match the desired file extension.

641
01:16:08,220 --> 01:16:16,890
So those two things go together. That's for writing things out for use outside of art.

642
01:16:17,280 --> 01:16:24,510
Something that I find really helpful is to save the objects in a format that's are compatible.

643
01:16:26,300 --> 01:16:29,530
So here's a new file extension or maybe new file extension.

644
01:16:29,590 --> 01:16:35,850
You may have seen this extension of that RDA. This one's for our data set.

645
01:16:36,780 --> 01:16:39,200
So this is a way of saving your data long term.

646
01:16:39,210 --> 01:16:46,680
So it's not in this temporary in the environment, you're saving it to your hard drive long term in a format that's compatible with R.

647
01:16:46,680 --> 01:16:54,030
So in our dataset and here we would use the save function to save that object with this file name.

648
01:16:54,840 --> 01:17:03,510
Then next time I just load that object and you notice I don't even have to assign it as an object name because this is already in an R format.

649
01:17:03,510 --> 01:17:08,210
It's going to come in with an object name, so it just saves you massive.

650
01:17:08,700 --> 01:17:12,490
So generally I'll use these. Right.

651
01:17:12,520 --> 01:17:16,290
Functions. If I'm sharing the data with somebody else who's not working.

652
01:17:16,320 --> 01:17:23,140
Ah, and I'm saving the data for myself or with one of my collaborators who uses ah, I'll use this approach.

653
01:17:27,010 --> 01:17:31,809
Here's a little table that's summarizing some of these, ah, file types that we've talked about in this class so far,

654
01:17:31,810 --> 01:17:37,330
and some that'll come up in the future because sometimes they're like, What?

655
01:17:37,720 --> 01:17:45,520
There's a lot of file types here. So this file extension of a course on markdown is what we're using to stitch together code and output.

656
01:17:45,700 --> 01:17:55,590
This is to create our reports. An alternative way of coding as a file extension of that capital are this is just has the code it no output.

657
01:17:56,130 --> 01:18:00,420
You are welcome to code in that style if you like and then copy and paste your code and put together.

658
01:18:01,470 --> 01:18:05,310
We just saw that this file extension of RDF for saving our object.

659
01:18:06,660 --> 01:18:10,860
You can also use this related file extension if you want to save many objects.

660
01:18:12,080 --> 01:18:18,870
Um, and then the our project we've been using. So like that, our project or one class introduction.

661
01:18:19,590 --> 01:18:25,530
That's what I shared with you and posit that has data in it, that has code in it, that has output, all kinds of stuff.

662
01:18:25,710 --> 01:18:31,260
So this is essentially an umbrella that can contain all this other stuff in it.

663
01:18:31,740 --> 01:18:36,570
So this is a way of transporting a bunch of these other files together so that they travel as a unit.

664
01:18:40,640 --> 01:18:44,960
So to recap you can bring data into AR and export it from our.

665
01:18:46,210 --> 01:18:49,840
In pretty much any format. I haven't found a format I can't handle.

666
01:18:50,830 --> 01:18:55,810
But what you need to do is find the extension, file extension of your data set and then match it to a function.

667
01:18:56,920 --> 01:19:07,030
And if you are wanting to continue to code and are with that data set, I would use the file extension RDA for easy loading the future release pass.

668
01:19:07,060 --> 01:19:10,990
How are we doing? Has anybody read data into our before previously?

669
01:19:11,710 --> 01:19:16,630
So anyone have experience with this? Yeah. What kind of approaches did you take previously?

670
01:19:16,630 --> 01:19:21,580
Every bit in our. It was just the files, you know how to read, so to speak.

671
01:19:21,730 --> 01:19:26,889
Okay, perfect. It's very common.

672
01:19:26,890 --> 01:19:39,770
Is that an approach that works for other people to find once you are part of a permanent living space in neurology?

673
01:19:39,860 --> 01:19:45,430
We do a lot of service to other folks in the neurology department, in the hospital and.

674
01:19:47,230 --> 01:19:49,600
Yeah. All kinds of weird violence.

675
01:19:49,990 --> 01:19:58,830
They're weird to me, but they're normal in those fields, but like different files coming off of an MRI instrument, like these kind of image file.

676
01:19:58,840 --> 01:20:03,489
All. All kinds of, um. So. So depending on what research, I mean,

677
01:20:03,490 --> 01:20:11,620
you go in as an analyst is very common to have to bring things in and out in all kinds of wild formats so you might not

678
01:20:11,620 --> 01:20:16,690
even dream of is pretty it's a it's a fun part to get to see all the different types of information people generate.

679
01:20:17,770 --> 01:20:22,660
All right. Let's transition now to code project to the data management model.

680
01:20:22,900 --> 01:20:26,200
So this is the same link as before. Let's go back to the project cloud workspace.

681
01:20:30,450 --> 01:20:38,280
And now you'll see the instructor one for the data management class when I click copy next to it to make your own version.

682
01:20:42,690 --> 01:20:47,070
And this will be the project I will use for the next two classes as we work through those days.

683
01:20:50,740 --> 01:20:55,000
More than three.

684
01:21:00,010 --> 01:21:04,669
We? All right.

685
01:21:04,670 --> 01:21:08,999
So you may find this of that's starting to become familiar with the console.

686
01:21:09,000 --> 01:21:14,420
On the left. You have this environment that's empty. On the upper right, we have all of our files in our lower right.

687
01:21:14,990 --> 01:21:27,590
And so you bring forward the code file, the markdown file, but I'll ask you to open the markdown file for a class on data management.

688
01:21:32,000 --> 01:21:37,190
All right. So this should once you click on the class data management markdown file, this should open in the upper left hand corner.

689
01:21:37,880 --> 01:21:41,350
I invite you to add your name to the author list. Take some ownership over this.

690
01:21:41,350 --> 01:21:50,000
So if we start sharing this with other people, we know who's been handling and working with this, you know?

691
01:21:51,540 --> 01:22:00,920
And we see that this is the same. Structure of a heater that we were using before.

692
01:22:01,400 --> 01:22:05,299
So you can specify the title, the author, the date, the format of the h html.

693
01:22:05,300 --> 01:22:11,990
Can anybody remind me if we want to produce a report in a different format, what could we change us to?

694
01:22:16,360 --> 01:22:20,739
Yeah. Yeah. Yeah, we could swap this out for HMO.

695
01:22:20,740 --> 01:22:27,549
We can put in a PDF and that will generate a PDF report.

696
01:22:27,550 --> 01:22:35,590
We could swap this out for a doc x or create a word document or so whichever format your you want to produce your report to share with our colleagues.

697
01:22:36,130 --> 01:22:40,680
Go ahead and change that there. Okay. Right.

698
01:22:43,450 --> 01:22:47,020
Well, the first thing I want us to do is start thinking about this new.

699
01:22:49,210 --> 01:22:53,650
Markdown is is think about what packages are already loaded.

700
01:22:53,650 --> 01:23:01,350
So let's hit the session info function. And this will tell us some information about this current session of our we're running.

701
01:23:03,250 --> 01:23:07,400
So at the top it tells us the version of our we're running is version 4.2.2.

702
01:23:07,420 --> 01:23:12,040
It came from September, October 31st, 2022.

703
01:23:12,370 --> 01:23:19,570
There will likely be a new version in the future. Then we keep scrolling to.

704
01:23:22,010 --> 01:23:26,630
And what I'd like to show you is this section where it says attached to base packages.

705
01:23:27,020 --> 01:23:32,190
So these are packages that are loaded or attached without us even having to ask whether it is a brand new file.

706
01:23:32,210 --> 01:23:38,390
We already have some packages here. One package that we've seen come up previously is this base package.

707
01:23:38,870 --> 01:23:42,169
If you'll remember in The Help you are the rep function, the seek function.

708
01:23:42,170 --> 01:23:49,330
Those are all in there. So there's already packages, seven of them that by default load every time we open our.

709
01:23:49,340 --> 01:23:56,450
So this is how we've had some functions to work with the first time we started without having to load anything.

710
01:24:06,210 --> 01:24:11,780
This next coaching. I had important options specified at the top.

711
01:24:12,230 --> 01:24:16,040
So you may notice this like normal.

712
01:24:16,040 --> 01:24:20,600
Our code shows up in black font. My notes show up in green.

713
01:24:20,960 --> 01:24:24,380
But at the start of these code trunks, I have this little bit of like light blue font.

714
01:24:24,410 --> 01:24:27,590
Have you guys noticed that? I've kind of been ignoring it.

715
01:24:27,830 --> 01:24:33,330
So this operator here. With a hashtag and then a vertical bar.

716
01:24:33,740 --> 01:24:43,730
This is called a hash pipe. This is new for virtual master, but this is for providing options that pertain to the whole code jump.

717
01:24:45,690 --> 01:24:50,550
So this option of eval equals false is is essentially telling our.

718
01:24:51,930 --> 01:24:54,960
When you click Render, don't evaluate it.

719
01:24:55,650 --> 01:25:05,490
So don't actually run this when we click Render. I'm doing that on purpose because the installation of some of these packages can take a long time.

720
01:25:05,880 --> 01:25:11,580
And as we mentioned earlier, I've already installed these packages in our cloud workspace for the whole class.

721
01:25:12,060 --> 01:25:20,820
So all of these can just should already be installed for you. And if it were not, then we could change that and actually evaluate it.

722
01:25:21,090 --> 01:25:24,600
So this code, I'm not actually going to run it. I'm not going to submit it.

723
01:25:24,840 --> 01:25:31,500
I'm going to keep this code here in the file so that if somebody is working on their personal computer, they can install it.

724
01:25:32,070 --> 01:25:35,910
But I'm going to say let's not run it. Let's not click command, enter to run it.

725
01:25:36,570 --> 01:25:44,400
And when we render because I've got this option specified, our is actually going to ignore it will not evaluate this entire coach on me pass.

726
01:25:44,440 --> 01:25:51,960
That's kind of a tricky concept. Yeah.

727
01:25:52,020 --> 01:25:57,120
So even though there's a hash mark in front of, you know, they'll still kind of understand they don't want to get in any of that.

728
01:25:57,540 --> 01:26:05,370
Yeah. So if you give it the hash tag within the code, just a hash tag on it, thinks of it as a comment.

729
01:26:05,640 --> 01:26:10,320
But if you put this vertical bar after the hash tag, then it turns light blue.

730
01:26:10,320 --> 01:26:15,870
And it's recognizing that as a different symbol that anything with the hash tag

731
01:26:15,870 --> 01:26:20,550
plus a vertical bar is talking about options that pertain just to this code.

732
01:26:21,150 --> 01:26:25,469
So it doesn't pertain to the entire markdown, but it's like this.

733
01:26:25,470 --> 01:26:31,970
This is in place just for this code shop because you were pushing this.

734
01:26:33,330 --> 01:26:39,690
So we've got two main concepts here. One is that if we want to use the packet, the functions of these packages, we've got to install them.

735
01:26:40,500 --> 01:26:42,780
But I've already installed one for you for this class.

736
01:26:43,260 --> 01:26:52,290
And then two is this new concept of a hash pipe where the hash tag plus a vertical bar that is for providing options.

737
01:26:54,660 --> 01:27:00,360
All right. So you see, now we're we're going to get into it. We're going to use five different packages in this contract.

738
01:27:03,690 --> 01:27:09,180
So installing those packages, that's an activity we have to do once to pull those packages from the Internet.

739
01:27:10,320 --> 01:27:20,930
How often do we have to load the packages? Every single time.

740
01:27:21,470 --> 01:27:25,670
So every time we have a new markdown document, we've got to load this those packages.

741
01:27:26,360 --> 01:27:30,110
So here are those same five packages that we want to run and we can do them one at a time.

742
01:27:30,950 --> 01:27:40,620
So first, I'm going to load the tidy verse package. Now I'm going to load the here package.

743
01:27:42,700 --> 01:27:48,460
Although the enhanced package of the load the SJ label package.

744
01:27:50,330 --> 01:27:55,970
And also the root excel package that anybody noticed this the.

745
01:27:57,230 --> 01:28:07,630
Well, now see if I can get it back. I'm not able to drive, but we got some red below there.

746
01:28:08,590 --> 01:28:16,030
The red wine sometimes makes me nervous. I'm like trying my brain, trying to think red is always there, but not necessarily sometimes.

747
01:28:16,030 --> 01:28:19,750
Red in this article is just telling us over the internet, it's like things are fine.

748
01:28:20,260 --> 01:28:26,110
But one thing I want to point out, it said. For some of these packages, something might be masked.

749
01:28:28,310 --> 01:28:33,680
What it means when something's masked is that two packages have the same name function and.

750
01:28:36,140 --> 01:28:42,950
So because all of our packages are written by multiple people, you know, different people can have the same great idea.

751
01:28:43,820 --> 01:28:45,920
So somebody in the first package would be like,

752
01:28:46,130 --> 01:28:54,060
I would love to have a functioning as underscore factory somebody and the label package may also want to have a function called an underscore back.

753
01:28:54,350 --> 01:28:59,210
We've got two functions with the same name that potentially mean different things.

754
01:29:00,200 --> 01:29:08,330
So what marketing is telling you is that by default, if you run one of those functions, I'm going to run the one you loaded most recently.

755
01:29:09,260 --> 01:29:15,140
So I'm going to assume that the Y version of that function you want is the one that came up most recently,

756
01:29:15,320 --> 01:29:17,990
and I'm going to mask that when you load it earlier.

757
01:29:19,310 --> 01:29:26,750
So this time principle is why when I'm starting a new code file, I don't just load and every package I've ever heard of.

758
01:29:27,650 --> 01:29:34,040
So you end up creating this kind of like versioning thing where it's like, Oh, which version of the function am I actually running?

759
01:29:34,310 --> 01:29:37,790
Because a bunch of packages might have a function at the same time.

760
01:29:38,660 --> 01:29:44,300
So I usually will only actually load in the packages I need for that code.

761
01:29:44,630 --> 01:29:47,420
Well, this is like a rationale for keeping it kind of tight,

762
01:29:48,050 --> 01:29:51,980
because sometimes I think folks are just like, Oh, I heard of this package, let me load it up.

763
01:29:52,310 --> 01:29:58,280
So I try to only load in the ones that I actually need in that event so that I don't create as much confusion for myself with this masking.

764
01:29:58,520 --> 01:30:06,799
There's ways to overcome masking. I can show you that on the way. But so here we've got five packages loaded entertainment,

765
01:30:06,800 --> 01:30:12,410
how many challenges loading in their packages and they're working on their personal computer as opposed to the cloud.

766
01:30:18,970 --> 01:30:23,170
Besides voting packages, which is a source of common errors.

767
01:30:24,880 --> 01:30:32,770
Probably other most common type of error is. Navigating to locations on your computer to try to find where those files are.

768
01:30:33,400 --> 01:30:39,100
So if we want to read files into our we have to know where that file is stored on your computer.

769
01:30:41,430 --> 01:30:50,910
So we can use the here function as a convenience function that essentially tells you the path of wherever this file is stored.

770
01:30:52,050 --> 01:30:55,110
So it will tell you, like, where is the folder location of this file?

771
01:30:55,830 --> 01:31:03,900
So if you have this on your personal computer and you like save this file to your my documents folder, this will be like backslash, my documents.

772
01:31:04,380 --> 01:31:05,490
So this is a way of like.

773
01:31:07,110 --> 01:31:14,069
If you if you ever can't find your files, this will tell you where your files are, because sometimes there's a new concept for people.

774
01:31:14,070 --> 01:31:20,340
It's hard to find them. So here our files are being stored on the cloud.

775
01:31:20,490 --> 01:31:26,940
And in this current project, and that's consistent with over here in the files, you can see the cloud and the project.

776
01:31:27,720 --> 01:31:32,370
So it's got that this back slash is essentially separating the folders.

777
01:31:33,420 --> 01:31:39,210
So if we're going to read data into our data, I should be in this project folder.

778
01:31:40,200 --> 01:31:42,150
That's because that's where it's going to be looking for it.

779
01:31:42,390 --> 01:31:46,490
But if you're on your personal computer, it might be looking for it in your downloads folder.

780
01:31:46,500 --> 01:31:52,950
It might be looking for it in your documents folder. So you would customize this information to wherever you start the data set.

781
01:31:55,040 --> 01:31:58,059
Let's practice importing. A data set.

782
01:31:58,060 --> 01:32:03,090
So I've got over here in the files. I like made up a data set here.

783
01:32:03,090 --> 01:32:06,780
I'm calling it the fluids testing example data. We can click on it.

784
01:32:08,490 --> 01:32:09,240
We can view it.

785
01:32:12,030 --> 01:32:21,750
And this is like completely made up data, but it's of a structure that might be similar to data you might get from one of your collaborators.

786
01:32:25,640 --> 01:32:30,350
All right. So we've got a data set where the first row has some column names.

787
01:32:32,060 --> 01:32:35,660
The first column is all about participant IDs.

788
01:32:36,110 --> 01:32:42,200
The second column is which visit number? And the third column is, are they testing positive or negative?

789
01:32:42,890 --> 01:32:49,660
Okay. So how are we going to get that Excel spreadsheet?

790
01:32:51,070 --> 01:33:00,340
Into art. Well, we're going to take this file extension and we're going to match it with a function that matches up the Excel function.

791
01:33:01,330 --> 01:33:04,629
And where are we going to tell it to what? File path to want to tell it to?

792
01:33:04,630 --> 01:33:12,730
What's going to be here in the Cloud Project folder with this rambling amount of assignment as a new object?

793
01:33:12,730 --> 01:33:16,200
And finally there. What are we going to?

794
01:33:17,560 --> 01:33:23,030
We know how to run this line of code. You'll see in the environment that a new data set pops up here.

795
01:33:24,050 --> 01:33:31,670
If you like, you can double click on the name of the data set and then it'll pop up like it'll look like an Excel spreadsheet here.

796
01:33:32,330 --> 01:33:38,960
So you see that that functions smart enough to take what was previously the first row of data and move it up into the column names.

797
01:33:45,920 --> 01:33:49,040
You just put the name of the punchline here and I'll show it in the bottom.

798
01:33:50,690 --> 01:33:54,620
Okay. So this is the process. This is how we read data into our that our collaborators.

799
01:33:54,920 --> 01:33:55,850
So you're going to.

800
01:33:57,350 --> 01:34:06,490
Move the dataset into the same folder, into the same project as where your code is from, and then use an appropriate read function to pull it.

801
01:34:20,120 --> 01:34:28,460
Let's check in. So what if you have colleagues who want to access this flu data set, but they need it not as an Excel data set.

802
01:34:28,550 --> 01:34:30,980
They need it as a comma separated values file.

803
01:34:32,080 --> 01:34:40,420
So how are you going to take this flu dataset that we have now in our environment and write it or export it as a CSV so that they can use it?

804
01:34:41,080 --> 01:34:48,160
I threw in a pause here and see if how folks can do to write or export this data or something.

805
01:34:48,250 --> 01:34:52,420
So we've already read it and now we want to send it back out for our colleagues to use it.

806
01:36:19,990 --> 01:36:32,490
Okay. I.

807
01:37:10,620 --> 01:37:19,740
Who can help me out. How? What's that might take to get started? First we need a little space to work, right?

808
01:37:19,750 --> 01:37:26,720
So we might make a code chunk. So make a little space under the coach and with the screen, see plus button.

809
01:37:27,120 --> 01:37:34,270
So now we've got this basic coding. What's an approach somebody took to starting to tackle this problem?

810
01:37:45,120 --> 01:37:47,990
So we even know where to start. Something like this.

811
01:37:58,210 --> 01:38:04,530
This place I find it useful to start is with everyone and you can go back to your slides in this case.

812
01:38:11,940 --> 01:38:15,600
But it all comes down to the data type that you're designing.

813
01:38:16,140 --> 01:38:22,560
So what's the data type in this particular example that we want? Seriously wrong ICAC.

814
01:38:23,760 --> 01:38:32,850
So we match a function to go with that. So in this case we can use the right underscore CSP function to help us make a CSV file.

815
01:38:33,630 --> 01:38:40,950
All right, so we've got a new function. We don't know anything about it yet. Let's see if we can't go into R and learn more about it.

816
01:38:40,950 --> 01:38:46,870
How do we learn more about a new function? Here are some options there.

817
01:38:47,980 --> 01:38:51,490
Okay. Yes, we can go to the Help tab or we could do a question.

818
01:38:52,210 --> 01:38:56,580
Right, underscore CSP all equivalent ways.

819
01:38:56,590 --> 01:39:01,710
And so this is going to tell us more about that function.

820
01:39:01,720 --> 01:39:10,420
So this is in the right MMS family of functions from the read R package, which is one of those packages that we loaded at the START class.

821
01:39:14,300 --> 01:39:18,850
And we see that this has a basic structure of what it wants and wants.

822
01:39:19,280 --> 01:39:27,500
Right. Whatever. So this is going to be right CSP. We want to provide the object name and then we want to provide the file path for what?

823
01:39:28,010 --> 01:39:31,010
Where that where we want to put that file. All right.

824
01:39:31,010 --> 01:39:34,860
So first, we're going to go. Right.

825
01:39:35,430 --> 01:39:39,690
Underscore C USB. And then what file do we want to write?

826
01:39:39,700 --> 01:39:42,630
What's the name of the object we want to share with our colleagues?

827
01:39:46,360 --> 01:39:55,010
The flu underscore data so we can say X equals flu underscore our data, and then we want to specify the file path.

828
01:39:55,030 --> 01:40:02,870
So where do we want to put it? We can use the here function and then we got to give it a name.

829
01:40:02,950 --> 01:40:13,480
So when did anybody pick a name? One name. Do you want to get this file? So one more time needed to shore up new data.

830
01:40:13,500 --> 01:40:18,990
And what's the most important thing? It has to have the file extension that matches.

831
01:40:19,460 --> 01:40:23,790
Yeah. So here's what I will specify that we want that CSP.

832
01:40:27,040 --> 01:40:32,770
All right. So we're saying, right, UCSD, that is from the flu data object.

833
01:40:33,310 --> 01:40:39,070
And where do you want to put it? I want you to put it in our cloud project folder that here location.

834
01:40:39,340 --> 01:40:44,980
And I want you to give it this name of new data that CSB. So when we run this line of code, what I'm expecting.

835
01:40:46,140 --> 01:40:49,730
Is that a new file? It's going to show up over here with this name.

836
01:40:51,970 --> 01:40:55,450
Who do you see? So we got down here.

837
01:40:56,170 --> 01:41:02,410
It's a new day. CSP And how do we get out of this, like, repository to share with our colleagues?

838
01:41:06,160 --> 01:41:11,520
You can check the box next to it. Like the more gear and we can export it.

839
01:41:14,970 --> 01:41:18,670
Now we've got a data set in our my downloads called New Data. That's the USB.

840
01:41:18,890 --> 01:41:25,560
We can open it up in Excel or whatever program you want to use to open it up.

841
01:41:25,890 --> 01:41:32,580
And I'll look the way you want. So that's that's the kind of the thought process I used to go through it.

842
01:41:32,910 --> 01:41:38,220
And so then step one is think about what extension do you want?

843
01:41:38,250 --> 01:41:42,900
And find a function for it. So to look up that function and see how does it work?

844
01:41:44,010 --> 01:41:48,180
And step three, tell it where you want to put that function or where you want to put that data.

845
01:41:48,180 --> 01:41:51,710
So. Of comments, questions about this.

846
01:41:52,820 --> 01:42:05,640
To be honest, this is also one of the more challenging things. Oh one like kind of point and click trick that I like to use.

847
01:42:05,880 --> 01:42:10,910
If you're ever really stuck. And you can't figure out how to read the data in.

848
01:42:12,010 --> 01:42:22,360
If you click on that data set down here. So like, let's say I want to read this new data set and what pops up over here is an important data set.

849
01:42:23,110 --> 01:42:26,530
So we can click import the disk that we don't even have to use the right data set function.

850
01:42:26,530 --> 01:42:31,480
We can just click import. We can say, Sure, that's what I want.

851
01:42:34,130 --> 01:42:37,670
It'll give us some options. Look down here.

852
01:42:38,060 --> 01:42:43,940
We're on the bottom. And that I'll read it. And if you're ever like, Well, how the heck did I just do that?

853
01:42:44,510 --> 01:42:48,080
If you look in the console, it'll give you the code that it did to do that.

854
01:42:48,860 --> 01:42:52,330
So if you're ever stuck, it is not a problem.

855
01:42:52,340 --> 01:42:58,430
You can click on something, click import data and it'll give you the what it imports it.

856
01:42:58,430 --> 01:43:04,400
It'll give you the code that it used to do it. So now next time you can use this code yourself.

857
01:43:04,830 --> 01:43:08,330
Okay. No shame in getting the computer to help you.

858
01:43:08,780 --> 01:43:10,510
That sorry that you have an example.

859
01:43:16,280 --> 01:43:26,040
What if you weren't using your function in the file just because I remember struggling a lot with this guy before him.

860
01:43:26,900 --> 01:43:30,560
So if you weren't here or would you have this.

861
01:43:30,800 --> 01:43:34,070
Specify the, like, file path? Yes.

862
01:43:34,110 --> 01:43:39,590
Let's do that together so we can do right. Yes. V X equals blue data.

863
01:43:39,950 --> 01:43:47,870
And without using that convenience. So that here package of a, you can't remember it or yeah, forget about it.

864
01:43:48,110 --> 01:43:53,690
We could write that file path ourselves so we would give it the full pass in quotes.

865
01:43:53,960 --> 01:43:58,220
So in this case, it would be. Think.

866
01:43:58,460 --> 01:44:01,700
Backslash Cloud. Backslash project.

867
01:44:02,360 --> 01:44:05,860
Backslash new data source.

868
01:44:07,070 --> 01:44:13,940
Let me just test that. I'm not I'm not I'm a little bit unfamiliar whether I need those first backslash, but we'll try on there and see if that works.

869
01:44:15,510 --> 01:44:21,379
Oh, I think that works because we just got a new one in here at 2:44 p.m. So this

870
01:44:21,380 --> 01:44:27,350
is where you could do it with a series of backslash s with your excuse me,

871
01:44:27,350 --> 01:44:30,350
with your everybody's computer might be a little different,

872
01:44:30,350 --> 01:44:36,620
but it might be like my documents or like if you're out on PC, it might be like C colon backslash.

873
01:44:37,370 --> 01:44:43,070
My document, like everybody has a slightly different path here, but it's like a series of folders.

874
01:44:44,000 --> 01:44:51,469
Yeah, but we. You already, I guess the computer already knows like where it's working directory is or why do you like it.

875
01:44:51,470 --> 01:44:54,920
It knows where. Like, so why do you have to keep telling it where?

876
01:44:54,920 --> 01:44:58,010
You know what I mean? Where to go for that file yet?

877
01:44:58,010 --> 01:45:04,999
Because part of this is I want to instill some practice right now.

878
01:45:05,000 --> 01:45:09,799
There's only one place to go, but I want to instill this as a general practice.

879
01:45:09,800 --> 01:45:17,360
Because sometimes I'll work with students and they'll have. In their environment, in their projects, they'll have.

880
01:45:18,850 --> 01:45:19,899
Three different classes.

881
01:45:19,900 --> 01:45:27,970
Homework assignments will have their I'lI project in their work project and they'll have it all running at once and it gets completely wild.

882
01:45:28,360 --> 01:45:32,830
So I would encourage you to have separate folders for each class.

883
01:45:33,630 --> 01:45:37,020
For each research project, for each thing you're doing.

884
01:45:37,710 --> 01:45:46,170
Because when I'm trying to troubleshoot with folks and I'm competing in the environment with everything you've ever done in your life,

885
01:45:47,100 --> 01:45:57,060
and that is very hard. So I would recommend for each class, for each research to have a separate project folder and to organize it this way.

886
01:45:57,270 --> 01:46:03,030
I realize right now, because, as you're suggesting, we only have one possible place, but.

887
01:46:04,120 --> 01:46:08,139
But might consider a future when you have more things going on with.

888
01:46:08,140 --> 01:46:13,960
Ah. Yeah. So when you're reading data, the file path is like where you're getting it from.

889
01:46:14,290 --> 01:46:19,170
When you're writing data, the file path is technically like where you want to write the data.

890
01:46:19,180 --> 01:46:20,590
Yeah. Where you want to put it. Exactly.

891
01:46:21,280 --> 01:46:27,490
So when you're reading data is where are the where is the data located currently when you're writing data is where do you want to put the data?

892
01:46:28,510 --> 01:46:35,760
Perfect. These are excellent real world pressure.

893
01:46:35,760 --> 01:46:39,750
And I can tell that there has been probably been some frustrations in these areas previously.

894
01:46:43,470 --> 01:46:49,770
Okay. Next class, we'll get into a little bit more.

895
01:46:50,010 --> 01:46:55,350
I'll just introduce these concepts here. But what we'll talk about is.

896
01:46:56,310 --> 01:46:59,900
Okay, now we've got. Data.

897
01:47:00,050 --> 01:47:02,660
We read it in. What the heck do we do with it?

898
01:47:02,810 --> 01:47:10,430
So I want to give you some skills to do that on your first day on the job with a new data set so that you don't need to be told what to do.

899
01:47:10,460 --> 01:47:15,500
Your first step that we can actively explore that data set.

900
01:47:15,500 --> 01:47:21,860
So these don't become quite intuitive to you. They'll be instincts that any time you get a new data, these are things you want to do right away.

901
01:47:23,420 --> 01:47:30,319
So every time you load an object, I want you to do these things without even having to be asked, can anybody think of any of these?

902
01:47:30,320 --> 01:47:34,280
And we'll expand on this next class. But what are some things you might be curious about?

903
01:47:34,580 --> 01:47:35,090
Let me know.

904
01:47:35,090 --> 01:47:41,870
So, for example, that flu data that we've just read into are what are some things you would want to check out about it if you're you know,

905
01:47:41,870 --> 01:47:49,380
you're going to be working with this data for the next couple weeks. Like its dimensions.

906
01:47:49,650 --> 01:47:54,510
It's amazing. Yeah. I want to know what's dimensions. First of all, how many dimensions is or is it just one?

907
01:47:54,510 --> 01:47:58,950
So it's a vector that two is a data frame is a matrix.

908
01:47:59,250 --> 01:48:02,760
How many rows, how many columns, anything else people are curious about.

909
01:48:02,790 --> 01:48:05,790
Yeah. How big the data is. Yeah. How big that.

910
01:48:05,850 --> 01:48:09,330
How many rows do we have. How many columns do we have. Yeah. Absolutely.

911
01:48:10,560 --> 01:48:14,549
Yeah. You recommend next range. Oh lovely.

912
01:48:14,550 --> 01:48:18,060
Yes. We want to start to see some distributions of some of those variables.

913
01:48:18,060 --> 01:48:25,620
Absolutely. Especially if it's a numeric we might want certain types of distributions and we'll get into those features about.

914
01:48:28,810 --> 01:48:32,260
So here are some of the things that I like to check out. What type of object is it?

915
01:48:32,620 --> 01:48:35,830
Vector matrix. DataFrame. How big is it? How long is it?

916
01:48:35,890 --> 01:48:39,010
How many rows? How many columns? I want to know. Do you think some names?

917
01:48:39,010 --> 01:48:46,580
Sometimes I get a dataset. And the problems are just like chemical x one, capital x2x3.

918
01:48:46,820 --> 01:48:50,390
So sometimes you get datasets without like informative information there.

919
01:48:52,350 --> 01:48:57,480
Sometimes I would just want to like get a snapshot of it and get a feel for what does it look like?

920
01:48:59,260 --> 01:49:03,430
So here are some of the exploring functions that will use some of these we've seen previously.

921
01:49:03,610 --> 01:49:07,970
So the structure function can summarize any object structure.

922
01:49:08,200 --> 01:49:14,080
So this you can do on an image object or a data object.

923
01:49:14,380 --> 01:49:22,330
This is a nice catch all because it works with anything. Some of these other exploring functions like length will only work if it's a vector.

924
01:49:22,840 --> 01:49:28,630
So once you do the structure and figure out is it a vector or dataframe, then you can pick these additional functions.

925
01:49:29,320 --> 01:49:33,700
Then we'll give you both the rows and columns, or you can ask for those individually.

926
01:49:33,910 --> 01:49:37,270
So we start to get multiple ways of doing the exact same thing.

927
01:49:38,350 --> 01:49:41,860
And then I asked about the names. Does it have any names? Are there any column names?

928
01:49:41,890 --> 01:49:50,260
Are there any names? So these are the types of questions that I ask, and I can run them on an entire dataset or on an individual variable.

929
01:49:50,680 --> 01:49:58,059
So I'm going to start here, but next class, we're going to continue to practice some of these exploring functions and feel like we have an idea

930
01:49:58,060 --> 01:50:02,290
of what to do on our first day on the job with that new data set once we've successfully read it.

931
01:50:02,770 --> 01:50:07,720
So there's not specific homework due this week. They'll be on this larger assignment.

932
01:50:09,840 --> 01:50:18,420
So you're on campus related to data management that we do in two weeks, but if you'd like, you can get started on it early.

933
01:50:19,710 --> 01:50:26,310
It is all about reading in a data set, reading in an enhanced dataset, and then exploring it.

934
01:50:26,460 --> 01:50:30,600
So checking what are the dimensions and figuring out different features about it.

935
01:50:30,780 --> 01:50:33,240
So thank you everyone for your attention and I hope you have a great week.

