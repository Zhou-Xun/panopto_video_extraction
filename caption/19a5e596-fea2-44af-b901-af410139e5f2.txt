1
00:00:04,480 --> 00:00:14,510
Yes. Yes.

2
00:00:15,010 --> 00:00:18,360
Yes. That's it. All right. Hi, everyone.

3
00:00:18,360 --> 00:00:21,490
Welcome to week three of Epidemiology. Six, seven four.

4
00:00:21,510 --> 00:00:30,040
We're going to do our second part of data management. Together, we are recording reminder there's no late penalty for assignments.

5
00:00:30,040 --> 00:00:34,619
So if you did not submit the first one, feel free to get that in the homework.

6
00:00:34,620 --> 00:00:38,429
Assignment two will be there before next class. And here's what we're going to do.

7
00:00:38,430 --> 00:00:40,440
We're going to recap last week's class.

8
00:00:40,830 --> 00:00:47,190
We'll go over some slides about exploring and combining data on the and we'll break and then we'll talk about creating new variables and code data.

9
00:00:47,450 --> 00:00:55,630
And it will just questions, comments, concerns. Let's get into the recap.

10
00:00:56,080 --> 00:00:59,540
Who can talk to me about functions? What are our functions?

11
00:00:59,560 --> 00:01:02,680
How do we know something's a function? What's.

12
00:01:02,700 --> 00:01:10,090
What do functions do? You can help me out here. Yeah.

13
00:01:10,110 --> 00:01:18,790
With the actions. Yeah. How we performed in question and all the other actions on our.

14
00:01:19,180 --> 00:01:23,380
Yeah. Fantastic. So these are verbs and the language of are these are action words.

15
00:01:23,890 --> 00:01:27,130
These we can use these to conduct calculations. Exactly.

16
00:01:27,370 --> 00:01:37,930
And when you're thinking of a function, what's the symbol or operator or key keyboard key that you're thinking of for functions?

17
00:01:38,970 --> 00:01:47,330
Six in your head functions. We all functions have in common.

18
00:01:48,100 --> 00:01:51,759
Yeah. Yeah. The rounded parentheses.

19
00:01:51,760 --> 00:01:56,440
Right. So previously we saw that the square brackets were for looking inside of objects.

20
00:01:57,010 --> 00:02:03,580
Objects can be where we hold our data, and then those rounded parentheses are for signify and functions.

21
00:02:04,180 --> 00:02:08,470
And typically so they're going to follow this basic structure.

22
00:02:13,270 --> 00:02:17,530
So they're going to have some function name, and then they'll have those parentheses.

23
00:02:18,220 --> 00:02:22,720
And within those parentheses, usually we provide some kind of object, right?

24
00:02:22,720 --> 00:02:27,040
So this would be whatever function you want it performed on.

25
00:02:27,610 --> 00:02:32,680
And we saw there's an alternative way of coding that if we don't want to use this kind of traditional way,

26
00:02:32,920 --> 00:02:37,930
we can take that object and we can pipe it into the function.

27
00:02:38,680 --> 00:02:43,120
Here I'm calling the function name, right? So these are equivalent ways of coding.

28
00:02:43,450 --> 00:02:51,669
Whichever one sticks in your brain better you can roll with that. But so this one is performing the function called name on an object called object.

29
00:02:51,670 --> 00:02:57,100
I have clearly my creativity could use a little brush up today and this one is taking the object,

30
00:02:57,550 --> 00:03:01,860
the object and claiming that into a function called name. Right. So those are equivalent statements.

31
00:03:02,560 --> 00:03:07,030
Can anybody help me out? What are some examples of functions we've seen so far?

32
00:03:09,300 --> 00:03:13,420
You've seen a few of these. Who's going to example function?

33
00:03:18,980 --> 00:03:23,870
Yeah. I mean, yeah, there's a function called mean and I apologize.

34
00:03:23,870 --> 00:03:29,320
This is going to auto capitalized the first letter of all of this. But what are some other functions we try?

35
00:03:31,060 --> 00:03:42,730
Some some. Yeah. And so these are part of like these foundational mathematical functions, so that they're pretty intuitive in their purpose.

36
00:03:43,090 --> 00:03:54,690
Anybody remember any others? We're about the one with a large C.

37
00:03:55,530 --> 00:04:01,770
This is for combining foreign. So if we want to combine multiple numbers together or multiple character expressions,

38
00:04:02,790 --> 00:04:10,260
we also saw one called data that frame for combining multiple vectors together into a different.

39
00:04:11,180 --> 00:04:16,980
So we're going to. Oh, we saw six. So what else have we seen?

40
00:04:18,050 --> 00:04:27,620
Yeah. We're going to our as our number of available functions at our fingertips is going to expand greatly if you want.

41
00:04:27,620 --> 00:04:34,579
We can, we can run all of our functions in there with our default settings.

42
00:04:34,580 --> 00:04:46,040
But if we ever want to specify an option, we can do that after the name of the object with some options option equals true or something like that.

43
00:04:46,250 --> 00:04:53,360
So you can specify all the options you want to override after commas and you put a separate from after each one.

44
00:04:54,170 --> 00:04:59,690
But if you want to just cruise along with the default settings, you don't need to specify anything in there.

45
00:05:00,140 --> 00:05:07,940
How do we find out what are the default settings on a function? What resources do we use to look up and figure out more information about a function?

46
00:05:11,020 --> 00:05:14,620
These are very mysterious. How do we find out what's under the hood?

47
00:05:15,250 --> 00:05:20,210
Our function is working. Yeah. The Help tab.

48
00:05:20,750 --> 00:05:24,500
You can also write help on the. Yeah.

49
00:05:24,500 --> 00:05:25,100
Fantastic.

50
00:05:25,100 --> 00:05:31,520
So there's a couple of ways to interact with the help are so in the lower right hand corner of our studio with the Help tab where you can type in the

51
00:05:31,520 --> 00:05:42,169
name of the function or you can type a question mark into the function name or you can actually use the help function on the name of the function.

52
00:05:42,170 --> 00:05:49,310
And all all of those options are going to pop up more information and we'll continue to practice decoding in there what that information means.

53
00:05:49,880 --> 00:05:55,340
So that was beyond the scope of this class. As you're starting to work with new functions in your daily life,

54
00:05:55,340 --> 00:06:03,590
this will become routine and your ability to pull in useful information to help you out will get progressively easier over time.

55
00:06:06,030 --> 00:06:09,660
Where do these functions come from? Where are they housed in? How do we get to them?

56
00:06:16,270 --> 00:06:21,670
Yeah. These functions are enclosed in packages for the purposes of our classes.

57
00:06:21,820 --> 00:06:28,420
Well, also call them libraries. So these are essentially clusters of functions and there are some of them also have

58
00:06:28,420 --> 00:06:31,870
data sets in there if you want to practice using their functions with their datasets.

59
00:06:32,140 --> 00:06:34,060
But so these are collections of functions.

60
00:06:34,660 --> 00:06:40,200
So to be able to use the functions, we have to activate those packages or libraries because there's thousands of these out there.

61
00:06:40,240 --> 00:06:44,050
We don't have them all running all the time, so we pick and choose which ones we want.

62
00:06:44,410 --> 00:06:47,620
Some of these that we've been doing so far are part of the what are called the

63
00:06:47,620 --> 00:06:54,909
base packages that are loads or prepares for you by default when you get started.

64
00:06:54,910 --> 00:06:58,510
Because there's a lot of really useful stuff here to get going.

65
00:06:58,750 --> 00:07:02,710
But we'll see over time as we get more specialized into epidemiology aspects.

66
00:07:02,920 --> 00:07:07,930
We'll start using functions that are not as universal as are more niche our field.

67
00:07:07,930 --> 00:07:11,560
So if we want to bring them in, we have to use we have to activate those packages.

68
00:07:12,100 --> 00:07:17,440
So this is going to be a two step process. The first step is going to be to install the package.

69
00:07:17,740 --> 00:07:21,520
What what is happening when we install a package? Can anybody help me out here?

70
00:07:21,760 --> 00:07:31,510
This is we'll do this with a function called install drop packages and then we'll list the name of the package.

71
00:07:32,320 --> 00:07:36,399
So, for example, the one we'll do first is and I can anybody help me out?

72
00:07:36,400 --> 00:07:39,670
What's this package? What's this function doing the install packages.

73
00:07:39,670 --> 00:07:49,530
Function. Yeah.

74
00:07:50,480 --> 00:07:54,550
Downloading the package from. Exactly.

75
00:07:54,590 --> 00:07:57,080
So this is that stuff we only have to do one time.

76
00:07:57,890 --> 00:08:03,180
This is downloading the package from the Internet either to your personal computer or to our cloud workspace.

77
00:08:03,200 --> 00:08:06,950
So this is something I've done already in advance to prepare the cloud workspace for you.

78
00:08:07,130 --> 00:08:10,050
But if you're working on your personal computer, you have to do that there.

79
00:08:10,070 --> 00:08:16,010
So this is something we only do once and then every single time we want to use a package or something else we have to do.

80
00:08:16,760 --> 00:08:22,310
And that's the queue it up so that it's ready. So here we would do library and hands.

81
00:08:23,570 --> 00:08:25,729
So this is the stuff we do every single time.

82
00:08:25,730 --> 00:08:33,020
But you're actually you might have many dozens more packages installed than you actually have queued up and loaded in that current session.

83
00:08:33,680 --> 00:08:38,120
So this is something you all have at the top of each course are marked down.

84
00:08:38,150 --> 00:08:43,640
You'll have your library statement where you prep all the packages that you need for that current session.

85
00:08:46,170 --> 00:08:57,810
Each of those portal markdowns when you click Render, that acts as a completely separate computing environment or a completely separate island.

86
00:08:58,080 --> 00:09:04,920
So when you click Render, it ignores any packages you've loaded previously and ignores any data sets you've voted previously.

87
00:09:04,920 --> 00:09:07,950
So everything in that sort of markdown has to be self-sustaining.

88
00:09:08,490 --> 00:09:13,500
So you want to if you need a package, you need to have it stated there. If you want to do that, you need uploaded in there.

89
00:09:15,830 --> 00:09:19,820
So anything else on people's mind with respect to functions and packages?

90
00:09:20,450 --> 00:09:24,590
Curious about anything we should check in about?

91
00:09:26,710 --> 00:09:34,780
So you're not entirely sure if you have installed a certain package where you can go check if it's there.

92
00:09:35,140 --> 00:09:42,460
All of the marble wax figures in the lower right hand corner of our studio,

93
00:09:42,670 --> 00:09:45,810
we've been playing with a couple of the different tabs we've played with files.

94
00:09:45,830 --> 00:09:49,000
That's where we've gotten our scripts. We've played with the Help Viewer.

95
00:09:49,330 --> 00:09:53,890
There's another word for libraries, and if you click on that tab called libraries,

96
00:09:54,160 --> 00:10:00,760
that'll show all of the packages that are installed and the ones with a checkbox next to it are the ones that are loaded.

97
00:10:02,360 --> 00:10:08,059
Yes. Thank you. Thank you. It's when that when we're using them interchangeably.

98
00:10:08,060 --> 00:10:12,050
I sometimes I can't remember which one is being used in which case. So we have a small packages.

99
00:10:12,560 --> 00:10:18,440
Thank you. Thank you. So there's a should be a tab in the lower right hand corner of packages and all of the ones that are installed

100
00:10:18,440 --> 00:10:22,760
will be listed and all the ones that you have loaded in the current session will have a checkbox next to it.

101
00:10:23,120 --> 00:10:26,330
And we'll see also in this session how to do that in the end.

102
00:10:27,560 --> 00:10:35,810
By coding, we can ask questions like we can have session info will tell us what are all of the packages loaded?

103
00:10:35,990 --> 00:10:42,799
And if we just type library, that will tell us what are the ones that are all installed.

104
00:10:42,800 --> 00:10:49,840
So there's ways of getting that, both from the coding line as well as through in the end of your question.

105
00:10:50,240 --> 00:10:53,750
Anything else? What else is on your mind with respect to our libraries and packages?

106
00:10:58,350 --> 00:11:01,770
These things are often getting updated at regular intervals,

107
00:11:02,220 --> 00:11:05,940
so the help you are is also useful because it tells us what version of packages we're running.

108
00:11:11,670 --> 00:11:17,820
Yeah. These are all written by different authors, so they might have different conventions and we'll do some examples with that along the way.

109
00:11:19,220 --> 00:11:27,090
On the last thing we're talking about at the end of class last week was to how to bring data into our and how to help set up rebar.

110
00:11:27,510 --> 00:11:33,120
So can you help me when we're bringing data into our when we're trying to read data into R from another software?

111
00:11:33,690 --> 00:11:38,160
What are some of the steps you go through in your mind when you're trying to figure out how to bring data into our.

112
00:11:42,800 --> 00:11:46,890
Yeah. What the file type is. Yeah.

113
00:11:46,930 --> 00:11:50,810
And how do we find out the file type we want? We want to look up the.

114
00:11:51,080 --> 00:11:56,250
Usually I look at the extension at the end of it. The Scranton like after the name.

115
00:11:57,450 --> 00:12:02,880
So some of our common file types might not see us V or excel us x,

116
00:12:03,450 --> 00:12:10,320
but there can be specialized file types based on the software that you or your colleagues are using or you're using.

117
00:12:10,590 --> 00:12:13,920
Then you want to find a read function that matches that.

118
00:12:14,100 --> 00:12:18,370
So, for example, there's a function called read underscore V.

119
00:12:19,290 --> 00:12:21,850
There's a read XLS package.

120
00:12:23,670 --> 00:12:30,090
Is there's functions for all of these types, but we want to make sure they match among our bringing data into R We don't just want to read it.

121
00:12:30,330 --> 00:12:34,980
We want to assign it as a new object. New object.

122
00:12:34,990 --> 00:12:43,230
So I might be using my assignment operator. To take that file in.

123
00:12:44,050 --> 00:12:50,940
So I don't just want to read. Read it, that's all. Essentially, print that file in our output viewer.

124
00:12:51,480 --> 00:12:55,440
I want to assign that as an object name so that I have it so I can use it,

125
00:12:55,440 --> 00:13:01,050
so that I can in the future perform all these functions, like calculate the mean, calculate the song, these kinds of thing.

126
00:13:01,260 --> 00:13:11,700
So when I bring a new object in, I want to assign it a name, and then it should pop up in the upper right hand corner for us to have a name.

127
00:13:11,700 --> 00:13:14,520
We can check out the dimensions, we can explore it going forward.

128
00:13:14,820 --> 00:13:21,180
Similarly, when we want to export data from R, we want to think about what file type do our colleagues want to in what?

129
00:13:21,960 --> 00:13:28,560
What are they comfortable with? And then we find a analogous function that can write into that format.

130
00:13:29,190 --> 00:13:30,450
So is pretty flexible.

131
00:13:31,320 --> 00:13:39,330
I haven't found a file type yet that I can't create for my colleagues, so we can create products that are useful across a wide variety of audiences.

132
00:13:39,900 --> 00:13:45,060
So that's bringing data in and out is often one of the more frustrating points.

133
00:13:45,070 --> 00:13:50,760
So, you know, just be prepared, mentally prepared for it and we can get on through it.

134
00:13:51,750 --> 00:13:56,580
But once the data are and then we're rolling. Usually I want to.

135
00:13:58,360 --> 00:14:03,430
Convert the data to a format that's going to be nice and easy for R in the future.

136
00:14:04,060 --> 00:14:09,760
So I'll often save that new object as a dot already.

137
00:14:10,930 --> 00:14:14,830
So this is saving it in our data format that.

138
00:14:16,420 --> 00:14:20,890
Is going to be very easy the next time I can just load that new object.

139
00:14:22,870 --> 00:14:26,480
Diety. I don't need any specialized package or function or anything like.

140
00:14:26,590 --> 00:14:35,770
Everything you see functions are just in base. So we've got a usually I'll, I'll do all export into different formats for my colleagues,

141
00:14:35,950 --> 00:14:42,130
but for my own working practice, I want to keep it in our format of which the RDA is one of these types.

142
00:14:44,350 --> 00:14:47,710
Is there anything else on people's mind from last week that we should talk about?

143
00:14:53,120 --> 00:15:02,420
Folks have been doing a nice job on the discussion boards, asking reproducible questions and providing supportive answers.

144
00:15:02,930 --> 00:15:07,190
I want to compliment you on that supportive environment.

145
00:15:07,610 --> 00:15:15,740
Our is truly this type of collaborative experience, and I don't do any kind of coding project without consulting.

146
00:15:15,860 --> 00:15:21,290
At some point one of these troubleshooting message boards to try to work my way through a problem.

147
00:15:29,990 --> 00:15:34,910
Let's jump into once we've read that dataset into our now, what do we do with it.

148
00:15:38,100 --> 00:15:46,829
All right. So our goals here will be to help you on your very first day, at your new internship, at your new job.

149
00:15:46,830 --> 00:15:52,830
Once you graduate and you get your first day dataset that this will help you have something to do besides camp.

150
00:15:53,250 --> 00:16:00,059
All right. So we're going to practice this act of once you get your first data set, what should you do with that every single time?

151
00:16:00,060 --> 00:16:04,410
And these things will start to become reflex. But initially, you know, it's kind of like deer in the headlights.

152
00:16:04,410 --> 00:16:10,770
Oh, man, what do I do? So we'll think through what are some of these quality checks that are kind of universal?

153
00:16:10,770 --> 00:16:14,540
They have to be done with every data set so that we know what's going on here.

154
00:16:15,510 --> 00:16:18,810
So we'll practice exploring it. We'll also do another common practice.

155
00:16:19,080 --> 00:16:25,530
Typically, our data are not just housed in one place. We have to combine multiple datasets together to be able to answer our questions.

156
00:16:25,920 --> 00:16:30,410
So. So that's what we'll work on here. All right.

157
00:16:31,290 --> 00:16:37,110
So every single time you load a new data set an hour, every time you read a new data set into are allowing you to check it out.

158
00:16:37,290 --> 00:16:43,260
Does anybody have any ideas of things without having done this before, maybe based on prior experience or just your general curiosity?

159
00:16:43,590 --> 00:16:47,760
What are some of the questions you might have about a data set the first time you look at it?

160
00:16:48,180 --> 00:16:51,240
What are some things you're curious about with the new data set?

161
00:16:52,330 --> 00:16:56,920
Switching values. Yeah, that's a great one.

162
00:16:57,280 --> 00:16:59,410
The question the comment was about missing values.

163
00:16:59,620 --> 00:17:07,390
I probably spent a good amount of my analytic time dealing with missing values and right off the bat getting tabs on how many of them there are,

164
00:17:07,420 --> 00:17:11,650
which variables are in. That is an excellent activity to do early on.

165
00:17:12,040 --> 00:17:22,370
Yeah. What else are people curious about? What does all the variables in the deficit?

166
00:17:23,080 --> 00:17:30,240
Yeah. And what about the variables? Do we want to know what kinds of variables are that character or numeric variable.

167
00:17:30,900 --> 00:17:34,800
Are you going to need to address them for what you want to do?

168
00:17:35,040 --> 00:17:39,239
Oh, fantastic. So here's building up. So even what?

169
00:17:39,240 --> 00:17:44,730
What variables are there? What names do they have? Do they have names sometimes, like I did without any names.

170
00:17:45,390 --> 00:17:49,140
And then you dug into what types of verbal information is contained in those?

171
00:17:49,380 --> 00:17:54,240
Are they numeric? Are they categorical? Do those match my expectations for what I thought were going to be in there?

172
00:17:56,160 --> 00:18:01,950
Do the variables in their current form align with what the research question was?

173
00:18:01,950 --> 00:18:08,610
Or do I need to do some transformation? This is all wonderful. Even building on that, sometimes our variables are not in the columns.

174
00:18:09,240 --> 00:18:12,809
I have a preference for variables in the columns and observations in the rows.

175
00:18:12,810 --> 00:18:19,140
So sometimes we'll even have to do a transformation if our variables are in the rows, in our observations or in the columns.

176
00:18:19,350 --> 00:18:23,740
So even figuring out where each. Axes, rows or columns.

177
00:18:23,750 --> 00:18:28,780
The information them is one of the things I want to do. First, I want to check out the dimensions of everything.

178
00:18:29,320 --> 00:18:34,510
Sometimes somebody thinks they're giving me a data, a data frame, and they're only giving me a vector.

179
00:18:34,840 --> 00:18:40,600
Like sometimes there's major mismatches here. So these are all fantastic things to be curious about.

180
00:18:41,140 --> 00:18:45,610
Here's just a list of some of the things I want always want to know. I want to know what type of object is it?

181
00:18:45,850 --> 00:18:48,880
Is it a vector, data frame, a list, etc.?

182
00:18:49,510 --> 00:18:52,650
I want to know how big is it? What's the length?

183
00:18:52,660 --> 00:19:02,170
The dimensions? Rows, columns. Sometimes I've gone down a whole period of analyzing a data set, thinking I had the whole thing.

184
00:19:02,260 --> 00:19:09,010
There were maybe 1300 observations in there. And then I bring my report and they said, no, we were expecting like 25,000 observations.

185
00:19:09,190 --> 00:19:14,290
So there was a mismatch on the initial data transfer, but I didn't catch it right away.

186
00:19:14,470 --> 00:19:16,360
So if we check the dimensions right away,

187
00:19:16,510 --> 00:19:23,290
we can make sure is that matching what they meant to give me or did somebody accidentally give me just a part of the dataset?

188
00:19:24,460 --> 00:19:25,920
I want to know if the features have names.

189
00:19:25,930 --> 00:19:33,040
Sometimes I get datasets without any variable names, and so I want to spend some early time providing those for myself.

190
00:19:34,390 --> 00:19:37,960
Sometimes I just want to zoom in and get a feel for it to take a snapshot.

191
00:19:37,990 --> 00:19:43,480
What does a top row look like, etc.? So we're going to learn functions to do all of these activities.

192
00:19:44,920 --> 00:19:49,750
So some of the useful exploring functions, one we even saw at an earlier class.

193
00:19:50,320 --> 00:19:53,980
I like this one called structure, and that's going to summarize the object structure.

194
00:19:54,220 --> 00:20:00,580
You can do it on anything. So this is one of the first things I do. I don't have to even already know if it's a vector or data frame.

195
00:20:00,790 --> 00:20:05,830
This one will tell me what type of this so we can run the structure function on any object.

196
00:20:07,800 --> 00:20:11,340
We can run the length function on it if we find out it's a vector.

197
00:20:12,150 --> 00:20:22,290
We can run the dimensions a function on it. If it's a data frame for data, frames are always going to tell us the rows first and the columns second.

198
00:20:22,860 --> 00:20:25,169
That's the same as when we're using the square brackets.

199
00:20:25,170 --> 00:20:32,220
The index in there are is just always going to do rows, first column subject or if we're having trouble remembering which comes first,

200
00:20:32,430 --> 00:20:35,670
we can specifically ask for the number of rows for the number of columns.

201
00:20:36,240 --> 00:20:39,120
So both of these information are contained in this function.

202
00:20:39,780 --> 00:20:46,500
So grab on to whatever function sticks better in your head and keep rolling with that because we'll see there are some redundancies in here.

203
00:20:48,590 --> 00:20:52,820
Here are some functions I use to check out the names of the columns if there are any.

204
00:20:54,050 --> 00:20:57,380
Or if I want to just show the top of an object, I'll use the head.

205
00:20:57,680 --> 00:21:01,370
Similarly, there's a function called tail if I want to just see the bottom of an object.

206
00:21:01,850 --> 00:21:09,200
So those can be ways to visualize just corners of the. So you can run these on the whole data set.

207
00:21:09,200 --> 00:21:12,800
You can write on individual variables. Just keep checking it out.

208
00:21:13,070 --> 00:21:19,340
And again, these are the types of things you should run on your own once you get a decent look, don't wait for your boss to tell you to do them.

209
00:21:19,880 --> 00:21:25,490
So you want to do these types of exploration so that you know yourself how big of a dataset is here?

210
00:21:25,670 --> 00:21:30,560
So you can ask questions and clarify and ensure that this is the right file if you're working with.

211
00:21:32,950 --> 00:21:40,120
One of the best practices I've seen as a frequent analyst is to have data dictionaries or code books.

212
00:21:40,870 --> 00:21:49,310
These explain our variable names. They explain the definitions of those names, the units of measure they're in all our.

213
00:21:49,330 --> 00:21:55,240
These are often stored as separate files. People have them in word or excel or or something like this.

214
00:21:56,470 --> 00:22:00,820
So you want to ask your colleagues and see if you have one of these things.

215
00:22:01,090 --> 00:22:02,770
If they do not have one of these things,

216
00:22:02,770 --> 00:22:09,340
then you want to spend your first week or two on the job building one so that you can ask a number of questions going forward.

217
00:22:11,080 --> 00:22:18,610
I worked on a project where we found out ten years into it somebody had mislabeled

218
00:22:19,690 --> 00:22:24,010
of labeling of the two major sex groups in the study as male and female.

219
00:22:24,850 --> 00:22:29,410
We had to retract over 30 publications and make corrections to all of those.

220
00:22:30,040 --> 00:22:36,339
And if we had an accurate data dictionary from the start that explained the two groupings,

221
00:22:36,340 --> 00:22:43,930
the labeling is that this could have a lot to be a lot, lot a lot of time and headache and paperwork.

222
00:22:44,320 --> 00:22:49,400
So this is just to underscore the fact that data dictionaries are extremely valuable.

223
00:22:49,420 --> 00:22:52,320
If you don't have one, build it and ask a lot of questions.

224
00:22:52,330 --> 00:22:57,730
Double check all of the coding here so that you're not making assumptions so that you actually

225
00:22:58,300 --> 00:23:05,180
have an understanding of how things were handled before you got that data set in our hour.

226
00:23:05,200 --> 00:23:11,440
We will see you in the data set we're working with. All of our variables will have names and we'll have labels.

227
00:23:11,740 --> 00:23:16,750
These are like longer descriptions of the variables that travel around with the dataset.

228
00:23:17,050 --> 00:23:21,340
Not all datasets have those, and you can apply those labels after the fact if you want.

229
00:23:23,970 --> 00:23:29,370
And you want to take this step to make sure that your new dataset matches what was expected in the data dictionary.

230
00:23:30,210 --> 00:23:35,820
And if you don't have a data assurance. So sometime making one and checking it with your collaborators.

231
00:23:37,180 --> 00:23:44,830
Here's an example of a data dictionary I received from or I generated for our enhanced dataset that we're going to work with in this class.

232
00:23:45,280 --> 00:23:50,650
So, for example, we're going to have a variable called C and its purpose.

233
00:23:50,670 --> 00:23:57,100
These are the I.D. numbers for the participants. The variable type we're going to be expecting is that it's an integer.

234
00:23:57,640 --> 00:24:03,340
It should not have any levels because it's an integer. It shouldn't have a units, and there should be a variable called sex.

235
00:24:03,580 --> 00:24:11,139
That should be a factor. So you can go through and make sure you have an understanding of how everything is coded and how you

236
00:24:11,140 --> 00:24:16,900
want it to be coded because maybe you want to move things into a different format for your analytical.

237
00:24:21,380 --> 00:24:26,360
Okay. Sometimes these datasets are enormous.

238
00:24:26,630 --> 00:24:30,530
Right. They're built for a different purpose than your specific project.

239
00:24:31,160 --> 00:24:39,980
So if we want to make the dataset a little more manageable and grab just some of the columns so that we're not working with this behemoth of a thing,

240
00:24:40,490 --> 00:24:45,860
we can use the select function to grab just the columns we want.

241
00:24:46,160 --> 00:24:54,530
So if we have a very large dataset and we would like to go down to a small dataset with fewer columns, we can use the select function.

242
00:24:55,250 --> 00:25:03,650
We perform that function on the name of the large dataset. And then we specify what variable names we want to keep after the commas.

243
00:25:03,980 --> 00:25:07,750
And then you notice, What am I doing on assigning it as a new object name?

244
00:25:08,030 --> 00:25:12,020
So you can make up whatever name you want, but this will be for the small dataset that you want to retain.

245
00:25:12,680 --> 00:25:18,710
So this way you don't have to be tracking around this giant dataset that might get a little bit unwieldy for you.

246
00:25:20,350 --> 00:25:23,710
Summary, you could implement different type bizarre equipment statements.

247
00:25:24,250 --> 00:25:32,470
We could take the large data set, pipe it into the select function, and select just certain variables, and assign that as a small dataset.

248
00:25:33,500 --> 00:25:43,580
So you can start to develop preferences, see if the base way of coding you gravitate towards or if this method with piping works better for you.

249
00:25:49,500 --> 00:25:54,930
That was for we use select to grab columns if we want to grab certain rows,

250
00:25:54,930 --> 00:25:58,800
meaning if we want to just grab certain participants meeting a given criteria,

251
00:25:59,130 --> 00:26:07,990
we can use the filter function so we can use filter to find participants for some kind of condition or criteria are true.

252
00:26:08,010 --> 00:26:14,130
So if we have a data set right here where some of our participant IDs are cases and controls

253
00:26:14,460 --> 00:26:19,980
and we want to filter on their case and control status so that we only retain the cases,

254
00:26:20,400 --> 00:26:28,230
then we could do this kind of function where we might type our dataset into the filter function and grab just the variable.

255
00:26:28,440 --> 00:26:33,680
The Z is wanted to equal the case and assign that as a new object just for cases.

256
00:26:34,810 --> 00:26:41,560
So it works the same way. Where on the select function we were grabbing, which variables we want.

257
00:26:41,980 --> 00:26:51,310
And then on this version we are grabbing the condition, our criteria for a variable we want so that we select our rows.

258
00:26:52,640 --> 00:26:58,880
So finding our participants that matches are thing. Similarly, we could filter agencies greater than 50.

259
00:26:59,480 --> 00:27:05,720
Any kind of criteria that you think of, we can use the filter function to grab roes, meaning a certain criteria.

260
00:27:12,050 --> 00:27:16,670
One of the most common things we have to do is combine multiple datasets together.

261
00:27:16,940 --> 00:27:26,150
So sometimes our participants might come for their first visit and then six months later come for another visit.

262
00:27:26,330 --> 00:27:30,830
We want to stitch together the baseline and the six month visit together and have a table.

263
00:27:31,100 --> 00:27:38,660
Or maybe someone did like a neurologic questionnaire in this room of the office,

264
00:27:38,900 --> 00:27:43,220
and then they did a physical questionnaire over here and all from the same visit, different data types.

265
00:27:43,490 --> 00:27:47,780
So it's very common to have multiple datasets we want to stitch together.

266
00:27:48,380 --> 00:27:54,020
So when our data are in multiple places and we want to bring them together and use a function called join.

267
00:27:57,140 --> 00:27:58,750
The most important thing here.

268
00:27:58,760 --> 00:28:06,770
So this would be a joy to produce a unified base that we want to have a variable name that's in common between the two of them.

269
00:28:07,130 --> 00:28:11,740
So in this case, I have a variable name called ID. In both their sets.

270
00:28:12,220 --> 00:28:18,730
And you notice the joint product now has one column for i-D that's been harmonized across both of them.

271
00:28:20,210 --> 00:28:23,750
Okay. So to be able to join datasets together, we got to have something in common.

272
00:28:26,340 --> 00:28:33,720
So in this case, here is a function I'm using. I'm using punch about full join to join visit one and visit two.

273
00:28:33,960 --> 00:28:37,830
And I'm saying, what do they have in common? They're being joined by their ID variable.

274
00:28:38,340 --> 00:28:41,520
And then I'm assigning that as a new object and from both visits.

275
00:28:42,410 --> 00:28:48,110
Yeah. So if you have like two data sets from two different sources that maybe just like name variables differently,

276
00:28:48,140 --> 00:28:54,350
we just have to rename that variable before combining that is still be able to combine the exact is a great question.

277
00:28:54,350 --> 00:29:00,290
What if whatever so many call this is capital letters and some we call this one lowercase letters.

278
00:29:01,130 --> 00:29:08,060
We could either clean the dataset first, so rename the variable so that they are exactly the same or there's an option in here.

279
00:29:08,060 --> 00:29:15,370
You can say like by dot x, which will correspond to the first dataset and by that like, well,

280
00:29:15,390 --> 00:29:25,220
that's where you can like specify the variable names in them that are different, but then the contents of the variable has to be the same.

281
00:29:25,880 --> 00:29:29,710
So like they have to actually have the same numbering scheme or letter scheme or whatever.

282
00:29:30,710 --> 00:29:35,840
Yeah. Excellent. Yeah. These kind of all these little tiny hiccups come up along the way.

283
00:29:42,970 --> 00:29:46,240
There's a number of options for joining that will get into.

284
00:29:49,060 --> 00:29:56,590
You have a lot of choices. And listen, there's no. There's usually not like only one path to go forward.

285
00:29:56,700 --> 00:30:03,690
You can choose a bunch of. Alternative directions for your for your research.

286
00:30:04,410 --> 00:30:09,900
So if you want to decide who you want to be in your following joint data set and you want.

287
00:30:10,910 --> 00:30:19,460
Everybody. We can use a function called full join that's going to bring in everybody, whether they were in visit one or visit to.

288
00:30:21,170 --> 00:30:27,889
Nobody's getting excluded. If you were if you didn't show up for a visit to you, you're going to just get missing values for visit, too.

289
00:30:27,890 --> 00:30:33,600
But you'll still be in the data set. If you want to do left join.

290
00:30:34,170 --> 00:30:39,450
This is essentially if you want people only who will visit and made it to visit one.

291
00:30:41,490 --> 00:30:47,070
And if they didn't make it to visit too they'll get. They're going to get excluded.

292
00:30:47,220 --> 00:30:49,049
Similarly, you could do right drawing if you want.

293
00:30:49,050 --> 00:30:54,990
The participants on the right or inner join would be if you only want those participants that made it to both visits.

294
00:30:55,560 --> 00:30:58,830
So if somebody only made it to one or the other, they're going to get excluded.

295
00:30:59,580 --> 00:31:01,620
So you can see this is a very powerful tool.

296
00:31:02,130 --> 00:31:08,740
You could literally be excluding a bunch of people from your dataset if you're not sure if you're not ready to exclude people yet.

297
00:31:09,030 --> 00:31:12,330
Just go ahead and use the full join and we'll keep everybody in there for that.

298
00:31:12,640 --> 00:31:16,900
Yes, I'm. Things will get.

299
00:31:18,330 --> 00:31:27,150
Yeah, that's a wonderful point. There's many ways to do similar things, and our very similar function to join is called Merge.

300
00:31:27,600 --> 00:31:32,600
Merge is from the base. Our family of co-owner Joanna is from the tailors style.

301
00:31:32,880 --> 00:31:39,300
So there are just two different coding styles and whichever one you gravitate more towards,

302
00:31:40,080 --> 00:31:43,500
roll with it because Merge is going to do something extremely similar.

303
00:31:43,500 --> 00:31:50,870
It's actually you don't have. There's not like different names of the merge function.

304
00:31:50,880 --> 00:31:55,590
There's only one merge function, but you specify these as options after the class.

305
00:31:56,010 --> 00:32:00,130
So you would say like how do you want to handle the names?

306
00:32:00,210 --> 00:32:04,500
Essentially after it, after the promise. So you could achieve these.

307
00:32:04,500 --> 00:32:08,110
Exactly. Bold and merging if you're comfortable and familiar with merge would.

308
00:32:09,000 --> 00:32:19,910
Yeah. Anti-drone is if you only want the people who did not make it to both visits.

309
00:32:21,740 --> 00:32:28,720
But no matter what you do, no matter which one you choose, whether you're using merger joints before you do it,

310
00:32:28,730 --> 00:32:32,270
check your dimensions so that you develop some expectation.

311
00:32:32,660 --> 00:32:39,200
How many people do you expect to retain? Do your merger, your drive, and then check your dimensions again?

312
00:32:40,160 --> 00:32:43,160
To make sure that we logic check our work. So what do you expect?

313
00:32:43,160 --> 00:32:48,049
What do you get? Do they match? Because as we've seen, our will just passing through.

314
00:32:48,050 --> 00:32:51,590
It won't give you any errors. Sometimes you end up with Merge.

315
00:32:51,590 --> 00:32:57,140
The two started only one row or no rows or anything. So some of the people right now want to be able to check out right away.

316
00:32:59,300 --> 00:33:04,100
I think joining our emerging data is probably the second hardest thing after reading and writing data.

317
00:33:04,670 --> 00:33:09,720
So we're we're getting a lot of these things out of the way early off. All right.

318
00:33:10,800 --> 00:33:16,050
All right. So to recap, in this session, we talked about what are some strategies to explore our data?

319
00:33:17,010 --> 00:33:21,600
Some questions you want to ask and make sure without anybody even having to tell you.

320
00:33:21,780 --> 00:33:26,250
You want to check the dimensions, the variable names, the types of objects.

321
00:33:26,670 --> 00:33:29,790
You want to make sure that they match your expectations in the data dictionary.

322
00:33:32,040 --> 00:33:37,020
You're not being annoying if you ask these kinds of questions. This is a very good thing to get these sorted out early on.

323
00:33:38,070 --> 00:33:44,250
You also want to oftentimes combine data sets and we can do that with joint functions or the merge function.

324
00:33:45,030 --> 00:33:53,009
Either of these are going to require something in common and will specify which participants are rows.

325
00:33:53,010 --> 00:33:58,950
We want to join and we can do that with a different joint function name or with different options in the merge function.

326
00:34:01,780 --> 00:34:05,650
All right. That was a whirlwind. How are we doing? What are the questions? What are folks curious about?

327
00:34:11,180 --> 00:34:14,309
All right, let's get to the coding practices stuff. All right.

328
00:34:14,310 --> 00:34:18,180
We're going to rejoin our project.

329
00:34:18,210 --> 00:34:22,720
Who works with? Right.

330
00:34:23,700 --> 00:34:31,110
So if this is your first time being in here, you can look for the data management class project with my instructor name.

331
00:34:31,590 --> 00:34:35,730
And then you'll click copy to make your own copy so that you can save all of your edits.

332
00:34:36,060 --> 00:34:42,300
Otherwise, if you were here last time, there should be a data management class project with your name and you can just click to reenter that.

333
00:34:53,390 --> 00:35:32,320
Well. All right.

334
00:35:32,320 --> 00:35:35,979
So in the lower right hand corner, there should be a panel with a whole bunch of files.

335
00:35:35,980 --> 00:35:40,180
The file we're going to work through as our pain management vacuumed.

336
00:35:40,390 --> 00:35:47,090
The quadrant markdown file. And if you click, that should open in the upper left hand corner.

337
00:35:47,160 --> 00:35:55,000
The question earlier about packages, so here's the packages tab. You can see all of these packages that are installed.

338
00:35:55,870 --> 00:36:00,370
One that is loaded right now is the base hour package. That one comes in by default.

339
00:36:01,150 --> 00:36:08,650
Look at all these install packages. There's a data sets package off loaded by default, but a whole bunch of packages already installed.

340
00:36:08,980 --> 00:36:16,150
I did not install all of these by name. Many of them are what are called dependencies.

341
00:36:16,630 --> 00:36:26,650
So if I asked to install a package in that package required ten other packages, then I will grab the install all of those as well.

342
00:36:26,680 --> 00:36:31,660
Kind of creates a whole cascade if somebody's package requires it relies on other ones.

343
00:36:31,960 --> 00:36:40,510
So that's kind of how you can end up with dozens and dozens of packages installed, maybe when you only ask for one or two or something.

344
00:36:44,090 --> 00:36:48,170
Okay. So we've got this up here. I have in my notes that we left off.

345
00:36:48,950 --> 00:36:57,140
Some are around y 70. Right after talking about our data cleaning plan.

346
00:36:57,770 --> 00:37:06,380
So just to catch ourselves up. This is going to be asking Coach Shank about loading the demographics data to make sure everybody is caught up.

347
00:37:07,070 --> 00:37:10,970
You can click this downward facing arrow here.

348
00:37:11,270 --> 00:37:14,420
This will run the previous code chunks so that we all catch up.

349
00:37:15,610 --> 00:37:19,860
Is this amazing enough for folks in back to see. Okay.

350
00:37:21,590 --> 00:37:21,829
All right.

351
00:37:21,830 --> 00:37:30,050
So my head is downward facing arrow for the loading demographics data and this will lower all of the prior coaching so that we're all set together.

352
00:37:37,390 --> 00:37:44,560
All right. So the way in which we're going to import data here, we're going to pull it directly from the CDC website.

353
00:37:45,250 --> 00:37:48,549
So the data that we're going to pull is the most recent enhanced data.

354
00:37:48,550 --> 00:37:52,230
So here. Check it out.

355
00:38:01,190 --> 00:38:06,090
All right. So we're going to pull the 2017 and 2018 and Heinz dataset.

356
00:38:06,100 --> 00:38:16,510
We're going to pull a few of them or compile the demographics data, some laboratory data, give you some examinations data.

357
00:38:17,020 --> 00:38:20,620
So for each of the datasets we're going to grab, you can click on them and read more about them.

358
00:38:21,310 --> 00:38:26,590
We see that this dataset is called. Demo underscore J.

359
00:38:27,250 --> 00:38:30,309
Plus, we know what the file name is to call it.

360
00:38:30,310 --> 00:38:34,830
So when we're in our studio, this is why I'm pulling from names.

361
00:38:35,470 --> 00:38:43,210
I'm pulling a data set called Demo Underscore J because I'm pulling the demographics data set from.

362
00:38:44,370 --> 00:38:47,670
I don't know why they do this. Each of the waves of hands gets a letter.

363
00:38:48,300 --> 00:38:51,360
So the 2016 2018 wave is the Jay Wave.

364
00:38:52,230 --> 00:38:59,370
If you're, like pulling from the previous wave. That would be that would be the prior letter.

365
00:38:59,910 --> 00:39:07,800
Okay. So this is how I figured out we're going to pull the demographics from the J wave into R and we are going to use a function for that.

366
00:39:08,920 --> 00:39:12,540
All right. So how does this function work? We're going to run the enhanced function.

367
00:39:12,550 --> 00:39:20,370
Let's look it up in the help viewer. We see that this enhanced function comes from the enhanced aid package and its

368
00:39:20,370 --> 00:39:24,840
whole purpose is to download an enhanced table and return it as a data frame.

369
00:39:25,170 --> 00:39:32,610
So this is going to talk to the Internet. It's going to grab the data set and it's going to we're expecting a data set to pop up in our environment.

370
00:39:34,130 --> 00:39:40,260
All right, so let's try this. I'm expecting when I run this down, J that a new demographics dataset is going to pop up over there.

371
00:39:40,260 --> 00:39:45,540
And what? What size do I think it's going to be?

372
00:39:46,860 --> 00:39:53,130
Look at some documentation. How many people do I think are going to be here?

373
00:39:53,910 --> 00:40:00,989
Okay. So I'm expecting, I guess, about 8700 for people to come on in this dataset.

374
00:40:00,990 --> 00:40:08,970
Let's give it a run and see what we get. Oh, I'm getting even more than that.

375
00:40:09,120 --> 00:40:13,490
We'll give it a check. Okay. So when I grabbed this and its function,

376
00:40:13,600 --> 00:40:20,280
downloading the demographics data set from the enemy's website and I'm assigning it as a new object and pulling demographics.

377
00:40:20,760 --> 00:40:24,350
And I got a new object popping up in the environment called demographics.

378
00:40:26,000 --> 00:40:31,220
Here's our chance. We can start exploring it. We have all kinds of options to explore it if you want.

379
00:40:31,520 --> 00:40:34,820
You can click on it and it'll pop up as a.

380
00:40:35,990 --> 00:40:40,460
Looks almost like an Excel sheet. And you can scroll around. See where the variable names.

381
00:40:42,510 --> 00:40:48,989
Check out what are the dimensions really start to get to know this Louisiana and Hands website.

382
00:40:48,990 --> 00:40:53,550
It explains what all these variable names are. So we can start to kind of decode it.

383
00:40:54,270 --> 00:40:59,100
Check to see if what we observe in the dataset matches what's in their data dictionary.

384
00:40:59,760 --> 00:41:05,120
Sometimes there can be some mistakes. And as we start to explore it.

385
00:41:05,120 --> 00:41:10,429
So here we can ask what are the variable names?

386
00:41:10,430 --> 00:41:16,010
So here we can ask where the chromosomes? Here's a whole bunch of them.

387
00:41:16,670 --> 00:41:22,400
This is this is tricky. They have this complex, like, capital letter code in here.

388
00:41:23,120 --> 00:41:26,210
So if we are curious about just one of these variables.

389
00:41:27,200 --> 00:41:32,299
So there's a variable called Riah gender. How do we figure out what that variable means?

390
00:41:32,300 --> 00:41:37,540
How are we going to look that up in our data dictionary? How are we going to start to decode these variable names?

391
00:41:37,550 --> 00:41:39,410
Can anybody so anybody have any ideas?

392
00:41:39,410 --> 00:41:45,440
How do we if I'm just pulling one of these variables, how are we going to look it up to find more information about it?

393
00:41:47,880 --> 00:41:51,480
Yeah. You go to the callback, here's a link to it or I had already opened it.

394
00:41:51,750 --> 00:41:59,900
So. Right. A gender. We can look for this here. We see this as participant.

395
00:42:00,610 --> 00:42:05,260
It's provided for people between the ages of zero and 150,

396
00:42:05,530 --> 00:42:13,090
and we should see it people with a value of zero or someone corresponding to our people value to course on the female.

397
00:42:13,180 --> 00:42:18,430
We expect no mistake here the number of people we expect in each of those categories

398
00:42:18,640 --> 00:42:21,910
so we can check to see does that actually match what we observe in there?

399
00:42:22,150 --> 00:42:25,420
And you can go through and do this for every single variable.

400
00:42:27,250 --> 00:42:37,030
All right. So it can become a comfortable practice saying, I'm checking on all of these documentation.

401
00:42:38,330 --> 00:42:41,330
All right. Let's continue our exploration.

402
00:42:41,630 --> 00:42:45,470
Is there another variable that anybody is curious about? What other variable should we look at right now?

403
00:42:53,820 --> 00:42:58,360
Right. I feel free to get after it on your own.

404
00:42:59,200 --> 00:43:02,470
This becomes something that becomes almost second nature.

405
00:43:02,770 --> 00:43:08,070
So some of the other things I want to do when I explore it, there's a function I really like called structure.

406
00:43:10,300 --> 00:43:14,050
So that gives us a huge amount of summary information.

407
00:43:14,290 --> 00:43:22,060
So this tells us what type of object it is. It tells us that it's a dataframe, tells us the number of rows.

408
00:43:22,240 --> 00:43:27,490
So 9254 observations and the number of variables or the number of columns.

409
00:43:28,060 --> 00:43:34,520
So it's always going to be rows first and columns second. Then there's a whole series of things.

410
00:43:34,530 --> 00:43:39,150
After the dollar sign, what does the dollar sign? Me and I got an hour to remember what that's all about.

411
00:43:41,210 --> 00:43:45,930
Yeah. Your life is very, very good.

412
00:43:47,800 --> 00:43:55,060
You're fantastic. So that's how we can tell our that we want to live within the demographic status that we want to just look at that column.

413
00:43:55,420 --> 00:44:06,879
So, for example, if we wanted to just look as we would say, grandma, dollar side, what do we want to look at?

414
00:44:06,880 --> 00:44:13,690
The riot gender that we just were talking about and maybe I won't print all 9200 of them.

415
00:44:13,690 --> 00:44:17,110
Maybe I'll just print one through ten. Okay.

416
00:44:17,110 --> 00:44:23,200
So I can call up just an individual column by name using the dollar sign.

417
00:44:23,440 --> 00:44:27,460
And then here I'm using the square bracket. So I just show me the first ten observations.

418
00:44:27,820 --> 00:44:31,690
So we see those observations for gender. They're following what we were expecting.

419
00:44:31,700 --> 00:44:35,410
So it has values of two as and one. That's what we saw in the codebook.

420
00:44:39,820 --> 00:44:44,830
We can get the dimensions from that structure function or we could get them from the dimensions function.

421
00:44:45,210 --> 00:44:50,140
You're saying there is 90 to 154 rows and 46 columns.

422
00:44:50,140 --> 00:44:56,200
You can see you can get redundant information from different functions, whichever ones are best for you.

423
00:44:58,690 --> 00:45:01,930
You're in the columns. We can ask for the names.

424
00:45:01,960 --> 00:45:07,030
This dataset doesn't have row names. Sometimes you do download datasets that have room names.

425
00:45:08,460 --> 00:45:19,170
We can ask for just the top of it. So here are the head function provides the first six rows, so we can see here are those individual identifiers.

426
00:45:19,890 --> 00:45:23,520
Here's a whole bunch of other variables and it'll keep going on to the next page.

427
00:45:28,500 --> 00:45:31,790
If you want more than six rows, you can ask for as many as you want.

428
00:45:32,180 --> 00:45:38,030
Can anyone? How we remember what? When we have this square bracket notation on a whole.

429
00:45:39,600 --> 00:45:44,370
DataFrame. What rows and columns are we pulling up right here and how do we know?

430
00:45:45,600 --> 00:45:50,730
So here I've got one, three, ten comma. Nothing. What rows and columns are we getting there?

431
00:45:57,040 --> 00:46:00,430
It mirrors one who then becomes because it's form.

432
00:46:00,850 --> 00:46:06,309
Yeah, exactly. So we always anchor ourselves on this comma and anything to the left of the commas,

433
00:46:06,310 --> 00:46:10,000
talking about rows, anything to the right of the commas, talking about columns.

434
00:46:10,510 --> 00:46:16,450
So this is saying out rows one through ten because we didn't say anything about the columns, the default, or I'll give you all of them.

435
00:46:17,140 --> 00:46:20,650
So we're expecting that. So say I want to see what's in rows one through ten.

436
00:46:21,760 --> 00:46:26,650
And so print out this nice little interactive people down here that we well there.

437
00:46:29,860 --> 00:46:34,420
All right, so you start to get familiar. Okay, this variable is numeric.

438
00:46:34,720 --> 00:46:41,020
So is this one. This one seems to have a lot of missing data, and we can check the codebook to see if that matches our expectations there.

439
00:46:41,350 --> 00:46:43,660
Are we expecting a whole bunch of missing data to come in there?

440
00:46:51,930 --> 00:46:57,630
Sometimes we want to explore individual variables, not just the whole data set, so we can use that time to explore that.

441
00:46:58,260 --> 00:47:07,400
So for example, here I'm asking how long is the variable about age and years that goes for the entire dataset?

442
00:47:07,890 --> 00:47:12,810
We say, What type of object is that? That one's a numeric object.

443
00:47:13,410 --> 00:47:16,620
So it's full of numeric. It looks like integer information.

444
00:47:17,670 --> 00:47:24,020
We can check to see are there any potential duplicates? And it looks like, yeah, there are some duplicates in there that make sense.

445
00:47:24,030 --> 00:47:27,240
These are ages. People in our study can have the same ten page.

446
00:47:28,850 --> 00:47:33,620
But these are these are this type of exploring things. And I'm only doing them right now on one variable.

447
00:47:33,620 --> 00:47:42,140
But please, please go ahead and at your in your actual position, do that do those type of activities on all of your variables.

448
00:47:43,590 --> 00:47:47,549
All right, let's do a check, your understanding. All right. So here's one thing we want to do.

449
00:47:47,550 --> 00:47:50,430
When we start with the news status, we want to explore every variable.

450
00:47:51,360 --> 00:47:57,600
So in this case, in this example, we're going to explore this variable called I, n b f NPR.

451
00:47:58,110 --> 00:48:04,470
I'm sorry, I want you to make a new R code to figure out how to find out how long is that variable?

452
00:48:05,070 --> 00:48:09,150
What type of object is that variable and what are the first few values of that variable?

453
00:48:09,750 --> 00:48:15,060
And check out a codebook to see if this makes sense with what you find out that that variable.

454
00:48:17,490 --> 00:48:24,690
So let's take a take a few minutes to ourselves to think through how we interpret this this variable.

455
00:48:52,200 --> 00:49:48,500
Sure. Sure. So it's time for both.

456
00:49:57,900 --> 00:50:04,540
Consciousness wasn't the first thing. Oh yeah.

457
00:50:05,080 --> 00:50:08,480
So that is saying within the demographics data.

458
00:50:08,510 --> 00:50:11,230
So we're just talking about that column.

459
00:50:12,100 --> 00:50:20,620
And so that is the first thing is if you want to run our code, we're going to need to put it within that chunk with a.

460
00:50:20,890 --> 00:50:27,990
Yeah. So that link function. Yeah. Perfect. Yeah.

461
00:50:28,050 --> 00:50:34,330
Please. And feel free to talk to your neighbors about something like that.

462
00:50:35,290 --> 00:50:39,630
Yeah. These are these things. Yeah. They're not apostrophes here.

463
00:50:40,870 --> 00:50:46,930
So those are called back six and they're essentially anchoring the opening and closing of where your coding are.

464
00:50:47,260 --> 00:50:53,499
Okay. So you notice that that background color gray only appears to be active and

465
00:50:53,500 --> 00:50:59,840
otherwise the background colors like we don't want make each of these functions.

466
00:51:00,250 --> 00:51:06,510
Oh yeah. So anything within here is our code and anything on the white background like appearance.

467
00:51:06,550 --> 00:51:15,160
It's just like notes yourself like three pretexts. But here's the only thing that the software will interpret as code to generate output for.

468
00:51:15,940 --> 00:51:20,010
And it's up to you how frequently you want you.

469
00:51:20,110 --> 00:51:26,140
I mean, if you wanted it, you could do the entire thing like coach oh, I like to break them up a little bit.

470
00:51:26,610 --> 00:51:31,570
Like when I click Render and if I get an error it'll tell me what's the error?

471
00:51:32,500 --> 00:51:39,040
So it's almost helps me troubleshoot because I can yeah, I think it's how we write the problem.

472
00:51:40,750 --> 00:51:51,600
So it's kind of a balance to figure out what you like to write chunks because when you're over so long but you kind of want to pinpoint your root.

473
00:51:53,650 --> 00:52:00,310
All right, let's talk this through. Can anybody help me make a code? TRUMP How do we make this foreign press enter a couple times to get some space?

474
00:52:01,340 --> 00:52:06,780
How do we get a code chunk? The C plus.

475
00:52:07,110 --> 00:52:14,340
Yeah. We can click this green C plus or you can use the keystrokes by hand to make it.

476
00:52:15,090 --> 00:52:25,570
And then in here. So let's look at this variable I and the API and see what it is on the right website over this.

477
00:52:26,420 --> 00:52:29,459
So I'll read about it. Oh, nice. Okay. Very last one. All right.

478
00:52:29,460 --> 00:52:34,330
So we see that this is a can anybody help me? This is tough angle to read from.

479
00:52:34,370 --> 00:52:40,790
What is this variable for? Ratio of family income to poverty.

480
00:52:41,050 --> 00:52:44,960
Okay. Thank you. The ratio of family income to poverty and what?

481
00:52:45,670 --> 00:52:49,430
What type of variable are we expecting it to be? Is it going to be numeric?

482
00:52:49,430 --> 00:52:55,190
Categorical? What are we expecting? Numeric kind of four categories, though, right?

483
00:52:55,190 --> 00:52:59,870
So it's not we're not actually getting people's actual income levels.

484
00:53:00,080 --> 00:53:03,260
We're getting numbers that correspond to categories of income.

485
00:53:04,370 --> 00:53:09,180
Right. It's just like, oh, is this like, okay, this.

486
00:53:09,260 --> 00:53:18,440
Thank you. Thank you. Excellent. Down at the bottom, this is it is an actual numeric range of values ranging from 0 to 5.

487
00:53:18,470 --> 00:53:26,330
Excellent. And it's like truncated at five. So it get above five and we're expecting 1200 people to have missing data.

488
00:53:28,650 --> 00:53:32,780
I don't know. I think I recall that those are for kids like they don't kids don't have that.

489
00:53:32,790 --> 00:53:36,480
Come on. We're expecting amount of. Okay.

490
00:53:36,630 --> 00:53:40,110
Thank you for correcting. So these are we're expecting this to be a numeric value.

491
00:53:41,370 --> 00:53:48,419
Let's get in there and see. What do we see? So how do we figure out what type of variable this is?

492
00:53:48,420 --> 00:53:52,200
Doesn't anybody have any way what what are some functions you use to explore this variable?

493
00:53:53,970 --> 00:53:59,340
We could look at the structure and how we look at just this variable and not the whole dataset.

494
00:53:59,760 --> 00:54:03,270
What kind of coding do I use to pull up just one column in the dataset?

495
00:54:04,980 --> 00:54:08,140
The name of the data science and science.

496
00:54:09,480 --> 00:54:13,980
Exactly. So you knew the name of the dancer. The dance that we know is called demographics.

497
00:54:13,980 --> 00:54:26,400
So to mark our time and then the name of the variable I the do notice if you type slow enough that it starts to give you options.

498
00:54:26,550 --> 00:54:31,350
I love I love this kind of autofill that keeps me from making some coding mistakes.

499
00:54:32,810 --> 00:54:35,840
Okay. All right. So when we do the structure, what do we see?

500
00:54:36,080 --> 00:54:39,470
Can anyone how we interpret this output? Is this what you observed as well?

501
00:54:39,710 --> 00:54:43,490
What does the output look like for the structure of this? How do we find out what?

502
00:54:44,680 --> 00:54:47,710
Variable type it is and what the length is.

503
00:54:51,610 --> 00:54:56,530
Several of the divers numeric in the upper and left is 95 point.

504
00:54:57,550 --> 00:55:02,050
Yeah, yeah, yeah. Fantastic. So this is telling us it's variable type.

505
00:55:02,050 --> 00:55:08,860
It's numeric. That's what we were expecting from the data dictionary and we're seeing here in the square brackets, that's the positioning.

506
00:55:09,220 --> 00:55:14,379
So it's saying those values and positions one through 9254.

507
00:55:14,380 --> 00:55:17,380
So that's the length of it. And then here's our first few values.

508
00:55:18,100 --> 00:55:24,040
Okay, so, um, position one has the value of poverty income ratio of five.

509
00:55:24,880 --> 00:55:28,030
I think that was the maximum we saw. It was truncated at that position.

510
00:55:28,030 --> 00:55:30,909
Two also has that and I think these are kids, these were age two.

511
00:55:30,910 --> 00:55:40,420
So maybe though my hypothesis is that position three has a value of 0.82 position for all we see here is our first missing

512
00:55:40,420 --> 00:55:46,810
data and we were expecting that there were going to be some missing values so we can start to see that these are numeric,

513
00:55:47,350 --> 00:55:57,370
they are not exclusively integers. There appears to be some values after decimal places, so that's an understanding of those first few information.

514
00:55:57,370 --> 00:56:04,630
So we could get all the information I asked for from the structure function some other ways we can do it that anybody try with any other functions.

515
00:56:08,950 --> 00:56:13,930
What about what other functions could you use? There's so many different ways to get similar information.

516
00:56:14,320 --> 00:56:25,740
We could try the link function. We could not even use a function.

517
00:56:25,740 --> 00:56:33,650
We could use a square. The square brackets as I just show me the first 20 observations.

518
00:56:34,430 --> 00:56:39,560
So there's there's several different ways that you press. I think we could ask for.

519
00:56:39,860 --> 00:56:43,640
There's a function called class that will tell us that it's numeric.

520
00:56:50,790 --> 00:56:53,900
So several ways for you to achieve those goals and try to get to know it.

521
00:56:54,560 --> 00:56:59,540
And this is the kind of thing I would do for every every day, every variable that I turn on is for.

522
00:57:04,350 --> 00:57:06,989
All right, let's let's take our five minute break right now.

523
00:57:06,990 --> 00:57:11,790
And when we come back, we'll load in some additional data sets, a practice joining them together.

524
00:57:12,000 --> 00:57:16,560
All right. So let's take our break right now and then we'll do Giants right after that.

525
00:57:31,290 --> 00:57:40,170
That's a very different. I just think the thing was always less.

526
00:58:00,780 --> 00:58:04,850
Hi. My first quick question was about phone records.

527
00:58:05,130 --> 00:58:10,650
Do you know how to get the slides to show? Because they showed the first one, but not the second one.

528
00:58:14,870 --> 00:58:24,109
Let's get in there. I'm not sure because I was wondering if it was just this class, but then it was happening for another class too.

529
00:58:24,110 --> 00:58:34,250
So I don't know if there's been like an update afterwards. So I, I think I sort of want to share my entire screen, but yes, my.

530
00:58:37,500 --> 00:58:42,740
So for the others, your experience was not unusual for the first time.

531
00:58:43,230 --> 00:58:50,760
It was for the first one because the first one you see, like it shows like the Duel tab.

532
00:58:50,770 --> 00:58:54,300
So like you're over there. Then for the second one, it's just.

533
00:58:55,850 --> 00:59:01,850
So just the recording of you talking. Oh, that is not nearly as helpful.

534
00:59:03,680 --> 00:59:09,930
Oh, that's. Of more coverage of my face than I expected.

535
00:59:11,160 --> 00:59:15,450
Okay, this one up here. Okay. All right. I'm going to stop this record.

