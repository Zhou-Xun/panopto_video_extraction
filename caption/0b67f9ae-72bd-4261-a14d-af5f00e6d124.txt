1
00:00:05,830 --> 00:00:13,850
Yeah. Yeah. Good morning, everybody.

2
00:00:17,320 --> 00:00:21,100
Hope you had a good break. Yeah.

3
00:00:23,250 --> 00:00:27,510
Everybody got their final homework in today, I hope.

4
00:00:28,680 --> 00:00:33,240
Yeah. Good. Good. Hopefully that went fine for you.

5
00:00:34,200 --> 00:00:37,740
It's the last one. Today is the last lab as well.

6
00:00:38,370 --> 00:00:42,000
Good. Yeah. So you've made it. You've made it to the end.

7
00:00:43,240 --> 00:00:47,250
Um, I do want to apologize again for last week or last.

8
00:00:48,150 --> 00:00:52,320
Last lectures, recording. Not sure what happened. It just. It didn't record, right?

9
00:00:52,320 --> 00:00:58,680
So I'm sorry for that. If there's any material there from that lecture that you want to go over, please let us know.

10
00:00:58,680 --> 00:01:05,520
We're going to have our final office hours next week, so please feel free to come by and ask any questions you have on that material.

11
00:01:06,660 --> 00:01:09,750
The final is released today at 2:00.

12
00:01:12,690 --> 00:01:19,980
And. Obviously during our office hours, we're not going to help you directly with those, but we can help you with material questions that you have.

13
00:01:20,800 --> 00:01:24,300
Okay. So I'm good.

14
00:01:25,790 --> 00:01:28,850
All right. So let's start today.

15
00:01:31,100 --> 00:01:36,590
So today we're going to talk about some little more advanced programing ideas.

16
00:01:38,040 --> 00:01:43,600
Um. They're kind of efficiency tricks.

17
00:01:44,470 --> 00:01:48,910
They coding. They're called arrays and macros.

18
00:01:50,260 --> 00:01:53,100
You can use markers and stuff to do some fun things.

19
00:01:53,100 --> 00:02:02,160
So if you actually go to the week 14 page on canvas, you'll find something there that might be interesting.

20
00:02:02,170 --> 00:02:05,950
I don't know. You can check it out. It's it's kind of fun.

21
00:02:06,190 --> 00:02:11,470
It's a macro that that will have says thing to you.

22
00:02:11,480 --> 00:02:21,520
So you can you can try that out. So the idea is to kind of repeat code without making yourself crazy.

23
00:02:22,540 --> 00:02:26,020
So a lot of times you're going to have to perform the same operation over and over and over again.

24
00:02:26,350 --> 00:02:34,930
So instead of having to type in the same code over and over again, these tricks will help you be more efficient with that.

25
00:02:36,250 --> 00:02:40,360
So things like when you have to record missing this and you have to do that on many,

26
00:02:40,360 --> 00:02:46,030
many variables, or if you have to do unit conversion on many variables.

27
00:02:47,190 --> 00:02:50,700
Or you're just running the same procedure over and over and over again.

28
00:02:52,070 --> 00:03:06,469
These tricks will help you with those type of situations. So for those first two examples of recoding missing this or unit conversion, you can use,

29
00:03:06,470 --> 00:03:15,020
find and replace or you can use arrays which we're going to talk about extensively if you have to run the same procedure over and over again.

30
00:03:15,590 --> 00:03:23,780
The macro is what's going to help you out with that. So again, these techniques are really just meant to be more efficient and help you out.

31
00:03:25,400 --> 00:03:29,420
You can do very simple versions of them, but they can also be very complicated.

32
00:03:30,710 --> 00:03:35,960
So you don't really have to worry about if this isn't making 100% sense to you.

33
00:03:36,320 --> 00:03:40,490
It's okay. You can still you can still code the way we've already learned.

34
00:03:41,060 --> 00:03:45,770
Okay. So just realize that you just have to make it work one way or another.

35
00:03:49,220 --> 00:03:52,640
Again. The final is going to be released at 2:00 today.

36
00:03:54,290 --> 00:03:59,990
You should think of it like a long homework. They'll be set up exactly the same way as the homework.

37
00:04:01,710 --> 00:04:10,950
Where you have to. You'll have to turn in your SAS code and that word document on the canvas by the deadline, which is December 13th at noon.

38
00:04:13,590 --> 00:04:18,020
Okay. You can obviously use any resources you have.

39
00:04:18,040 --> 00:04:24,670
It's a take home, so you can use all your notes and things, but you should not be collaborating with your your classmates on this one.

40
00:04:26,390 --> 00:04:29,760
All right. So that makes sense to everyone.

41
00:04:31,740 --> 00:04:38,910
So it's kind of a cumulative homework where you have to do a little bit of everything we've done so far in the class.

42
00:04:39,720 --> 00:04:45,720
That does include regression. So if there's questions about that last lecture we had is make sure you asked about those.

43
00:04:47,380 --> 00:04:53,060
All right. Any questions about it?

44
00:04:55,560 --> 00:05:03,400
Yes, it seemed like. Yes.

45
00:05:03,760 --> 00:05:14,159
Yep. You will? Yeah. So if you need to upload it uploaded a second time because you noticed something that you did wrong or whatever.

46
00:05:14,160 --> 00:05:21,460
That's that's fine. You can do that all the way up to the deadline. Any other questions?

47
00:05:27,480 --> 00:05:32,760
All right. It's the final thing, the last thing you're going to have to do after today's lab.

48
00:05:35,930 --> 00:05:46,520
All right. So let's get to it here. So couple of objectives here you can use find replace.

49
00:05:46,640 --> 00:05:52,490
This is something you're familiar with probably with other programs and creating arrays.

50
00:05:53,600 --> 00:06:03,860
So this is the type of thing I'm talking about here. This code is recoding missing values to assess missing, which is doc.

51
00:06:05,360 --> 00:06:08,060
This happens in in Haynes a lot, right? You've seen this.

52
00:06:09,680 --> 00:06:17,020
In this case, there's about four variables that only have sevens and nines for probably refuse and missing.

53
00:06:18,200 --> 00:06:26,130
And we want to recode those into that sass missing. And then there's a few more that have seven, seven and nine nines for the same thing.

54
00:06:27,400 --> 00:06:34,959
So you can imagine this would get pretty tedious if you had had 5050 variables or something that you had to recode.

55
00:06:34,960 --> 00:06:40,890
Right. So one option is to copy and paste.

56
00:06:43,690 --> 00:06:48,749
Right. You can do a fine and replace to change the variables, so you might just copy that.

57
00:06:48,750 --> 00:06:53,040
First, if an else two lines there, you can copy it.

58
00:06:54,030 --> 00:06:59,760
You can paste it on to the next line and then you can kind of find and replace the variable names.

59
00:07:02,920 --> 00:07:07,060
Right. And this works exactly the same as it would in word or anything else.

60
00:07:07,540 --> 00:07:10,940
So you can, you know, you can control C to copy.

61
00:07:10,960 --> 00:07:17,860
You can control V to paste. You can go to edit and find or replace here as well.

62
00:07:18,820 --> 00:07:24,670
So this works exactly the same as any other kind of Windows based program that you probably already know.

63
00:07:26,470 --> 00:07:31,810
Okay. That's still creating a whole bunch of code, though, right?

64
00:07:32,230 --> 00:07:37,300
It's fine. It works, but it's still going to be a lengthy piece of code.

65
00:07:38,840 --> 00:07:44,220
So the other option is to use what's called a res. So it works like this.

66
00:07:46,010 --> 00:07:51,200
You. This is only a data step. You create an array statement with that array.

67
00:07:51,950 --> 00:07:55,590
There you give the array a name. In this case, Recode.

68
00:07:55,610 --> 00:08:04,450
Seven. Nine. In brackets, you tell it how many elements it has, and then you can list the elements in this case,

69
00:08:04,840 --> 00:08:08,290
the four variables that we want to recode the missing for.

70
00:08:12,350 --> 00:08:16,460
Then you can combine that array with what we call a do loop.

71
00:08:18,250 --> 00:08:23,830
So this do I equal 1 to 4 is a loop which will start with I equals one.

72
00:08:25,260 --> 00:08:33,620
Run the code and then it'll advance one unit to two and run the code and advance to three and run the code.

73
00:08:33,650 --> 00:08:49,590
Advance to four. And run the code. So in this case the code is if the array with index AI is in seven nine, then set the same thing to missing.

74
00:08:53,290 --> 00:08:59,420
So again, this do loop. When you enter the do loop, it's going to set equal to one the first value.

75
00:09:00,870 --> 00:09:10,860
So then it's going to run the code with equal one. So Recode 79 one is the first element of the array recode seven nine.

76
00:09:12,180 --> 00:09:17,690
Which is the variable. Damn, Kumail, Isee up there and.

77
00:09:18,940 --> 00:09:25,390
Does everyone see that? So that's a way to index a variable.

78
00:09:25,420 --> 00:09:32,100
Basically in this list, this array. And you can refer to them with their index number.

79
00:09:34,040 --> 00:09:42,550
So it's very convenient. When you're done with the loop, you have to have an end statement, as I'll do statements to.

80
00:09:44,070 --> 00:09:51,270
And then you can drop the I. That index actually creates a variable called AI in your data.

81
00:09:51,810 --> 00:10:00,840
AI is just a name you could you know, you could call it. Do Scout equals 1 to 4 and stick Scott in there and b it would still work.

82
00:10:00,960 --> 00:10:05,470
It's just a variable name. A name for the index.

83
00:10:06,840 --> 00:10:11,070
So then you drop it because it's not really important. Any more.

84
00:10:13,410 --> 00:10:18,680
So in this case, we did one array and do loop for the seven nine code.

85
00:10:18,960 --> 00:10:23,790
We did the exact same thing for the 7799 Recode.

86
00:10:25,720 --> 00:10:30,520
Of course, if those were. If the seven nines were.

87
00:10:32,540 --> 00:10:36,180
Nonexistent in these other three variables.

88
00:10:36,590 --> 00:10:43,700
You could have done one array and said in seven, nine, seven, seven, nine, nine, all in one array.

89
00:10:44,300 --> 00:10:51,500
But that's assuming that those are not legitimate values for the other variables.

90
00:10:53,410 --> 00:10:57,600
Okay. So you'd have to check your codebook to be sure of that.

91
00:11:00,320 --> 00:11:09,280
This makes sense, everyone. See how this is working? It's very convenient, especially if you had 50 of these things.

92
00:11:09,290 --> 00:11:24,329
Yes. Somewhat different to. Yeah.

93
00:11:24,330 --> 00:11:32,040
So that's that's a good point. In this particular example, we're actually recoding the original variable.

94
00:11:32,040 --> 00:11:35,230
We're overwriting it. With the missing value.

95
00:11:36,040 --> 00:11:39,729
If you didn't want to do that, well, that's the next example.

96
00:11:39,730 --> 00:11:43,550
We'll see. Okay. So just hang out a minute for that.

97
00:11:44,570 --> 00:11:47,870
Let me break this down a little bit more. So you've got your race statement.

98
00:11:49,260 --> 00:11:53,600
Yuriko, 17, is the name that you're giving the array.

99
00:11:54,380 --> 00:11:59,060
It's got four elements that you put in brackets, and then you list those four elements.

100
00:11:59,930 --> 00:12:03,620
You can kind of think of this like a file cabinet almost with withdraws.

101
00:12:06,090 --> 00:12:11,550
You can use the dash and the double dash as shortcuts for sequential, sequential or adjacent variables.

102
00:12:11,970 --> 00:12:15,000
As we've seen before, you can still use at.

103
00:12:16,690 --> 00:12:20,500
Instead of having to type in all the elements, you can do that.

104
00:12:22,480 --> 00:12:27,070
And then again, this explains that you look a little bit more.

105
00:12:29,350 --> 00:12:35,230
Okay. So we're going to run the same code for each index, one through four.

106
00:12:39,630 --> 00:12:47,160
Okay. So here's the example where you don't want to recode the same variable, but you want to give it a new name.

107
00:12:48,440 --> 00:12:57,860
Well, you can just create it a second array. So the first array lists the variables you're trying to recode and the second array.

108
00:12:59,020 --> 00:13:03,570
Actually lists new variable names. You can do this to.

109
00:13:05,100 --> 00:13:11,280
They don't. Those variables don't have to exist if they don't exist. SAS is going to create them as variables.

110
00:13:14,100 --> 00:13:23,300
Okay. So then you've got the same kind of do loop and the same type of code, except instead of.

111
00:13:24,600 --> 00:13:30,300
Recoding the same variable name you're now recoding the new version of it to dot.

112
00:13:36,240 --> 00:13:46,070
Everyone see that? So by creating that array with new variable names, it's going to create four new variables with those names.

113
00:13:47,650 --> 00:13:50,960
And. Which are all empty.

114
00:13:51,230 --> 00:13:55,430
They're all missing at first. And then you fill them in with the do loop.

115
00:13:57,880 --> 00:14:03,420
Based on the values of the original version. Okay.

116
00:14:07,950 --> 00:14:11,040
If you do create new variables like this in an array.

117
00:14:12,410 --> 00:14:18,310
SAS will assume that there are numeric variables. Just like if you had a.

118
00:14:19,350 --> 00:14:22,960
A like an informant statement or something, right?

119
00:14:25,990 --> 00:14:33,070
If you want to tell sense that they are character instead of numeric, you just have to use a dollar sign like we've seen before.

120
00:14:36,190 --> 00:14:48,750
Yes. Would it be the same?

121
00:14:49,440 --> 00:14:53,520
Like normal? Uh huh.

122
00:15:00,200 --> 00:15:10,760
Yeah, yeah, yeah. So the so the new versions here, the R versions will be the same as what the original one got recoded to here.

123
00:15:13,330 --> 00:15:16,460
Yeah. Yep.

124
00:15:17,530 --> 00:15:26,610
So it would be the same now that in this case, however, you'd still have the original variable with the original values as well.

125
00:15:28,190 --> 00:15:33,560
In the first example, it overwrites it with the new version. And in this example, you have both versions.

126
00:15:35,270 --> 00:15:39,170
That's the difference. Okay.

127
00:15:42,630 --> 00:15:48,250
All right. Another thing, I probably mentioned it later, but I'll mention it here also.

128
00:15:50,470 --> 00:15:56,460
Having to do with the numeric versus character. Arrays have to be one or the other.

129
00:15:56,700 --> 00:16:01,290
They can't have mixed numeric and character elements.

130
00:16:02,580 --> 00:16:06,000
So an array is either all numeric or all character.

131
00:16:08,490 --> 00:16:13,950
Okay. You can do some generic type arrays as well.

132
00:16:14,210 --> 00:16:17,840
So there is a couple of nice shortcuts here as well.

133
00:16:19,340 --> 00:16:24,890
If you don't actually know how many elements you have. You can just use Star.

134
00:16:27,100 --> 00:16:38,800
Kind of a wild card. And you can use all numeric and character as as the lists of variables.

135
00:16:39,280 --> 00:16:44,520
So all is a list of all variables. In the dataset.

136
00:16:46,180 --> 00:16:50,290
Numeric is a list of all numeric variables and characters. A list of all character variables.

137
00:16:51,810 --> 00:16:54,810
So you can use that as your element list.

138
00:16:55,750 --> 00:17:04,950
In your array. This works really well with the wild card number of elements because a lot of times you don't know how many you have.

139
00:17:07,820 --> 00:17:12,020
And why count them? You can just use the wild card. Okay.

140
00:17:14,680 --> 00:17:20,980
But you can use that in the same kind of way. So in this example we're listing the array includes all numeric variables.

141
00:17:21,990 --> 00:17:24,990
And here we're using the dim function.

142
00:17:27,070 --> 00:17:33,280
Which will. Act as the ending element of the due loop.

143
00:17:35,130 --> 00:17:38,940
Right. So Dim Recode would be the number of elements in Recode.

144
00:17:41,630 --> 00:17:44,840
Okay. So SAS is counting these for you, essentially.

145
00:17:47,650 --> 00:17:51,850
And here we're recoding seven, seven and 992.

146
00:17:54,890 --> 00:18:04,320
Okay. So if all your numeric variables had the same missing codes seven, seven and nine nine, this would work just great.

147
00:18:08,100 --> 00:18:13,270
Right. Other important notes.

148
00:18:13,990 --> 00:18:19,690
They're only used in data steps. Please do not exist outside of data steps.

149
00:18:22,590 --> 00:18:31,720
They're temporary within the current data step. So you can't use the same array in a in a subsequent data step.

150
00:18:32,590 --> 00:18:36,460
You'd have to rewrite. You'd have to recode that whole array if you wanted to use it again.

151
00:18:39,640 --> 00:18:43,000
And they can only contain variables of the same format. So this is what I already mentioned.

152
00:18:44,090 --> 00:18:47,330
You can't mix character and numeric variables in the same array.

153
00:18:49,340 --> 00:18:56,620
Okay. Obviously you can create multiple arrays, one for the numeric and one for the carrier, but you can't mix them.

154
00:19:00,970 --> 00:19:07,750
All right. Key takeaways. Rays are used in data steps to repeat the same function on many variables,

155
00:19:08,770 --> 00:19:13,240
and they work with do loops to cycle over all of the variables in your list.

156
00:19:19,540 --> 00:19:26,050
All right. Macros. So we're learning objectives in this section.

157
00:19:27,430 --> 00:19:34,360
We want to be able to program and use macros to create generic code for repetitive processing and define local and global macro variables.

158
00:19:36,340 --> 00:19:43,870
Success macros are going to allow you to create a generic piece of code that has kind of these placeholders.

159
00:19:45,410 --> 00:19:53,780
You can think of it like a function almost. And that in in that way you can run it on multiple different variables.

160
00:19:55,720 --> 00:19:59,080
These can get really complicated. They really can.

161
00:20:00,040 --> 00:20:09,160
But we'll look at just some simple examples here. And we want to focus on using using it to automate or replicate code over and over again.

162
00:20:11,040 --> 00:20:18,090
So an example scenario, let's say we're interested in looking at the relationship between health endpoints and many different exposures.

163
00:20:18,630 --> 00:20:25,050
So we might have a bunch of different pollutants and we're interested in seeing how those affect health outcomes.

164
00:20:28,140 --> 00:20:35,580
So we can write our first model. Here's a prop rig.

165
00:20:37,970 --> 00:20:41,250
It's all it's outcome is log.

166
00:20:41,270 --> 00:20:46,570
No, it's probably. I don't know.

167
00:20:47,210 --> 00:20:53,830
It's some kind of some kind of health health variable that we've transformed.

168
00:20:54,850 --> 00:21:02,860
And we've got a PMC bus, which is some kind of pollutant and some other covariance to go in the model as well.

169
00:21:03,950 --> 00:21:07,070
So we could run this and get our results for that one pollutant.

170
00:21:07,880 --> 00:21:11,810
But if we wanted to do it on all the pollutants.

171
00:21:13,490 --> 00:21:20,660
So there's six different ones here. We could write the same track rig and just, you know, replace out the pollutant.

172
00:21:21,380 --> 00:21:25,920
We could do that. But it would be a lot easier to do with a macro.

173
00:21:27,410 --> 00:21:38,240
So essentially. You write that first one, but you take out the pollutant, the piece that you want to change.

174
00:21:40,720 --> 00:21:50,700
Okay. And keep it as a placeholder. And you replace it with what we call a macro variable.

175
00:21:51,900 --> 00:21:57,980
Which we're calling pollutant. Macro variables are indicated by this ampersand in front of it.

176
00:22:02,230 --> 00:22:05,620
Okay. And then you can actually make this.

177
00:22:06,620 --> 00:22:14,270
A little piece of red code into a macro by putting it in between a macro statement.

178
00:22:15,460 --> 00:22:21,090
In a macro end statement that the end. So essentially.

179
00:22:23,410 --> 00:22:27,860
I kind of have a math background. So I think of these like a function. Right.

180
00:22:27,910 --> 00:22:31,740
You have f of x equals x squared plus x plus three or something.

181
00:22:31,880 --> 00:22:35,550
That's a quadratic function where x is your variable.

182
00:22:36,490 --> 00:22:42,430
Right. And you can then stick any kind of X into that function and get out a result.

183
00:22:43,000 --> 00:22:50,770
Right. So that's kind of like this is like you're you're creating a macro, it's called health and it's variable.

184
00:22:50,770 --> 00:22:56,410
Its input is pollutant. Which is the macro variable.

185
00:22:59,590 --> 00:23:09,820
Okay. And then in your code here, any place that shows up, you can replace that with the macro variable pollutant.

186
00:23:12,800 --> 00:23:20,660
Okay. You do need the end and the end at the at the bottom to tell that you're done with your macro program.

187
00:23:23,990 --> 00:23:28,520
Okay. So what happens if you just run this code?

188
00:23:28,550 --> 00:23:33,540
Well, nothing at all, because it just essentially defines the function.

189
00:23:33,710 --> 00:23:44,070
You haven't actually used it. So you just have to invoke that macro or that function, if you will, with an ampersand.

190
00:23:45,150 --> 00:23:48,810
And the macaroni with the appropriate input.

191
00:23:53,820 --> 00:23:57,420
So instead of running writing the same prop rig.

192
00:23:59,120 --> 00:24:10,320
Eight times. I'm writing it once inside a macro, and then all I have to do is invoke that macro with that percent.

193
00:24:12,420 --> 00:24:20,740
And the name and the input. Okay.

194
00:24:24,320 --> 00:24:29,240
Notice when you do define the macro, it has a has that little percent in front of it.

195
00:24:30,230 --> 00:24:35,090
This is how SAS knows it's a macro and not some other variable that you're trying to create.

196
00:24:37,170 --> 00:24:42,010
Okay. This just making sense.

197
00:24:43,590 --> 00:24:52,540
Pretty cool, right? It's good stuff. You can use many different inputs.

198
00:24:52,560 --> 00:24:55,990
You can have more than one input. Into your macro.

199
00:24:56,840 --> 00:25:00,280
So in this case, we have three outcome pollutant and group.

200
00:25:01,750 --> 00:25:08,440
So now I'm allowing the the outcome in my model to change.

201
00:25:08,950 --> 00:25:15,280
I'm allowing the exposure to change and I'm allowing a, a bi group.

202
00:25:17,040 --> 00:25:20,520
So it's kind of a strata, a stratification group here.

203
00:25:21,390 --> 00:25:27,270
If I wanted to do this by gender or by race, I could stick that into the group variable.

204
00:25:29,700 --> 00:25:33,090
So you can you can imagine how these could get pretty complicated pretty quick.

205
00:25:34,910 --> 00:25:39,800
But it's very convenient if you have to do the same type of thing many times.

206
00:25:42,170 --> 00:25:52,460
Just make sure if you're using more than one input that when you invoke the macro, the order is exactly the same as the function definition.

207
00:25:55,940 --> 00:26:01,230
Okay. All right.

208
00:26:06,130 --> 00:26:12,100
You can include macro variables in parentheses if you wanted to include it in a title, for example.

209
00:26:12,940 --> 00:26:20,180
But you have to use double quotes. SAS will not read them inside single quotes.

210
00:26:22,580 --> 00:26:27,620
It'll just stick an ampersand pollution in there and an ampersand outcome in there in that title.

211
00:26:28,830 --> 00:26:36,120
But if you have double quotes, it'll actually replacing the ampersand outcome with the appropriate value that you put into it.

212
00:26:38,580 --> 00:26:42,500
Okay. So that don't work also.

213
00:26:48,970 --> 00:26:52,830
What we just created was what we would call a local macro variable.

214
00:26:54,730 --> 00:27:02,470
And it can only be used within that macro itself. But there is such a thing called a global macro.

215
00:27:04,710 --> 00:27:08,100
And these can be used anywhere in your program at all. It doesn't have to be.

216
00:27:10,130 --> 00:27:13,430
In a data statement or anything like that. It can be used anywhere.

217
00:27:15,740 --> 00:27:18,770
And it's really useful for.

218
00:27:22,370 --> 00:27:33,820
Not having to type the same thing many times. Like if you had a big long path string in this case, you could set that with a percent let.

219
00:27:35,950 --> 00:27:40,270
So actually there's two of them here, percent let. We're giving it a name minder.

220
00:27:40,450 --> 00:27:42,400
And that equals to this long string.

221
00:27:43,780 --> 00:27:55,570
If the string occurs in your code a bunch of times, instead of having to change that, every time you change the file path, you can change it once.

222
00:27:56,810 --> 00:28:00,180
At the top. With this percent let.

223
00:28:01,870 --> 00:28:06,810
And then you referred to it. Just like any other macro variable.

224
00:28:06,820 --> 00:28:12,160
So with a ampersand in the name of the variable itself.

225
00:28:14,350 --> 00:28:23,580
And that'll essentially just take that file names. In the data step here in the file statement and replace it with that big long string.

226
00:28:26,900 --> 00:28:31,380
Okay. Yeah.

227
00:28:31,530 --> 00:28:38,040
So if you got a big long pile file path name, it shows up in your code ten times.

228
00:28:39,240 --> 00:28:45,120
But you need to change the file every once in a while because you've got it updated or what have you.

229
00:28:46,200 --> 00:28:51,720
This will allow you to only have to change it once. All right.

230
00:28:52,170 --> 00:29:02,780
It's another nice efficiency shortcut. This just breaks down a little bit what I just said.

231
00:29:03,560 --> 00:29:10,640
So the percent that says to create a macro variable called file names and it's got the value of that past string.

232
00:29:12,080 --> 00:29:17,960
Which you can then use throughout your code. Okay.

233
00:29:20,080 --> 00:29:23,110
So another final note here on Mac, global macro variables.

234
00:29:24,690 --> 00:29:31,520
You can make the macro variable equal to a list of variables. If you're going to want to execute the same code on them later.

235
00:29:32,600 --> 00:29:43,989
So in this example. The global macro variable cat bar is a list of the categorical variables gender,

236
00:29:43,990 --> 00:29:51,940
race and ethnicity and count bar is the list of continuous variables age, BMI, etc.

237
00:29:53,740 --> 00:29:57,100
And then you could stick those in to say.

238
00:29:58,960 --> 00:30:06,730
A model statement. Right. Instead of having to type them all out again.

239
00:30:08,020 --> 00:30:11,560
If you're going to use multiple model statements, you could have this.

240
00:30:12,570 --> 00:30:18,780
Work for you in a little bit more efficient way. Yes.

241
00:30:19,440 --> 00:30:23,380
So this one is global? Yes.

242
00:30:24,150 --> 00:30:32,620
I'm here with some local ones that can actually. That's this one.

243
00:30:32,670 --> 00:30:39,780
Once you execute it, execute everything. Yes.

244
00:30:39,780 --> 00:30:42,780
So the difference here really is that.

245
00:30:44,100 --> 00:30:50,070
These global ones. Once you run this led statement, it's it's set.

246
00:30:51,220 --> 00:30:54,880
And you can use it in any subsequent procedure or data step that you want.

247
00:30:56,140 --> 00:31:04,470
As many times as you want. Where the the local one, which is defined inside the macro, only exists inside that macro.

248
00:31:06,060 --> 00:31:14,430
So like. Like these ones here. Outcome pollutant in group only exist inside this macro.

249
00:31:15,210 --> 00:31:23,190
Right. So you can't then use, say, ampersand outcome in another procedure or another data step.

250
00:31:25,790 --> 00:31:29,720
Okay. It won't. It'll just tell you that that doesn't exist.

251
00:31:30,950 --> 00:31:36,120
It only exists inside that macro. Does that make sense to everyone?

252
00:31:40,770 --> 00:31:51,540
Okay. So. Yeah. These this type of macro, obviously, is for repeating a large chunk of code,

253
00:31:51,540 --> 00:31:55,830
a procedure or a data step or whatever that you're going to have to repeat many, many times.

254
00:31:56,760 --> 00:32:06,390
Where these global ones are generally for replacing a string or a list that shows up in your code many times at different places.

255
00:32:09,060 --> 00:32:13,060
Okay. All right.

256
00:32:13,840 --> 00:32:23,840
New questions. Well, we're done early.

257
00:32:25,040 --> 00:32:29,660
What do you know? Makes up for the last one where we had to rush.

258
00:32:36,590 --> 00:32:42,680
I'll be here for a little while. If you have questions about that last lecture, since we did rush through it a little bit at the end,

259
00:32:42,770 --> 00:32:48,350
especially logistically, please feel free to come up and ask questions.

260
00:32:49,310 --> 00:32:54,170
Otherwise, you can start on your lap if you want. Okay.

