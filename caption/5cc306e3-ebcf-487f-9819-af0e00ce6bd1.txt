1
00:00:08,140 --> 00:00:24,330
Okay. Let's get started. So let me so before getting started, any, any questions, but I'm going to go over the homework one a little bit.

2
00:00:25,500 --> 00:00:29,100
So if you have a question of a homework one, let me finish this.

3
00:00:29,760 --> 00:00:32,900
We'll start with you first and go with that.

4
00:00:32,910 --> 00:00:39,150
But if there is any other questions, we can start with that first.

5
00:00:42,490 --> 00:00:47,980
Okay. So, uh, so let's go through.

6
00:00:48,490 --> 00:00:54,850
So we, we talked about just to, to wrap up and to remind, sorry, recap, uh,

7
00:00:55,540 --> 00:01:03,250
we talked about we can, uh, the algorithm to calculate the mean and variance.

8
00:01:04,300 --> 00:01:09,280
And when you calculate the mean and variance, it is a very simple calculation.

9
00:01:10,240 --> 00:01:16,990
If you calculated the mean first and the scan the data again to calculate the variance again.

10
00:01:18,360 --> 00:01:23,470
But if you are not in the situation, so this is to test out what you do.

11
00:01:24,010 --> 00:01:30,760
But if you are not in the situation where you can read the data only once, then you can.

12
00:01:31,810 --> 00:01:46,990
Oh, sorry. So then you can calculate the minimum variance without the sorry, without reading the data twice or using one pair so we can like this.

13
00:01:47,470 --> 00:01:53,530
So the the mathematical fact here leveraging is this relationship.

14
00:01:53,950 --> 00:02:09,550
Okay. But the problem with this algorithm is that it's so this procedure, uh, this, this part may involve is subtracting two very large numbers.

15
00:02:10,300 --> 00:02:20,020
Sometimes when you subtract the two very large numbers, uh, it could, uh, it could lose in the numerical procedures.

16
00:02:20,500 --> 00:02:26,920
Uh, if you imagine the case, X of A is really, really large and then all the offsets.

17
00:02:27,160 --> 00:02:32,560
So let's say X adviser 1 billion, one 1,000,000,203 and so on.

18
00:02:33,010 --> 00:02:38,740
Then those squares will be, will have like 818 significant digits.

19
00:02:39,310 --> 00:02:43,690
And then you are going to have problems when you subtract these numbers.

20
00:02:44,590 --> 00:02:54,610
Okay. So these are what is a so basically, in other words, by this one pass are going to be prone to numerical errors.

21
00:02:54,820 --> 00:03:02,830
Okay. Maybe you may not notice in most of the cases, but in some cases you may encounter these problems.

22
00:03:03,430 --> 00:03:09,969
And we have in the case where you're losing in a slight amount of the numerical precisions,

23
00:03:09,970 --> 00:03:15,790
but you can we can easily make a case where the problem is even worse.

24
00:03:17,200 --> 00:03:22,060
So, uh, so that that's what we have done.

25
00:03:24,090 --> 00:03:39,190
So, so to, so to avoid these potential inaccuracies, uh, the, we can use another algorithm called West Target Rhythm.

26
00:03:39,620 --> 00:03:49,630
Okay. So I briefly went over the what the West target to me is because this is what you are supposed to do with a home of one problem one.

27
00:03:50,290 --> 00:03:58,810
And I mean, you are not implementing this, but you probably have to implement something a little more, more complicated than this.

28
00:03:59,140 --> 00:04:08,740
So. So that's, that's the task. So, uh, let, let's try to go over this part of behaviorism.

29
00:04:08,740 --> 00:04:16,060
So the thing we want you to do is basically the idea of the West Fargo region is that we keep.

30
00:04:16,270 --> 00:04:30,190
So previously, what's the what's the statistic we maintained we maintain that this X bar is basically just some sum of all the numbers.

31
00:04:30,190 --> 00:04:36,879
We maintain some of all numbers and we maintain the sum of squares of all numbers

32
00:04:36,880 --> 00:04:41,650
of these the these are later adjusted by dividing by N or some other numbers,

33
00:04:42,130 --> 00:04:44,430
but that's the number we maintain.

34
00:04:45,070 --> 00:04:58,120
But those are those are in mathematically sufficient information, but numerically not, you know, in numerically not.

35
00:04:58,990 --> 00:05:02,410
How do you say it's numerically not sufficient in terms of precision.

36
00:05:02,410 --> 00:05:08,920
Right. So uh, it is, is a prone to those information, is prone to numerical errors.

37
00:05:09,250 --> 00:05:15,610
So what kind of information should we store to be more, less prone to those kind of errors?

38
00:05:16,300 --> 00:05:21,110
Well, if I can. Calculate own.

39
00:05:21,140 --> 00:05:28,760
So if I can maintain only the difference between the mean and actual numbers.

40
00:05:28,760 --> 00:05:32,810
So let's say all the numbers are 1 billion, one 1 billion to 1000000003.

41
00:05:33,380 --> 00:05:41,060
And if I know the mean will be around the 1,000,000,001 billion, then I can just subtract the 1 billion and just keep the one, two, three.

42
00:05:41,060 --> 00:05:44,810
That'll be a lot more precise information you want to keep, right?

43
00:05:45,590 --> 00:05:50,899
So that's the basic idea. But the problem is that we don't know what the mean will be.

44
00:05:50,900 --> 00:05:57,560
Exactly. Okay. So the idea of the West algorithm is that let's calculate the running mean.

45
00:05:58,340 --> 00:06:05,300
Running mean. Mean means that I'm going to calculate a.

46
00:06:06,630 --> 00:06:17,140
Uh. Calculate the mean of the observation I observed so far, because I cannot observe the future observations, I cannot predict what the mean is.

47
00:06:17,560 --> 00:06:24,970
But I can predict, I can calculate the mean compared to all the previous information.

48
00:06:24,980 --> 00:06:34,150
So instead of the keeping the sums, if I keep keep the running mean it's going to be a little better, right?

49
00:06:34,300 --> 00:06:39,340
Especially if you if you keep a lot of a lot of information.

50
00:06:39,340 --> 00:06:46,330
So that's a lot. So if the total number is really large, then, you know, running mean is probably better than just some.

51
00:06:46,340 --> 00:06:53,890
So that's this one one thing and once you haven't running mean let's calculate the sum of the squares.

52
00:06:54,310 --> 00:07:03,730
Okay. Some of the squares are comp the assuming the current the mean is it's a total mean is running mean.

53
00:07:03,730 --> 00:07:05,500
So let's calculate the variance.

54
00:07:05,620 --> 00:07:15,700
In other words, let's calculate the variance assuming that current mean is actual the actual mean so that that's what it's trying to do.

55
00:07:16,750 --> 00:07:25,059
So what these quantities eventually trying to calculate is sum of all these values across are

56
00:07:25,060 --> 00:07:34,440
equal one to N okay and what what this is trying to calculate is is a running mean okay.

57
00:07:35,020 --> 00:07:46,240
And you need to be careful about the orders here so when you calculate the running mean I'm calculate the running mean after updating this part.

58
00:07:46,480 --> 00:07:55,299
So I'll get back to that. Okay. So then the two obvious questions are how does this calculate those those thing.

59
00:07:55,300 --> 00:08:01,960
It's not obvious to me how, how this if you update the X bar in this way,

60
00:08:02,440 --> 00:08:08,740
why does it why does it calculate the why does the estimate the running mean?

61
00:08:09,310 --> 00:08:14,080
So let's get to that first. Okay. So we went went through this really quickly.

62
00:08:14,500 --> 00:08:16,240
So I'm just redoing it.

63
00:08:17,380 --> 00:08:29,170
So, so here's the so but you can prove by induction logical let's say X part of n means that it's running mean up to the end observations.

64
00:08:29,440 --> 00:08:33,970
Okay, so let's assume that this quantity,

65
00:08:34,270 --> 00:08:42,910
this quantity I calculate is actually calculate the running mean until until are equal until end observations.

66
00:08:43,510 --> 00:08:53,829
And what I want to prove is that if you apply this algorithm and I'm applying this running mean so I'm I'm just using the previous

67
00:08:53,830 --> 00:09:08,590
running mean and add this value which is basically just calculating this value just so instead of I'm putting end plus one now,

68
00:09:08,860 --> 00:09:20,380
okay, now if you do that, then you can rewrite the situation as a linear combination of this value and this value.

69
00:09:20,500 --> 00:09:24,040
Right. And X bar is running x bar over.

70
00:09:24,040 --> 00:09:31,989
N is running means. So this is a summation. So if you if you replace it with this, you can get rid of and get rid of.

71
00:09:31,990 --> 00:09:43,899
DN This is a summation of x x by the summation of x, x or y plus x and plus one is summation of x, i, i i through one, through n plus one.

72
00:09:43,900 --> 00:09:49,150
So this is an excellent summation of x one to extend and you're just adding one more.

73
00:09:49,630 --> 00:09:57,130
So these and these are equivalent, okay? Which means that, oh, this is the running mean of two and plus one observation.

74
00:09:57,550 --> 00:10:07,210
So this is really true that if like, if I apply this rule, then I do get the running me okay.

75
00:10:07,780 --> 00:10:21,280
So that's, that's how you probably get so proving this is relatively easy, but coming up with this algorithm is a little trickier, right?

76
00:10:21,670 --> 00:10:28,650
So you need to think through you need to better calculate what kind of, what kind of a.

77
00:10:31,210 --> 00:10:36,370
The what kind of calculation or what kind of combination of the previous previous reading,

78
00:10:36,370 --> 00:10:42,040
mean and current observation will generate the new running mean.

79
00:10:42,050 --> 00:10:50,620
So that's you need to do some some back calculation and there's no general rule to do it and you need to come up with a solution.

80
00:10:51,340 --> 00:10:56,860
And once you come up with a solution, you can use this prove by induction that this actually works.

81
00:10:57,640 --> 00:11:09,060
Okay. So this part is fairly straightforward to understand, but this part is harder to understand.

82
00:11:09,060 --> 00:11:17,430
So let me try to get through it. Okay. So the various part, what I'm trying to do is this.

83
00:11:17,520 --> 00:11:25,060
Okay, so I'm assuming. So what I want to do is this as so square if.

84
00:11:25,290 --> 00:11:33,180
If I update this way, I want to make sure that this square is calculating this very.

85
00:11:34,360 --> 00:11:42,459
Okay. So that's what I want to do. Okay. This value is basically running various running variants,

86
00:11:42,460 --> 00:11:49,900
but it's not actually various because you need to actually this is not running variance multiply by n minus one.

87
00:11:50,020 --> 00:11:53,410
Right. So that's that's what it is. Okay.

88
00:11:54,490 --> 00:12:00,400
So then the the update rule we're doing is this.

89
00:12:00,880 --> 00:12:08,920
Okay. So here we got to be a little bit careful because this one is not running mean up to and plus one.

90
00:12:08,920 --> 00:12:13,719
This is running mean of n. Okay. Okay. So we're doing the running.

91
00:12:13,720 --> 00:12:18,420
We are comparing against the running mean up to the previous observation.

92
00:12:18,430 --> 00:12:25,060
That's why we are doing this calculation before updating the mean.

93
00:12:25,300 --> 00:12:31,060
So then at this stage, x bar is is still the running mean up to the previous observation.

94
00:12:31,250 --> 00:12:38,600
The new observation was not accounted for. If you change this order of these corporations, it's not going to be correct.

95
00:12:38,620 --> 00:12:42,310
You can try and it's not going to be going to work. Okay.

96
00:12:42,730 --> 00:12:55,090
So why does this work? So you can prove it basically by the same way, prove by induction, you can prove that this eventually is equivalent to this.

97
00:12:55,510 --> 00:12:59,800
But this is much more complicated calculation to prove.

98
00:13:00,340 --> 00:13:11,590
I'm going to go through it. So it's the difficult part is it's not very clear the how to come up with this.

99
00:13:11,620 --> 00:13:19,870
Right. So you need to do the trial and error sometimes of coming up with these equations are really tricky because this is a squared equation,

100
00:13:19,870 --> 00:13:26,170
so there is not so many possibilities. But if it's not a squared equation, it's a cubic or some more complicated one.

101
00:13:26,530 --> 00:13:30,010
It's getting harder and harder. Okay. So.

102
00:13:30,820 --> 00:13:36,830
Okay, so let this one is basically this part of PN.

103
00:13:39,010 --> 00:13:43,170
So, so as. So and n is basically this part.

104
00:13:43,180 --> 00:13:47,380
Right. So you just to write this part in this way.

105
00:13:47,590 --> 00:13:50,860
Okay. So this is this part is so when squared.

106
00:13:51,040 --> 00:13:59,290
Okay. Now the other part and over and plus one, you can write this one minus one of N plus one.

107
00:13:59,840 --> 00:14:06,760
Okay. So we're doing this for, for this part and we're expanding this X and plus one squared.

108
00:14:07,090 --> 00:14:14,020
Okay. And the other part is this this part is a tricky we're doing the two times X and plus one and this.

109
00:14:14,680 --> 00:14:19,690
So we're two times this and this part.

110
00:14:19,930 --> 00:14:30,550
But instead of instead of saying X of and blah, I'm just writing down this as a x of an x.

111
00:14:30,790 --> 00:14:38,380
So the summation of them. And this should actually go to an end and it should go down.

112
00:14:38,500 --> 00:14:47,860
Right. But there is a, there is this coefficient ANOVA and plus one so ends and cancels out and m plus one is here.

113
00:14:47,860 --> 00:14:59,740
So I don't have a easy way to right now, but I can I can write here if that helps.

114
00:15:01,870 --> 00:15:05,020
Can you see this or is it too dark? Should I turn the light up?

115
00:15:10,740 --> 00:15:22,130
So basically you're doing this and plus so I'm just doing the middle part of your your your is expanding extending

116
00:15:22,850 --> 00:15:32,550
by expanding this but I'm doing this part and plus eight times two times X and plus one and so and right.

117
00:15:33,360 --> 00:15:39,210
So I'm writing this part as.

118
00:15:40,390 --> 00:15:51,790
So many fellow. So I divide by ten and cancels out and cancels out this part because and plus one times this and two over and minus one.

119
00:15:52,570 --> 00:15:55,900
And that's the part. So that's that.

120
00:15:56,410 --> 00:16:04,570
Okay, so this part. Okay. You see my mouse get this part is what I'm talking about here.

121
00:16:05,080 --> 00:16:17,730
Okay. The last part is basically it just the end and super and plus the ones here and x and square.

122
00:16:17,740 --> 00:16:27,270
Right. So and this is the same as I.

123
00:16:29,660 --> 00:16:34,130
So the white board is not very clean about health care.

124
00:16:39,700 --> 00:16:58,600
Apologies. And spear and spear and ax experts appear to be pretty scared.

125
00:16:58,990 --> 00:17:03,070
So this basically, this square cancels out.

126
00:17:03,400 --> 00:17:10,340
That's why you have, uh. Uh.

127
00:17:11,540 --> 00:17:15,140
I'm sorry. I. I think I. Oh, okay.

128
00:17:16,330 --> 00:17:21,130
Uh. I'm sorry. I made a mistake. Let's do it again.

129
00:17:22,270 --> 00:17:30,010
I shouldn't have. Multiply both what you have and over at minus two and plus one, an extended period.

130
00:17:31,690 --> 00:17:35,740
So this, uh. This is summation of X of time.

131
00:17:36,430 --> 00:17:41,260
And so you square them to the end and cancels out.

132
00:17:41,800 --> 00:17:46,900
Then you have an and plus one and summation of X of time period.

133
00:17:46,900 --> 00:17:51,280
So. So you have this, right? So you have this.

134
00:17:53,140 --> 00:17:58,540
Okay, then, uh, then if you.

135
00:17:58,750 --> 00:18:03,160
So now this part becomes a little more complicated.

136
00:18:04,150 --> 00:18:08,020
But what you have is basically, uh.

137
00:18:10,980 --> 00:18:16,370
Uh. Okay. Okay.

138
00:18:16,380 --> 00:18:23,940
So, yeah. So now, now putting this together is hard.

139
00:18:23,940 --> 00:18:27,060
It is just I say this one line, but it's it's really not.

140
00:18:28,200 --> 00:18:32,970
So excise spared minus.

141
00:18:36,210 --> 00:18:45,870
So you have this and you have one minus and plus one X and plus one squared.

142
00:18:47,960 --> 00:18:51,620
Minus two. Can you see this? Well. Okay.

143
00:18:53,510 --> 00:19:01,260
And plus one. Plus one summation of X of I plus.

144
00:19:02,390 --> 00:19:06,049
So summation of X of I. It's a it's the index is important.

145
00:19:06,050 --> 00:19:16,920
So I'm going to put the index here. And. Plus and and this one summation of the episode I.

146
00:19:18,380 --> 00:19:27,590
Scared. Okay, so here are three things that I want to change this that I want I want to x plus one is that there is something going on here.

147
00:19:27,590 --> 00:19:38,720
So let's use this part and this part together that you have an X plus excess period plus.

148
00:19:42,840 --> 00:19:53,100
X and plus appeared like this part that then I'm going to put the poor circle in the part that I used.

149
00:19:53,370 --> 00:20:00,990
Right. And you have X for four for this x i plus.

150
00:20:01,290 --> 00:20:08,380
Right. You have. Okay.

151
00:20:08,410 --> 00:20:14,270
So. So you have this part and this part.

152
00:20:14,270 --> 00:20:29,630
Great. So, uh, this is, uh, plus and plus one, one minus, uh, and minus one.

153
00:20:29,640 --> 00:20:33,620
So that I'm just adding these. These are these two.

154
00:20:34,010 --> 00:20:37,700
Okay, so this becomes a minus n good.

155
00:20:38,780 --> 00:20:47,710
And a summation of. Excited and scared and so scared.

156
00:20:50,000 --> 00:20:53,959
And this part is too.

157
00:20:53,960 --> 00:21:03,140
And plus one X and plus one summation of x i.

158
00:21:04,010 --> 00:21:14,600
And you have you have this part so negative and plus one and then plus one square.

159
00:21:14,600 --> 00:21:19,460
So this part views these particulars. So everything is used, right?

160
00:21:20,600 --> 00:21:28,410
So then this part becomes so many shallow, positive, and plus one exercise.

161
00:21:28,870 --> 00:21:34,100
Now, now the index has changed. Okay, and.

162
00:21:39,860 --> 00:21:43,730
And here what you have is that.

163
00:21:44,330 --> 00:21:47,690
And plus one. Plus one.

164
00:21:49,490 --> 00:21:54,770
And what you have here is that.

165
00:21:54,830 --> 00:22:00,020
Okay, so you have this accent plus the one square.

166
00:22:00,590 --> 00:22:13,180
Okay. And you have. Minus two X and plus one summation of X I want to end.

167
00:22:14,470 --> 00:22:21,340
And this part is I'm sorry, this is this is negative.

168
00:22:21,340 --> 00:22:24,640
I'm sorry about that. And this is plus.

169
00:22:26,200 --> 00:22:41,840
And this is plus. So the so this part only and lab and it's left and pencil is now so still one went and plus one but you have x squared, right?

170
00:22:42,410 --> 00:22:57,020
So this is Y and plus one, this becomes an x ten plus one plus summation of x or y equals one through n n squared happens.

171
00:22:57,450 --> 00:23:03,440
Okay. So this part was really complicated, but now you know that this is a summation of.

172
00:23:06,260 --> 00:23:09,530
I call one end plus one excise square.

173
00:23:09,890 --> 00:23:21,380
So you have this part. You have this part, and this is exactly the same as the publication, except that I change the end to end plus one.

174
00:23:22,850 --> 00:23:27,620
So this by end option, this works.

175
00:23:27,620 --> 00:23:33,950
But this is a lot more complicated to follow because it's a scary question.

176
00:23:34,490 --> 00:23:43,410
Okay. Questions. Okay.

177
00:23:43,410 --> 00:23:47,760
So so we we now understand that this is mathematically correct,

178
00:23:48,330 --> 00:23:57,540
but does it computationally really work meaning that does this really resolve the precision issue that we had in the previous example?

179
00:23:58,620 --> 00:24:03,330
Okay. So that's what we're going to try. So.

180
00:24:10,620 --> 00:24:17,260
So let's go through. This example.

181
00:24:18,850 --> 00:24:22,960
So we had this writing on the file stream.

182
00:24:23,420 --> 00:24:29,080
Right. So we, we, we, we created some file that takes time.

183
00:24:40,910 --> 00:24:48,740
And let's do this and create a file here.

184
00:24:49,490 --> 00:24:57,710
Okay. And. Just so that's the rerun, the one episode which we had before.

185
00:24:58,400 --> 00:25:07,280
So if you run this one episode, then if you do the shift enter, you can just run it in with the keyboard.

186
00:25:08,030 --> 00:25:13,950
So this is the standard deviation from zero to million.

187
00:25:14,330 --> 00:25:20,570
But if you do that 100 million to 1 one and the 1 million you see, the precision is happening.

188
00:25:22,160 --> 00:25:32,899
So. Then this these pressures just shouldn't happen if you use the standard, standard deviation function.

189
00:25:32,900 --> 00:25:37,280
So there must be something wrong with this one PSR algorithm in terms of precision.

190
00:25:38,360 --> 00:25:41,240
So what we are going to do here is that we're going to do the West starting with.

191
00:25:41,420 --> 00:25:48,080
So you you probably want to compare line by line whether this is identical to this.

192
00:25:48,230 --> 00:25:52,760
So when you have some algorithm, you need to have two steps.

193
00:25:53,060 --> 00:26:00,680
One is that you are if you conceptually conceptualize, you always make this okay.

194
00:26:00,830 --> 00:26:08,960
So pseudocode is a good way to do it. Pseudocode doesn't have to be specific to our language or any language of learning.

195
00:26:09,440 --> 00:26:11,780
Learning this is a mathematical representation.

196
00:26:13,220 --> 00:26:22,760
Then when you write the AI distributive into our language, you need to write in a way that conforms the syntax of this particular language.

197
00:26:23,210 --> 00:26:35,240
So in this in this case, I maintain these three numbers total observation average invariant running average and running variance and running variance.

198
00:26:35,240 --> 00:26:38,470
I'm into running variance multiply by and minus one.

199
00:26:38,480 --> 00:26:45,800
So running variance is updated and I calculate the difference because I don't want to calculate this multiple times,

200
00:26:46,100 --> 00:26:53,540
calculate the difference and I update the running variance first and I update the run in mean next.

201
00:26:53,690 --> 00:27:03,319
So you can try to switch this thing and it wouldn't work so that after after updating running our mean and running variance each

202
00:27:03,320 --> 00:27:08,720
iteration at the end you need to adjust for the running various because the running variance always multiply by minus one,

203
00:27:09,110 --> 00:27:12,580
so do the adjustment and that's the algorithm.

204
00:27:12,590 --> 00:27:15,650
So should be the same to what's here.

205
00:27:16,200 --> 00:27:24,319
Okay, so but it's a good practice that you actually try to implement algorithm on your own without looking at looking at

206
00:27:24,320 --> 00:27:31,340
this because each person has a different flavor to implement something and you have a version that actually works.

207
00:27:31,340 --> 00:27:35,360
So you try to your version and see whether your version works.

208
00:27:35,750 --> 00:27:42,079
So my recommended way is to make a new code that don't look at this code and try to

209
00:27:42,080 --> 00:27:47,500
implement this algorithm yourself and try to run it and see whether that I wouldn't works.

210
00:27:47,510 --> 00:27:52,850
If it doesn't work, it's a good way to learn how to debug because you have the working code.

211
00:27:53,480 --> 00:27:59,120
So that's my strongly recommended way to learn this are utilize this code basis.

212
00:27:59,540 --> 00:28:05,030
Okay. So anyway, so let's try the same thing.

213
00:28:05,270 --> 00:28:19,320
So try to calculate the 0 to 1 million this number looks right now try to add 100 million, 201 million which have had a precision issue before.

214
00:28:19,880 --> 00:28:30,920
Looks like this value exactly is exactly C right so now and this is actually seem to I mean this is the last four digit you don't you don't need

215
00:28:30,920 --> 00:28:40,069
to worry about because you know that the put put on operation is 16 digits and probably these two algorithms are slightly calculated differently.

216
00:28:40,070 --> 00:28:46,010
So as long as it's a correct in the first 15 to 16 digits, those are fine.

217
00:28:46,130 --> 00:28:50,500
Okay. If we're printing out up to 20 digits intentionally here.

218
00:28:52,300 --> 00:28:58,960
Okay. So that's the end of the Western way.

219
00:29:01,590 --> 00:29:11,990
So I would like to end this lecture part in this part of the lecture with some discussion.

220
00:29:12,000 --> 00:29:22,500
So I know that some some are sitting by yourself, but if you can move and try to talk to someone next to you, that will be very appreciated.

221
00:29:23,250 --> 00:29:28,680
And let's try to see which part you understood, which part was confusing.

222
00:29:29,130 --> 00:29:38,010
Let's try to discuss. I'll give you 3 minutes and let's come back and ask any more clarifying, clarifying question.

223
00:29:38,010 --> 00:29:40,590
This question would be it's not easy to come up with,

224
00:29:41,460 --> 00:29:52,080
but hopefully it's a it's reasonable to at least at least to prove the correctness and understand how what is going on.

225
00:29:52,080 --> 00:29:55,290
Exactly. Okay. Yeah. 3 minutes.

226
00:29:55,530 --> 00:30:20,220
Let's start. I.

227
00:30:25,960 --> 00:30:44,840
Using. So.

228
00:31:13,170 --> 00:31:16,700
That's. Just.

229
00:31:32,320 --> 00:31:44,070
I think it's. Only the.

230
00:31:44,580 --> 00:31:52,400
You. You. So then four years.

231
00:31:58,650 --> 00:32:07,550
Yeah. So, I suppose.

232
00:32:11,120 --> 00:32:26,810
So that. But it's only going to get.

233
00:32:31,590 --> 00:32:40,480
More than thousand 100.

234
00:32:44,070 --> 00:32:54,810
The drive. It's my understanding.

235
00:32:58,440 --> 00:33:07,180
I remember. My name.

236
00:33:10,230 --> 00:33:18,760
It's like. If you had your next.

237
00:33:24,510 --> 00:33:31,650
It was also during the. You get a little bit.

238
00:33:34,850 --> 00:33:51,770
France. So we want.

239
00:33:54,410 --> 00:33:58,730
It just going to be different people.

240
00:34:06,390 --> 00:34:13,110
Okay. So 3 minutes up. I, I realized that this is not a quarter.

241
00:34:13,110 --> 00:34:16,530
It is not meant to be qualification. This is meant to be Wells Fargo Systems.

242
00:34:17,340 --> 00:34:24,989
So, uh, you know, the question I put it here is which algorithm is more numerically stable?

243
00:34:24,990 --> 00:34:33,540
I guess as is obvious in a, you know, what kind of cases are, what kind of corner cases you can come up with?

244
00:34:33,540 --> 00:34:39,749
Because some may argue that, oh, you know, this is this is not large difference.

245
00:34:39,750 --> 00:34:48,960
So I I'm okay with living with this multiple inaccuracy so you can convince that those people that, oh, you actually have even worst case.

246
00:34:49,170 --> 00:34:53,670
So what do you need to do in which cases decide what doesn't work?

247
00:34:53,670 --> 00:34:58,110
So those are, those are the examples.

248
00:34:58,110 --> 00:35:02,430
But I think more interesting example is how this West algorithm works.

249
00:35:02,700 --> 00:35:08,610
And can you, can you come up with, you know, the solutions for.

250
00:35:11,100 --> 00:35:17,400
Yeah, solutions for the. The the problems like homeworks.

251
00:35:17,620 --> 00:35:20,960
Okay. So, yeah, that.

252
00:35:21,000 --> 00:35:27,420
That's. Yeah. That's what, what you. I wanted to discuss together.

253
00:35:28,610 --> 00:35:36,280
So any questions? The discussion solved all the problems.

254
00:35:37,330 --> 00:35:41,790
Okay, so, wow, you guys are smart enough.

255
00:35:43,140 --> 00:35:49,020
Uh. Uh. It part be.

256
00:35:50,100 --> 00:35:54,239
So it's slightly you said. Yeah, there's a slight drip.

257
00:35:54,240 --> 00:35:57,240
Oh yeah. This slide. Okay. Yeah, yeah, yeah.

258
00:35:57,510 --> 00:36:11,220
Um, I was wondering how the picture of the first line through the first line is this one before that, how, how do or how do you show this?

259
00:36:11,610 --> 00:36:15,030
So this is a this is a known fact. So I didn't go through it.

260
00:36:15,030 --> 00:36:29,490
But we can we can try to try to prove it again. So, um, summation of, and, uh, so I mean, this may not be, you may not have learned this before,

261
00:36:31,020 --> 00:36:37,490
but basically this is a summation of I combined x squared minus two x.

262
00:36:37,500 --> 00:36:42,090
Um, I said plus x squared, right?

263
00:36:43,830 --> 00:36:49,170
And this is the summation of X of I and I scared to.

264
00:36:50,550 --> 00:36:59,010
Summation of ex I extend first summation of access period.

265
00:36:59,540 --> 00:37:04,950
Right. So now here the tricky part is that this is a constant.

266
00:37:05,370 --> 00:37:08,730
Okay. This does not depend on my.

267
00:37:09,210 --> 00:37:13,350
So you can take this out of the summation.

268
00:37:13,530 --> 00:37:16,700
So you can do this. Okay.

269
00:37:18,500 --> 00:37:26,870
So what and this is also constant, which means that you can take this out of the summation that this is one.

270
00:37:27,320 --> 00:37:31,460
Okay. So, again, this part is basically.

271
00:37:35,210 --> 00:37:43,940
This part is, too. So this part is equal to end times and end times the mean.

272
00:37:44,240 --> 00:37:50,970
So to end. X and part Nixon are here and not here.

273
00:37:51,510 --> 00:37:55,780
This is M in times and square. So this is ActionScript.

274
00:37:55,800 --> 00:38:04,380
This is sex and square. So you have to two and scared.

275
00:38:04,980 --> 00:38:10,050
Okay. So. Okay.

276
00:38:10,140 --> 00:38:14,580
I mean, you can write it. Sorry not to. I just one.

277
00:38:15,510 --> 00:38:23,879
So you can write this way. Or you can. You can write x x x empire squared is the use of doing this.

278
00:38:23,880 --> 00:38:28,350
You can say. Oh, this is the one over and x of I.

279
00:38:28,860 --> 00:38:39,870
If you write this way, then you can have x or y squared and one over n because you've got your squared in this good summation of x squared.

280
00:38:41,170 --> 00:38:50,900
Okay. Other questions.

281
00:38:51,910 --> 00:39:00,920
If. I think that was disgusting. It was over the word politics for equals as far as what it was like.

282
00:39:01,040 --> 00:39:09,349
Because I'm not a sex. All right at 40 so I'm curious about like we discussed like in terms of accuracy

283
00:39:09,350 --> 00:39:15,610
what you assume it explains like super large and then four X minus X bar varieties.

284
00:39:16,400 --> 00:39:20,510
Mm hmm. Then add those two together would cause issues.

285
00:39:22,400 --> 00:39:26,930
And one of them, that's actually something. So you're talking about this case.

286
00:39:27,200 --> 00:39:33,170
This is a small value and this is a larger value. So are you worried about that case?

287
00:39:34,160 --> 00:39:37,640
So. Okay. So that's a very good question. Okay.

288
00:39:38,480 --> 00:39:41,720
So and what else can you do?

289
00:39:41,810 --> 00:39:46,160
So that's that's that's what I'm asking. So you have only 16 digits.

290
00:39:46,310 --> 00:39:53,600
You need to calculate the mean. Okay. Well, if you know that, I'm going to lose my precision.

291
00:39:53,630 --> 00:40:00,500
So I have like, for example, one one, you know, one a quadrillion.

292
00:40:00,830 --> 00:40:05,640
One 1 quadrillion to that, you are really having really a mass limit.

293
00:40:05,740 --> 00:40:15,480
The more precision then just the you don't have any good way to maintain your precision if you want to keep all the 16 years

294
00:40:15,500 --> 00:40:24,470
so you can develop your own algorithm to mitigate the problem by I'm going to subtract these numbers before doing that,

295
00:40:24,590 --> 00:40:30,080
but that's very specialized algorithm. So general algorithm, a very good question.

296
00:40:30,650 --> 00:40:33,800
It's not the problem you can solve with the current precision.

297
00:40:34,010 --> 00:40:39,110
That's a very good question. Okay. Okay.

298
00:40:39,740 --> 00:40:53,479
So, so I want to jump onto a formal one now because I want you to give a clear instructions

299
00:40:53,480 --> 00:41:00,500
to what what's expected of you and what while you can discuss what you cannot.

300
00:41:00,530 --> 00:41:04,460
So just to be to be clear, to set a boundary.

301
00:41:04,610 --> 00:41:13,160
Okay. So the first target the first thing is basically the problem is just like this.

302
00:41:13,340 --> 00:41:23,510
So you're developing something similar to the Western wisdom, but instead of calculating the variance, you are supposed to calculate covariance.

303
00:41:24,140 --> 00:41:27,480
Okay. So this is not easy. Okay.

304
00:41:29,190 --> 00:41:36,000
So if you try to come up with this solution, you will see that, oh, this is not as straight forward.

305
00:41:36,210 --> 00:41:40,440
You now think that we're struggling with straight forward because this is a little trickier.

306
00:41:40,740 --> 00:41:46,290
Okay. So and I mean, it's not too hard, I in my opinion.

307
00:41:46,680 --> 00:41:56,100
So I hope that you can come up with the equation. But if you cannot come up with the equation, you can discuss with others.

308
00:41:56,440 --> 00:42:00,300
Okay. That's okay. Because because that's not are sharing the code.

309
00:42:00,600 --> 00:42:10,090
Okay. The purpose of this homework is that to help you do the real problem, the actual statistical computing problem.

310
00:42:10,110 --> 00:42:13,920
So we are very strict about not sharing any code.

311
00:42:14,160 --> 00:42:17,430
Okay. So but you can share the idea.

312
00:42:17,970 --> 00:42:21,879
I cannot come up with this equation. So then that's okay to discuss.

313
00:42:21,880 --> 00:42:29,400
We don't copy. All right. So I know this is your homework, so you want to learn it so you can get the idea discussed with others.

314
00:42:29,430 --> 00:42:32,460
That's okay. But if you really need help, I.

315
00:42:32,560 --> 00:42:36,120
I just have the right equation, but doesn't work in coding or something like that.

316
00:42:36,780 --> 00:42:40,530
Don't share with your code with others. Okay. That's dangerous.

317
00:42:40,530 --> 00:42:48,490
Dangerous territory. You you can genuinely, if I look at others code and not try to copy anything, but that's very hard thing to do.

318
00:42:48,510 --> 00:42:53,790
So that's the policy is that, you know, not no sharing of code whatsoever.

319
00:42:53,910 --> 00:42:56,960
If your code will be used in your submission. Okay.

320
00:42:57,450 --> 00:43:01,470
If you have example code, this is not going to the part of any of the submission.

321
00:43:01,590 --> 00:43:09,360
That's okay. But, you know, that's that's also gray area because you could you the other person for the copyright so.

322
00:43:10,490 --> 00:43:18,270
So yeah we'd be sure that the you know not plagiarizing your code but you know those kind of discussions.

323
00:43:18,270 --> 00:43:21,490
Okay. Okay. Is that clear?

324
00:43:21,510 --> 00:43:30,479
Any any question about the guideline? Okay. So then and you basically have this naive version of covariance.

325
00:43:30,480 --> 00:43:42,270
It's very similar to the version you can think about calculating the all the sums in sum of all the sums of x and Ys and x x y sums,

326
00:43:42,270 --> 00:43:48,770
and you can calculate the covariance like this. And this one will have a precision problem.

327
00:43:48,780 --> 00:43:54,750
So you're going to you need to have a problem that the code that doesn't have this Christian problem.

328
00:43:55,050 --> 00:43:58,200
Okay. Okay.

329
00:44:00,510 --> 00:44:05,940
I'm going to I'm going to go through the example of how you would test this code.

330
00:44:06,690 --> 00:44:10,470
Well, let me let me try that first. So this is this is the example code.

331
00:44:10,500 --> 00:44:13,860
So this is what I would encourage you to do this.

332
00:44:13,860 --> 00:44:22,050
So you got to be careful because this this problem is particularly important because you need to calculate the stream, the covariance.

333
00:44:22,560 --> 00:44:26,940
Okay. So meeting that, you need to read the data only once.

334
00:44:27,300 --> 00:44:38,100
Okay. But I didn't want to make this problem too complicated from read by reading from a file because of that.

335
00:44:38,100 --> 00:44:43,980
That'll that'll just, you know, be hard to, you know, do the extra code, extra layer of coding.

336
00:44:44,880 --> 00:44:49,770
So I'm going to just let you pretend that you are reading the data only once.

337
00:44:50,670 --> 00:44:53,700
So you shouldn't I mean, it's it's kind of cheating.

338
00:44:53,700 --> 00:45:03,210
I mean, it's not plagiarism, but it's a cheating if you use the data twice or dimple if you ignore the structure.

339
00:45:03,370 --> 00:45:06,659
Oh, and I can just loop twice first.

340
00:45:06,660 --> 00:45:12,140
I can't get the mean first, second, second move. I'm going to calculate the in the covariance.

341
00:45:12,150 --> 00:45:15,180
That's, that becomes really the problem. We're not going to allow that.

342
00:45:15,310 --> 00:45:23,280
Okay. We're going to check that. Whether you use the use the one loop so that yeah, that's a manual checking.

343
00:45:23,280 --> 00:45:31,110
So your order operator may not mean a detective, but that's that's not going to be, you know, accepted solution.

344
00:45:31,200 --> 00:45:38,040
Okay. So you need to stick to this structure. Basically, you can you can add some code here.

345
00:45:39,030 --> 00:45:43,710
Okay. You may you make so you you may add some code here.

346
00:45:43,800 --> 00:45:46,980
You may add some code here. You may have some code here.

347
00:45:47,460 --> 00:45:51,480
But you should only use X and Y within this loop.

348
00:45:51,720 --> 00:45:56,400
Okay. And you should not be use it once, once you're out of the loop.

349
00:45:56,730 --> 00:46:01,680
Okay. That's the that's the way to calculate in the stream the way.

350
00:46:01,980 --> 00:46:10,390
Right. Does it make sense? So the, you know, inside this loop only access excel by.

351
00:46:10,420 --> 00:46:19,440
So for example if I in this loop if you calculate the mean of X every time know it's a cheating because you're not supposed to do that.

352
00:46:20,580 --> 00:46:23,770
Does it make sense? Yeah. Okay.

353
00:46:23,790 --> 00:46:30,189
So. I think I have clear instructions here, but if it's not clear, let me know.

354
00:46:30,190 --> 00:46:33,400
So you're just a concept, so you're just a calculator.

355
00:46:33,700 --> 00:46:39,790
One person. This is supposed to be just a one sided way, and I hope that you understand what that means.

356
00:46:41,560 --> 00:46:50,400
Okay. So then before going to problem two, how do I tested?

357
00:46:50,490 --> 00:46:55,160
Okay. So you can test your code in this way.

358
00:46:55,170 --> 00:47:00,840
So you can. So there are two testing pages, actually.

359
00:47:01,720 --> 00:47:05,210
So one extra.

360
00:47:05,250 --> 00:47:11,070
So this one, you haven't haven't seen it. So in the in the homework, there is a two, two testing pages.

361
00:47:12,060 --> 00:47:15,810
First testing page is the one I recommend you to start with.

362
00:47:16,290 --> 00:47:19,980
Okay. So this is a nice covariance you have.

363
00:47:21,120 --> 00:47:24,240
This is to to test covariance you.

364
00:47:24,510 --> 00:47:30,600
You will have. And you need to implement your. So you can copy the copy and paste your code here.

365
00:47:30,990 --> 00:47:34,440
Okay. And this this code is just a competition code.

366
00:47:35,400 --> 00:47:42,540
And if you run this, it'll it'll output the covariance calculated by these three functions.

367
00:47:42,540 --> 00:47:46,409
And in this example, you don't have precision issue.

368
00:47:46,410 --> 00:47:48,300
So the three solution will be the same.

369
00:47:48,930 --> 00:47:57,690
But if I add an X and Y some value, then covariance calculation becomes more challenging in terms of the numerical procedure.

370
00:47:57,690 --> 00:48:03,929
So you're going to see different answers. So first one is enable covariance is not working same.

371
00:48:03,930 --> 00:48:07,380
The covariance is more accurate, it's the same same as before.

372
00:48:08,010 --> 00:48:11,940
And to test covariance, all the obvious will be correct.

373
00:48:12,390 --> 00:48:15,520
But you need to implement. So if you run, this is not going to work.

374
00:48:15,540 --> 00:48:18,710
You need to paste the right code here to make it work.

375
00:48:18,720 --> 00:48:22,330
And this is the expected output. That's how you use this.

376
00:48:22,380 --> 00:48:30,390
Okay. So so that's that's that's was you got the code, right?

377
00:48:30,690 --> 00:48:35,590
It's very likely that it works for all the ten examples we are going to test.

378
00:48:36,270 --> 00:48:42,240
But we're giving a five example in this test code so that you can actually test it.

379
00:48:42,330 --> 00:48:51,780
So you can get at least a half of the points. And if most likely, if that works, these two have the have the of the case, it'll work in all cases.

380
00:48:51,780 --> 00:48:59,129
But you will you will check that inaugurating. So this one is a little complicated procedure.

381
00:48:59,130 --> 00:49:04,380
So I, I don't necessarily encourage you to understand what this code is doing,

382
00:49:04,380 --> 00:49:09,960
what what you're supposed to do is just run the cells and paste your code here.

383
00:49:10,770 --> 00:49:17,070
And if you do everything here, it actually. So this is very, very similar to how we check in the operating.

384
00:49:17,760 --> 00:49:21,570
So it's a little different, but conceptually similar.

385
00:49:22,350 --> 00:49:29,260
So it check the whether your your solution is correct or not and then it tells you how long it takes.

386
00:49:29,310 --> 00:49:36,180
So you have a two limitation. You have a time limit and you have the correct you need to have a correct result.

387
00:49:36,640 --> 00:49:39,680
So time limit is like generous is like 20.

388
00:49:40,140 --> 00:49:47,400
This one is 10 seconds, I think. So 10 seconds. So you yeah, you probably within within hit the limit.

389
00:49:47,550 --> 00:49:50,670
But you obviously you need to make make it efficient.

390
00:49:50,670 --> 00:49:56,160
If your time is much larger than this, there is something wrong with your code like most likely.

391
00:49:57,390 --> 00:50:03,360
So your for example, if you are calculating the mean every time the Grove did that very slow obviously.

392
00:50:04,230 --> 00:50:17,190
So anyway, so that's how you tested and it'll test these five cases and then that'll be, that'll be reassurance that your code will work.

393
00:50:17,190 --> 00:50:24,000
So you use this extra paid test page only if you think my code is ready to submit.

394
00:50:24,030 --> 00:50:28,170
I'm going to just check it before submitting. That's. That's the how you use it.

395
00:50:29,460 --> 00:50:35,460
Okay. So, so same thing for problem two.

396
00:50:37,110 --> 00:50:40,290
So problem two is a little more complicated.

397
00:50:41,340 --> 00:50:45,570
Okay. So this looks possibly intimidating.

398
00:50:46,950 --> 00:50:53,540
So because if you haven't learned a linear regression or polynomial regression, but this is a feeling of polynomial regression.

399
00:50:54,800 --> 00:50:59,040
A hint is that this is in that really complicated regression you are actually

400
00:50:59,040 --> 00:51:06,310
estimating when you two variables if you if you if you look at the problem carefully.

401
00:51:06,420 --> 00:51:13,560
So again, mathematical discussions are totally okay. You cannot share your code, but this is the expected output.

402
00:51:14,340 --> 00:51:22,919
So in the problem to you are most likely, most likely you'll your implementation will work with these two examples.

403
00:51:22,920 --> 00:51:27,120
But when you try to do extra page, you might have problem because of this.

404
00:51:28,710 --> 00:51:32,870
This one you you've got to be really careful about the precision, okay?

405
00:51:33,330 --> 00:51:35,909
Because you need to retain the maximum precision.

406
00:51:35,910 --> 00:51:44,940
And if it's not giving a correct, correct result, it's probably there is a some part that that makes your precision losing so you.

407
00:51:45,610 --> 00:51:50,410
Try to make sure that you are getting the appreciation. Okay. Uh.

408
00:51:52,030 --> 00:51:56,090
What else? Okay, so. Yeah.

409
00:51:56,140 --> 00:52:00,700
And you're not supposed to use any statistical packages.

410
00:52:00,820 --> 00:52:07,450
Okay, so it's. So. So this one is.

411
00:52:07,990 --> 00:52:12,310
So. So you get the way how you can check it.

412
00:52:12,700 --> 00:52:16,450
Is that. So I guess.

413
00:52:21,670 --> 00:52:24,690
So you can you can use function. Okay.

414
00:52:27,010 --> 00:52:30,020
But. So let's set out.

415
00:52:30,030 --> 00:52:34,580
This is really small. Okay.

416
00:52:35,910 --> 00:52:41,230
So. Uh. Try to make.

417
00:52:42,040 --> 00:52:45,790
Can I repeat? Okay. So.

418
00:52:47,770 --> 00:52:51,009
So if you if you do help a certain function,

419
00:52:51,010 --> 00:52:59,110
let's say if you use a you know com some if you you calculate the cumulative sum this is that this is a function.

420
00:52:59,110 --> 00:53:04,960
So if you see the actual help you'll see that which packaged it.

421
00:53:05,020 --> 00:53:13,150
So this each, each function is a some packages and you are allowed to use the function that is only in the base packages.

422
00:53:13,870 --> 00:53:19,480
Okay. So you cannot if you use a function outside this package, you have your problem.

423
00:53:19,510 --> 00:53:24,010
Your code will fail in the actual testing. Then it's not going to work.

424
00:53:24,730 --> 00:53:30,010
Okay. So make sure that your so whenever you use some function there are built in it are make sure that you're

425
00:53:30,010 --> 00:53:36,730
using the function that are in base unless there is an indication that you can use these packages.

426
00:53:36,940 --> 00:53:43,120
Okay. So for example, you cannot use like all done here, I think because this is a stats package.

427
00:53:44,470 --> 00:53:47,980
So you can use PIN or something because some problem becomes really easy.

428
00:53:47,980 --> 00:53:55,330
If you use this one word you can use like l m this is a linear restriction fitting and if you use Elm, it just gets that package.

429
00:53:55,350 --> 00:54:01,959
It's a very easy problem. You cannot do that. Right? So this is a this is the asking the problem.

430
00:54:01,960 --> 00:54:10,440
You actually implement this part. So that that's the purpose of these, you know, not allowing any other packages in the base packages.

431
00:54:10,450 --> 00:54:14,280
So so that that's this one thing I wanted to mention.

432
00:54:14,710 --> 00:54:23,800
Okay. So any question for so far, problem three, I think it's the same same kind of problem.

433
00:54:24,040 --> 00:54:31,779
So you you need to calculate this quantity and you will realize that this looks mathematically very complicated.

434
00:54:31,780 --> 00:54:38,349
But you can try to once you understand this problem, it's really just computational problem.

435
00:54:38,350 --> 00:54:43,540
And states, same thing. You need to make the numerical precision as accurately as possible.

436
00:54:43,540 --> 00:54:47,259
So these are also there is a tricky part that you may lose a lot of, you know,

437
00:54:47,260 --> 00:54:55,660
make a precision and you need to think about how do I what is a good way to keep the the significant digit as much as possible?

438
00:54:56,980 --> 00:55:00,810
Well, this takes much longer than I thought, but I, I,

439
00:55:01,560 --> 00:55:08,680
I think it was important to go over all these homework problems because it's first homework and it's important to get it right.

440
00:55:10,030 --> 00:55:16,430
And so I, I think the deadline it's a deadline for error in troubles next week is all right.

441
00:55:17,400 --> 00:55:21,730
So and so this these are typical homeworks.

442
00:55:21,910 --> 00:55:30,010
So if you think that this is really, really challenging, you know, I just you know, because the homework is the main part of the grading,

443
00:55:30,010 --> 00:55:36,940
I'm just trying to, you know, make sure that you as a feel comfortable with this kind of level of difficulty in the homework.

444
00:55:36,940 --> 00:55:40,050
So please try. Oh, you know,

445
00:55:40,480 --> 00:55:47,740
as early as possible and from from the from this Friday the to will start or

446
00:55:47,770 --> 00:55:52,360
grading so you can get more input whether you're getting the right answer or not.

447
00:55:53,260 --> 00:55:57,760
So you have a chance to revise your code if if it doesn't work.

448
00:56:00,340 --> 00:56:03,930
Okay. I feel good.

449
00:56:04,560 --> 00:56:12,080
Let's move on to the lecture. Three finally. Okay, so we are a little behind from my expected schedule.

450
00:56:12,960 --> 00:56:21,970
So. So now let's move on to quite different things.

451
00:56:22,540 --> 00:56:30,340
Okay. So this is more in computer science jargon and this is not necessarily a part of the statistical computing in many courses,

452
00:56:31,180 --> 00:56:36,560
but I'm I'm trying to teach someone with a key algorithmic problem, too.

453
00:56:36,580 --> 00:56:42,220
So that's what I'm trying to do here. So divide and conquer language we're gonna love.

454
00:56:42,730 --> 00:56:50,940
Okay. So before doing that, we're going to run some notations for complexity.

455
00:56:51,370 --> 00:56:55,050
Again, how many of you know what the big old notation is?

456
00:56:55,860 --> 00:57:02,400
Okay, that's good. Okay. So people notation is not necessarily just for computer science.

457
00:57:02,610 --> 00:57:11,820
Right. So this notation is just a mathematical notation to to have some function, the bound of some function.

458
00:57:12,180 --> 00:57:19,650
Okay. So roughly how this function scales when when when the X becomes really large.

459
00:57:19,660 --> 00:57:27,570
So that's so true. Trying to see some asymptotic property of some functions if you are familiar with that kind of notions.

460
00:57:28,590 --> 00:57:33,750
So, so this mathematical definition is a little complicated.

461
00:57:33,840 --> 00:57:41,460
So I'm not going to go through like actually explain what these are because that's an important part.

462
00:57:41,610 --> 00:57:49,139
I'm just trying to explain what the concept is so you can read this equation by basically big old notation.

463
00:57:49,140 --> 00:57:58,950
When the sum function is all big, all of a certain function, that means that this function is upper bound of that.

464
00:57:59,350 --> 00:58:07,260
The function I'm trying to describe. So g of x is a upper bound asymptotic, upper bound of F of x.

465
00:58:07,920 --> 00:58:21,510
That's what it means. And here big omega notation is a g of x is a lower bound of f of x and big theta means

466
00:58:21,510 --> 00:58:26,310
that if something is a date of the X that it's both upper bound and lower bound,

467
00:58:26,790 --> 00:58:31,680
which means that it makes a tight, tight bound. Okay, so that's the concept.

468
00:58:31,920 --> 00:58:35,130
Okay. So what does that mean?

469
00:58:35,140 --> 00:58:38,640
So that it might be still not not very clear.

470
00:58:39,660 --> 00:58:44,940
So in the in terms of theta notation, theta one means that this is a this function is constant.

471
00:58:45,180 --> 00:58:52,500
So if a F of X is one, you know, is this theta one, if a f of X is a two, that's theta one.

472
00:58:53,310 --> 00:59:01,160
If F of x is like million is data theta theta one, two, because there is a constant bound.

473
00:59:01,320 --> 00:59:03,900
If you if you look at this definition,

474
00:59:04,410 --> 00:59:12,480
as long as you can find of very large any any real number that can bound this function, then then this you can you can.

475
00:59:12,750 --> 00:59:17,940
This is called type bound. So log log is called double over.

476
00:59:18,960 --> 00:59:23,100
Double log automatic. So dramatic to me.

477
00:59:23,160 --> 00:59:31,810
Okay. So, so to make a function and a logo, one is a quarter rhythmic and this is linear.

478
00:59:31,830 --> 00:59:37,980
This is called linear time, linear complexity or and this is an end organic log,

479
00:59:37,990 --> 00:59:48,750
linear or the or just to say that analog n in a and cubic is a quadratic and then and and and

480
00:59:48,870 --> 00:59:55,859
to the third is cubic into a of polynomial and c of dn is exponential and this is bacteria.

481
00:59:55,860 --> 01:00:06,870
So and any any sort of a combination of these things will follow the the highest order.

482
01:00:06,870 --> 01:00:14,610
So for example, if you have some function as a plus n this is a quadratic and many of the quadratic dominates.

483
01:00:14,760 --> 01:00:26,070
So this is quadratic function. Okay. So that's how you lawfully estimate the theta theta notation of certain function?

484
01:00:26,370 --> 01:00:39,780
Okay. And in this lecture, we're going to use this for a time complexity, which means that, uh, so which means that you need.

485
01:00:39,930 --> 01:00:49,280
So we're trying to figure out how fast or fast or slow these are, is compared to the size of the inputs.

486
01:00:49,290 --> 01:00:53,850
So input is all N rather than X and is the size of input.

487
01:00:54,210 --> 01:01:04,350
Okay. So what I mean is that so time complexity is really, really important when you implement some algorithm.

488
01:01:06,030 --> 01:01:12,150
So sometimes implementing some algorithm, okay, depending on how you implement it,

489
01:01:12,580 --> 01:01:17,310
it could take a really long time and it could take a really short amount of time

490
01:01:17,700 --> 01:01:24,180
and that that probably doesn't matter when you work with a very small data,

491
01:01:24,900 --> 01:01:30,450
but when your data scales to large input, this really matters.

492
01:01:30,630 --> 01:01:36,600
Okay, so you want to develop some wisdom that scales well, okay.

493
01:01:36,600 --> 01:01:43,020
So here, this is a scaling vector. So x x is a size of input and.

494
01:01:43,250 --> 01:01:46,670
Why is it, as you see, is a low scale. Okay.

495
01:01:47,690 --> 01:01:53,740
So so this is exponential. It looks it looks good, but this is really, really slow.

496
01:01:53,750 --> 01:02:01,370
So if you compare it to like the size of two instead of eight, it becomes a hundred times more the more expensive.

497
01:02:01,380 --> 01:02:09,110
So if you talk about like an end becomes like 30 or 40, it's going to be billions or trillions of numbers.

498
01:02:09,110 --> 01:02:16,400
So these are huge, doesn't really scale with the large data at all so that that kind of understanding we need to have.

499
01:02:16,820 --> 01:02:27,320
Okay. So practically if somebody what do you mean is a quadratic origin or so if it's a floating quantity, the guy what is it?

500
01:02:27,340 --> 01:02:32,580
This is a you know something because it is not really scalable usually.

501
01:02:33,540 --> 01:02:41,030
Okay. And if you so linear algorithm or logarithmic order Williams are always good thing to do.

502
01:02:41,660 --> 01:02:45,440
So and low end is a little worse than linear.

503
01:02:45,650 --> 01:02:52,370
But still if you even if you have like billion get no billion is just some sum constant.

504
01:02:52,370 --> 01:02:59,149
So and no one is a scalable algorithm but it's clear if it's a billion, billion, it's really large.

505
01:02:59,150 --> 01:03:07,010
So quadratic algorithm sometimes, especially when you emphasize large, it's quite challenging to scale.

506
01:03:07,010 --> 01:03:12,950
So a lot of our wisdom, your implementing may have quadratic or cubic complexity,

507
01:03:12,950 --> 01:03:16,910
but that, that that's something that has a limitation in terms of scalability.

508
01:03:19,190 --> 01:03:25,069
So I probably should have started with this with to, to explain what this data notation is.

509
01:03:25,070 --> 01:03:29,990
But if you can represent the prime complex,

510
01:03:30,260 --> 01:03:37,670
your algorithm so it based on imprecise this is that this is the number of instructions or time that's required to compress something.

511
01:03:38,480 --> 01:03:48,610
Then you can always represent this as a sort of polynomial function or, or, you know, some, some simplified function.

512
01:03:48,620 --> 01:03:54,379
Then you can look at the what's the highest order in this case and cubic is highest order.

513
01:03:54,380 --> 01:04:03,890
So this means that this is a and Q we got to go with them and one, one plus one through end summation isn't squared because if you add them up,

514
01:04:03,890 --> 01:04:07,760
this is squared, this is a quadratic equation, this is a cubic algorithm and so on.

515
01:04:09,410 --> 01:04:20,389
And if you have a, you know, these divergences, the adding the 8 to 8 to donate to the two eight to the end, this is obviously is exponential.

516
01:04:20,390 --> 01:04:24,410
I would say a a is greater than one and so on.

517
01:04:24,680 --> 01:04:29,570
So you can this is all math. You there's nothing complicated to understand this.

518
01:04:29,900 --> 01:04:32,420
So these are just less than one is a little complicated.

519
01:04:32,420 --> 01:04:41,150
But still you can try to figure out what the actual bound is depending on what what a what the range of eight is.

520
01:04:43,750 --> 01:04:52,040
And these are more complicated example and I these you can these are not something you have to remember.

521
01:04:52,090 --> 01:05:02,260
It's just for giving an example that there are many different kinds of ways you can calculate the complexity in a lot of them.

522
01:05:02,710 --> 01:05:05,500
You realize that this is a represent the summation.

523
01:05:05,530 --> 01:05:13,360
The reason is that when you implement some algorithm, usually you do as you do by step by step in each of the end, equal one and equal to and so on.

524
01:05:14,020 --> 01:05:18,790
So it's, it's more typical to represent your time complex.

525
01:05:18,790 --> 01:05:25,570
There's a summation. First, calculate the summation into some close form, and then you can get the actual time complexity.

526
01:05:27,430 --> 01:05:31,510
Okay. And just just to the end factor, that is really, really bad.

527
01:05:31,570 --> 01:05:38,670
So it's a less than end to the end. And a, this is actual type bound if you wanted to know it.

528
01:05:38,770 --> 01:05:45,459
You can you can derive this equation if you know the what the sterling sterling formula is, and you can find from Wikipedia.

529
01:05:45,460 --> 01:05:50,470
But this is a type bound. Okay.

530
01:05:51,670 --> 01:05:57,300
So that's time complexity. The takeaway is that time complexity is important.

531
01:05:57,310 --> 01:06:04,000
And you probably want to algorithm make an algorithm that are scale that scales usually faster than quadratic algorithm.

532
01:06:04,000 --> 01:06:08,590
If you are thinking about the making, I would invest scales really with really large data.

533
01:06:10,630 --> 01:06:16,290
Okay. So now let's talk about the recursion.

534
01:06:17,160 --> 01:06:21,610
Okay. How many people know what the recursion is? Okay, good.

535
01:06:21,910 --> 01:06:28,050
Okay. So in in mathematical in mathematics, you're using what's the word?

536
01:06:28,060 --> 01:06:32,020
Word recursion in how many people use it.

537
01:06:32,020 --> 01:06:35,540
Because then when you do the program. Okay.

538
01:06:35,930 --> 01:06:40,730
Okay. Good. Thank you. So, what is recursion?

539
01:06:40,970 --> 01:06:46,490
Okay, so let's define recursion. And this is a way to define recursion.

540
01:06:46,910 --> 01:06:54,980
Okay. But this is not right way to define the equation, because you kind of fall into infinite loop.

541
01:06:55,280 --> 01:07:00,620
Defined accordance is a circular is circular, non ending kind of definition.

542
01:07:00,620 --> 01:07:05,810
So this is not the right way to define the equation, although conceptually it seems right.

543
01:07:06,830 --> 01:07:10,070
So this is a valid way to define a recursion. Okay.

544
01:07:10,840 --> 01:07:14,990
You know, if you still don't get it, see recursion. Okay. That's how you define the equation.

545
01:07:15,290 --> 01:07:19,010
Okay. So what does that mean? That is a kind of joke.

546
01:07:19,310 --> 01:07:26,480
But what does it mean? So the equation when you define some because as a sort of a programing and the function,

547
01:07:27,050 --> 01:07:34,160
that means that it's a function that calls itself in the mathematical represents recursion.

548
01:07:34,160 --> 01:07:42,630
You usually represent something of f, f of x, f over and over again, represent a function of a of n minus one.

549
01:07:42,650 --> 01:07:51,500
Right. But that's the same function you are defining to define issomething with a different input,

550
01:07:51,740 --> 01:07:56,600
but using still the same function with a different argument to define something.

551
01:07:56,600 --> 01:07:59,150
So that's a mathematical way to define an equation,

552
01:07:59,540 --> 01:08:09,950
and it's a pretty much the same in programing you need to define a if you define a function that calls yourself that sort of equation.

553
01:08:11,150 --> 01:08:16,550
Also, it has to have a terminating condition. Otherwise it's going to fall into the infinite.

554
01:08:16,970 --> 01:08:23,360
So that that's there's a part that you need. So in this case, the terminate condition, if you those two get it.

555
01:08:23,360 --> 01:08:28,030
So you need to get it. You know, if you understand, you can stop defining.

556
01:08:28,040 --> 01:08:31,310
So that's that's the analogy here.

557
01:08:33,640 --> 01:08:36,700
Okay. So let's go through the example.

558
01:08:40,850 --> 01:08:42,290
Here. Okay.

559
01:08:43,280 --> 01:08:54,350
So one very familiar, you probably will be very, very familiar with the recursive definition and the one obvious way to define it in the using.

560
01:08:56,510 --> 01:09:00,110
I mean, the factorial can be easily defined as a recursive formula.

561
01:09:00,290 --> 01:09:07,580
So this is a mathematical way to define a code and a of RN is an end times minus one and the A's equivalent.

562
01:09:07,910 --> 01:09:17,480
Okay then this is valid way. Now let's try to translate this recursive representation into our function.

563
01:09:17,490 --> 01:09:19,540
So that's what we are going to do. Okay.

564
01:09:20,270 --> 01:09:31,010
Well, if we have time, I would ask you to try to implement yourself, but I'm going to just skip over and just try to show the solution here.

565
01:09:32,090 --> 01:09:35,360
So you make a function factorial.

566
01:09:35,840 --> 01:09:42,650
Okay, there it takes a n. So if end is equal to zero, make sure that use equal equal.

567
01:09:42,950 --> 01:09:47,560
Okay. And the return value is one otherwise my.

