1
00:00:00,920 --> 00:00:25,920
Yes, yes, yes. Frankly, that's how you do business, which, as you pointed out, produces a low.

2
00:00:25,930 --> 00:00:33,710
Sorry. Yes.

3
00:00:34,400 --> 00:00:42,830
So just finish up with some stuff fairly quickly,

4
00:00:44,300 --> 00:00:55,910
but just kind of do a few things at the end that just might be helpful for the a final assignment as well.

5
00:00:58,910 --> 00:01:09,700
Any questions about. Reasonably clear.

6
00:01:12,500 --> 00:01:12,799
Okay.

7
00:01:12,800 --> 00:01:28,100
So you have the final I guess the final try to make it a little more negative so as to on Monday and midnight on Monday, I guess today is the quiz.

8
00:01:30,500 --> 00:01:39,920
So after that, after the final assignment. So I just wanted to kind of just mention a few extra things about flying for a few.

9
00:01:42,280 --> 00:01:51,290
So a few extra functions available for flight and. You got a few extra commands about missing data and pandas that might be useful.

10
00:01:52,190 --> 00:02:09,599
So I think we talked about this last time. So this is just like the mind data example, which is from different to data sets of a library.

11
00:02:09,600 --> 00:02:18,759
And we're talking about making a scatter plot of this kind of a scatterplot, but different colors for like each wine types.

12
00:02:18,760 --> 00:02:28,080
So I think the way you kind of well, there are different ways of plotting it, but if you want to have a like a figure where you can kind of, you know,

13
00:02:28,130 --> 00:02:36,470
sequentially add things one at a time, you usually create this figure object first using plot, that figure, it's kind of the way to do that.

14
00:02:36,930 --> 00:02:40,760
And you just added various things.

15
00:02:41,930 --> 00:02:45,680
I think we were round here at the end of the last lecture.

16
00:02:46,350 --> 00:02:52,729
This is basically a scatterplot where we have a different color point for each wine type.

17
00:02:52,730 --> 00:02:59,000
So there's like three, three different wine types just the way.

18
00:03:02,510 --> 00:03:10,400
You can add a legend. So it's basically for this type of play, you want to add a legend, you want to say which type these colors correspond to.

19
00:03:11,240 --> 00:03:14,480
So one way to do this is to do X double legends.

20
00:03:17,090 --> 00:03:20,930
You could have you could also put a label here, a label argument for the legend.

21
00:03:21,700 --> 00:03:29,000
I think if you can do it within scatter it kind of automatically as well.

22
00:03:30,920 --> 00:03:36,559
So here I'm giving the labels this list of labels basically.

23
00:03:36,560 --> 00:03:46,219
So the label types. So this is all a list of strings that should show up in a legend on the well.

24
00:03:46,220 --> 00:03:52,250
It finds it kind of automatically where to put the legend. You can, like tell it exactly where to put it.

25
00:03:52,250 --> 00:03:58,550
What you can tell. It's to the top bottle, that kind of something by default.

26
00:03:59,720 --> 00:04:04,580
So this is what it looks like. It just tells you which color corresponds to which type.

27
00:04:07,070 --> 00:04:10,520
So I really want a legend for this type of thing either.

28
00:04:11,840 --> 00:04:19,520
Otherwise you don't really know what the four different color points correspond to because it was just an extra point.

29
00:04:19,520 --> 00:04:27,070
If you want to change the size of the text or the tick labels, you can do the same thing on set.

30
00:04:27,110 --> 00:04:32,290
Text basically tells you where to put the tip large, which kind of tells you what labels.

31
00:04:32,510 --> 00:04:37,700
And so like on these, these are the tick marks of one, two, three, four, five.

32
00:04:39,060 --> 00:04:45,390
That's what you would call tick marks on the labels, the kind of these things one, two, three, four and five in this case.

33
00:04:46,610 --> 00:04:56,540
So that's how you can choose exactly what the ticks are, which is exactly what the label should be and what the size the font size is.

34
00:04:57,890 --> 00:05:08,480
So the only other thing I think the last thing I did was to add like a straight fitting line through each of the three the points for each wine type.

35
00:05:09,140 --> 00:05:19,670
So I just kind of use the formula for the most fitting straight line, which is this basically just related to the use of this formula.

36
00:05:19,670 --> 00:05:27,080
It's based on the standard deviation of the X variable, the standard deviation of the Y variable,

37
00:05:27,530 --> 00:05:35,650
and then the correlation between those two lines, you know, those three things and keep the best fitting line.

38
00:05:35,690 --> 00:05:40,339
So I guess it didn't fit on this slide, but this is how I did it.

39
00:05:40,340 --> 00:05:49,490
Just using categories, not be functions on each of the individual variables, so to speak.

40
00:05:50,000 --> 00:05:55,400
On the one hand, it is equal parts and reset.

41
00:05:56,630 --> 00:06:03,140
These are the slope and intercept terms. We're kind of the entire data set.

42
00:06:04,280 --> 00:06:08,420
Okay, so this is what you get if you kind of plot on a straight line through these points.

43
00:06:09,650 --> 00:06:18,260
So the way I did it, I just did a like I just created like a sequence of points from 0 to 5 on the side.

44
00:06:19,220 --> 00:06:30,020
So this is just like A, it's enough. B already starting from zero going up to 5.5, which kind of equals 20 equals space points.

45
00:06:31,940 --> 00:06:39,290
And then here I'm just kind of drawing the straight line through those points, kind of connecting the points, and that looks like this.

46
00:06:41,030 --> 00:06:46,219
So that's for the entire data set. Do it for each one type.

47
00:06:46,220 --> 00:06:54,740
You can just put it inside a loop that's like a loop going inside the loop three times each time.

48
00:06:54,780 --> 00:07:04,399
Go inside a loop. I just compute this regression coefficients for the slope and the intercept kind of is also inside.

49
00:07:04,400 --> 00:07:17,740
Go inside of for now that it's all right I plot this straight line for this is basically the best fitting line for that for that line type.

50
00:07:17,760 --> 00:07:24,919
So you can see that here. I mean, I think in each case there is a positive relationship, but the slope changes somewhat,

51
00:07:24,920 --> 00:07:30,050
at least especially comparing like type zero and one versus two.

52
00:07:34,670 --> 00:07:44,750
So that was just so here's just the last thing. Sometimes, yeah, sometimes people are like grid is grid marks on the plot.

53
00:07:44,760 --> 00:07:49,760
So if you want to do like this, you just type in accident grid.

54
00:07:49,940 --> 00:07:53,000
So that will do that.

55
00:07:53,300 --> 00:07:59,180
Okay. So it's not a required thing or anything but you sometimes.

56
00:08:00,960 --> 00:08:11,010
It looks better insofar it's either it's easier to kind of see exactly the location at certain points because you can just compare it.

57
00:08:13,020 --> 00:08:18,910
So let's just have a walk through of a sample using that plot line.

58
00:08:20,790 --> 00:08:23,810
You're using that plot line to create a figure.

59
00:08:23,820 --> 00:08:30,240
It might be just helpful to go through that. You can see the syntax to do certain things.

60
00:08:33,470 --> 00:08:40,740
I guess the other thing I just wanted to mention how to do histograms, density plots and box plots.

61
00:08:43,440 --> 00:08:51,960
So a histogram is basically that's when you want to plot information about a single variable.

62
00:08:52,020 --> 00:08:55,320
Usually if you're plotting one histogram.

63
00:08:55,740 --> 00:09:03,180
So that just kind of counts the number of observations that fall into a certain collection of intervals.

64
00:09:03,180 --> 00:09:08,310
And then it displays those like you would in like a bar chart, basically.

65
00:09:09,390 --> 00:09:21,090
Okay. So the way you do that, well, you can actually do it without, without kind of formally creating a figure.

66
00:09:21,420 --> 00:09:34,110
If you just do like plot dot, just like if the name of this is like the name of a variable and the client is flocking to that,

67
00:09:34,110 --> 00:09:41,220
that's actually one way that you create a histogram directly or you can kind of do it in

68
00:09:42,020 --> 00:09:46,979
a slightly more formal kind of in a similar way that we did in the previous example,

69
00:09:46,980 --> 00:09:55,950
where you first create a figure object using that plot like and then you kind of add histogram.

70
00:09:56,250 --> 00:10:06,480
So here we're just adding a subplot. This is just basically telling us we want to display a plot that's it's a one by one plot.

71
00:10:06,490 --> 00:10:11,040
There's not multiple panels of a figure, which is kind of what this is saying.

72
00:10:11,040 --> 00:10:19,440
And then in this line of code, we're just kind of we're adding a histogram to that empty figure, which can be the way this works.

73
00:10:19,470 --> 00:10:24,600
So this is usually something that looks like this will pop up.

74
00:10:28,350 --> 00:10:37,919
Oh, yeah. So here's an example where I created like two panels in a single in a single figure to do that and use this subplot.

75
00:10:37,920 --> 00:10:43,649
One, two. I just means it's like one row, two columns like we have here.

76
00:10:43,650 --> 00:10:47,820
I guess you actually don't absolutely need this in this example,

77
00:10:47,820 --> 00:11:00,300
but this is telling it that kind of this plot is in the first position which is here and then this too is telling it because of this position.

78
00:11:00,330 --> 00:11:03,750
Basically, it's kind of like the index of where that should be.

79
00:11:05,160 --> 00:11:09,330
I guess by default it'll do this in the first position.

80
00:11:09,330 --> 00:11:18,210
If you if you run it, this is how you can create kind of multiple panels on, on a single figure.

81
00:11:19,620 --> 00:11:27,389
So plot and this is something that's not one one, one, two, it's like one row, two columns.

82
00:11:27,390 --> 00:11:35,460
Or if you did two, a one will be kind of two rows with one column type of organization.

83
00:11:36,240 --> 00:11:44,190
So I think the so the other thing I, I want to make sure was density plots.

84
00:11:44,190 --> 00:11:50,840
I think that's I mean, without going into all the details about it, it's more or less just like a smoother version of a histogram.

85
00:11:51,380 --> 00:12:00,360
And what if you're trying to display the same type of information, but it's kind of just a less like a smoother way of doing that.

86
00:12:01,560 --> 00:12:06,150
So you can actually just use plot density on the same little variable itself.

87
00:12:07,130 --> 00:12:13,830
This type of thing will pop up on the way to do it.

88
00:12:13,830 --> 00:12:21,750
And that plot line is not that it's not that nice.

89
00:12:21,750 --> 00:12:32,729
I think you have to extract like apply the density function to it first and then if the vector add that, then plot that, which I think is fine.

90
00:12:32,730 --> 00:12:37,410
But I just thought I'd mention this other packet, this Argus Library,

91
00:12:39,750 --> 00:12:47,129
just because I think it probably does density plots nice or so this is seaborne so a and you see

92
00:12:47,130 --> 00:12:56,970
that imported and seaborne as soon as possible and then like a distribution block allows you to.

93
00:13:00,310 --> 00:13:03,150
Allows you to automatically generate an instant pot.

94
00:13:03,160 --> 00:13:12,560
So you just give it you just give it the name of the the variable that you're interested in as this plot.

95
00:13:13,540 --> 00:13:23,180
Will you give it the variable that you want a density plot of that kind of automatically generated density usually.

96
00:13:25,120 --> 00:13:33,219
This also did a for interviews kind of this argument this all it also does a histogram on the same

97
00:13:33,220 --> 00:13:41,800
plot so you can kind of easily get a histogram and a density plot on the same figure recently.

98
00:13:42,880 --> 00:13:53,440
Okay. So the last thing I wanted to mention about box plotting in general is just box plots.

99
00:13:53,440 --> 00:13:57,490
So I think with the example, using box plots with seaboard.

100
00:13:58,240 --> 00:14:08,440
So box plots basically like the type of situation you want to use box plots is where you want to display the distribution of a variable across,

101
00:14:08,720 --> 00:14:12,250
you know, different levels of a categorical variable.

102
00:14:12,470 --> 00:14:16,990
I think that's the most common way to use box plots.

103
00:14:17,560 --> 00:14:21,160
Like in this example, you have line data.

104
00:14:21,910 --> 00:14:26,530
You might want to display these continuous measurements like flavonoids.

105
00:14:27,490 --> 00:14:33,410
So you might want to display the distribution over that distribution of that for different wine types.

106
00:14:33,490 --> 00:14:42,840
I think the main kind of several box plots in the same figures like is one of the nice way to do it.

107
00:14:42,950 --> 00:14:48,549
I think basically for a box plot know there's like a box in the bottom of the

108
00:14:48,550 --> 00:14:53,860
box is the 25th percentile and at the top of the box of the 75th percentiles.

109
00:14:54,760 --> 00:14:58,510
And then there's like a line line in the middle as the median.

110
00:14:59,350 --> 00:15:07,750
And then there's usually these there are outliers, basically, plus outliers according to this criterion.

111
00:15:08,500 --> 00:15:15,860
So kind of data points that are very far away from the all of the other data points.

112
00:15:16,320 --> 00:15:27,820
It'll display those as individual points. And then there's also actually sexual violence on top and the bottom of the box,

113
00:15:27,820 --> 00:15:36,070
which basically go from the top or the bottom box to the most extreme non aligned data points.

114
00:15:37,080 --> 00:15:39,640
So the way to interpret a box plot.

115
00:15:41,290 --> 00:15:53,090
So if you did a like flavonoids for well a box plot for flavonoids, that is kind of different for each wine type the way you could do it at it.

116
00:15:53,270 --> 00:15:56,450
And Seabourn is just with a tap.

117
00:15:57,940 --> 00:16:05,860
I think that plot is other types of plots, but if you wanted to do a box plot clue in this kind equals box argument.

118
00:16:10,980 --> 00:16:14,680
So this just makes sure that it's doing a box plot.

119
00:16:15,610 --> 00:16:24,910
And then the thing that you want on the x axis is what you just say X is equal to that and the name of the variable you want on the y axis.

120
00:16:26,170 --> 00:16:36,850
So typically the X, the variable that you get in the exposition is that's usually a categorical variable.

121
00:16:36,850 --> 00:16:41,800
So these are the things that's the Y and type is the target.

122
00:16:42,040 --> 00:16:48,480
It's either zero one or two and then the Y variable that's usually contents or something.

123
00:16:51,160 --> 00:16:53,040
So I think there's time.

124
00:16:53,410 --> 00:17:04,809
There's only one outlier here, the one size one and then one outlier here for a four line type two was only two outliers here.

125
00:17:04,810 --> 00:17:10,240
But this is kind of nice. It just creates even if you have a bunch of different categories,

126
00:17:10,240 --> 00:17:19,530
it's kind of an automatic way to create a bunch of box plots on the same figure that automatically produces different colors.

127
00:17:19,540 --> 00:17:27,009
I think if you look at the documentation, I tell you a little bit more information.

128
00:17:27,010 --> 00:17:32,739
I mean, if you if you want to change the colors into something that often just has a default,

129
00:17:32,740 --> 00:17:38,520
it kind of automatically create different colors for the different boxes for this.

130
00:17:38,590 --> 00:17:45,190
I think that's. So I think that's basically it for plotting.

131
00:17:45,190 --> 00:17:49,479
And, you know, the hot line is kind of the main one.

132
00:17:49,480 --> 00:17:53,110
But I think Seabourn actually is worth looking at.

133
00:17:53,110 --> 00:18:00,190
So for some of the figures, types of figures, I think one is the next nicer plot.

134
00:18:00,360 --> 00:18:07,470
It's kind of easier to use. So especially in density plots and box plots.

135
00:18:11,130 --> 00:18:18,540
So just to wrap up before we can start the quilt, I just wanted to pick maybe one or two things might be useful.

136
00:18:20,190 --> 00:18:28,769
You mentioned how you see values are stored, but I just wanted to mention a few extra kind of methods that are available that

137
00:18:28,770 --> 00:18:34,860
you can use to see in different types of computation with with missing values.

138
00:18:35,860 --> 00:18:41,219
Okay. So I guess we've seen this data before.

139
00:18:41,220 --> 00:18:44,970
So this is just your own data. These are the first six rows.

140
00:18:46,050 --> 00:18:50,880
So I think at least in this example, I'm going to create the live version of the phone data.

141
00:18:51,600 --> 00:19:02,310
So I show that last time did you go to that plus seven method to create kind of wider divide version of the boundaries to how I'm doing here?

142
00:19:03,480 --> 00:19:09,570
So the only reason for doing that is that I don't want to be converted into wide format.

143
00:19:09,600 --> 00:19:20,700
It introduces missing values. So if I print out kind of these observations, you can see that we have missing values.

144
00:19:22,140 --> 00:19:29,010
And the reason for that is like the original format of the phone data,

145
00:19:29,010 --> 00:19:36,630
you can see that not everybody has like all of their visits, they don't have data for all of their visits.

146
00:19:37,470 --> 00:19:44,970
So when you convert it to the wide format, you kind of automatically introduces missing value.

147
00:19:44,980 --> 00:19:50,310
Since these these kind of represent data for one visit to visit three.

148
00:19:53,390 --> 00:20:02,340
And she's been following her hand as she represents the missing data is in a state that denotes missing data.

149
00:20:04,470 --> 00:20:07,920
Okay, so let's use this as an example.

150
00:20:08,160 --> 00:20:15,300
I'll just mention a few useful methods for putting this in values.

151
00:20:16,500 --> 00:20:20,160
Okay. So the first one I wanted to mention is I think it comes in handy.

152
00:20:21,210 --> 00:20:28,980
Very often you just drop in a method. So what this does, it basically just drops any row.

153
00:20:30,030 --> 00:20:34,050
And the state, if that row has one or more missing values.

154
00:20:35,340 --> 00:20:43,290
So it looks at for each row of that row has one or more missing values and just kind of totally values.

155
00:20:45,930 --> 00:20:50,340
So you can see that here. I've just called this one guide to Clean.

156
00:20:51,420 --> 00:20:56,020
So this is all the Viacom data where I just drop in method.

157
00:20:56,160 --> 00:21:03,930
And so this basically automatically, pretty much automatically creates a data set that has zero missing values.

158
00:21:04,530 --> 00:21:10,150
But it's kind of nice. So yeah, there's no enhance anywhere.

159
00:21:11,010 --> 00:21:19,800
It's just because there's any row where it's one or more missing values in that row is automatically deleted.

160
00:21:26,070 --> 00:21:33,510
Yeah. So I guess I mentioned this before, but I guess if where you're actually entering your data by hand,

161
00:21:33,510 --> 00:21:43,680
like if you're typing it in, we don't do it or you don't do much in in real world.

162
00:21:44,220 --> 00:21:51,570
But if you're actually typing in it by hand, like when you're converting a dictionary into a pandas data frame,

163
00:21:52,140 --> 00:21:56,700
you will type it in as as can be done in the usual way to do that.

164
00:21:58,170 --> 00:22:06,870
And then that'll kind of sort of automatically comes back to the same values in your PANDAS data for you.

165
00:22:08,260 --> 00:22:12,630
So the other thing that I think is pretty useful is this is all method.

166
00:22:14,010 --> 00:22:19,889
So that just tells you basically returns like a Boolean dataframe.

167
00:22:19,890 --> 00:22:25,200
So returns that Boolean dataframe, that's like the same dimension as your original dataframe.

168
00:22:26,790 --> 00:22:31,169
And it's just telling you what is your false.

169
00:22:31,170 --> 00:22:36,780
And true is true for the entries where it's missing and it's false otherwise.

170
00:22:37,410 --> 00:22:45,600
So you can see this here at this bottom bottom row here we have two and a NS and here we have bottom row we have true, true.

171
00:22:46,260 --> 00:22:50,069
And then this morning we have and again and something that's not missing.

172
00:22:50,070 --> 00:22:55,740
So in this case, we have true false. So it's just useful to have a bunch of truths.

173
00:22:55,740 --> 00:23:02,060
And false is telling you whether or not that kind of element of your data frame is missing.

174
00:23:02,070 --> 00:23:07,740
So you can even kind of count the true truths and false as to telling how much missing data you have.

175
00:23:11,130 --> 00:23:15,810
On another way, if you're kind of entering things and by hand, you can also use non.

176
00:23:16,470 --> 00:23:31,620
That's a kind of a separate type that's in built in Python and also automatically kind of converts the none none type into any ends of them.

177
00:23:40,110 --> 00:23:53,700
I guess it depends on the well, it depends on a little ongoing detail if it's a numeric kind of treatment.

178
00:23:58,170 --> 00:24:06,870
So if you want to have everything that is in some way as an import as far as is, knowledge doesn't really matter.

179
00:24:08,190 --> 00:24:12,209
To use is null on this data frame.

180
00:24:12,210 --> 00:24:21,140
It still turns trues and false is regardless if it's not in type as well.

181
00:24:23,700 --> 00:24:30,630
So it still works fine even if you have your missing value stored as non or in a hand.

182
00:24:31,950 --> 00:24:39,779
So yeah. The only thing I maybe mentioned you can use this count method if you just want to count like the number

183
00:24:39,780 --> 00:24:51,690
of non missing or missing values count just counts kind of the number of non missing values for each.

184
00:24:53,260 --> 00:25:03,940
So if I do this bone why accounts. Well his prints out something like this and like the first variable is iodine number has to 61.

185
00:25:03,940 --> 00:25:08,290
So there's saying there's kind of 261 observations.

186
00:25:09,100 --> 00:25:12,190
So the number of rows in this data set is 261.

187
00:25:12,190 --> 00:25:18,020
So basically no missing values here for I.D. number, also for variable one.

188
00:25:18,700 --> 00:25:24,549
There's no missing values, but for variable two, there's 150 for observed values.

189
00:25:24,550 --> 00:25:31,540
So there's like whatever that is, 67 or something, missing values.

190
00:25:31,540 --> 00:25:37,779
And then there's only 70 observed values for variable three.

191
00:25:37,780 --> 00:25:48,010
So I think is that count and type of method is just a quick way to see how many, how many missing values you have for certain variables.

192
00:25:48,670 --> 00:25:55,770
I think it's useful for that. One.

193
00:25:56,340 --> 00:26:06,590
One or two more. Okay. So the fill in a method just allows you to fill in all the missing values with a certain number.

194
00:26:07,280 --> 00:26:13,070
Like, let's say we wanted to fill in all the missing values with. You can see here we've been SPV empty.

195
00:26:14,720 --> 00:26:21,970
I create this other data bound by two filled equals on my to got fill in.

196
00:26:23,270 --> 00:26:30,200
It's going to be the observed like the non missing values and these two data frames will be the same.

197
00:26:30,200 --> 00:26:39,050
But there will be no missing values here and they'll be missing values will be like replaced with this miss median value here.

198
00:26:40,040 --> 00:26:45,860
So just kind of fills all fills all of the missing values end with a single number, for example.

199
00:26:48,550 --> 00:26:58,400
I don't think I was positive in these last two slides when I was 17.

200
00:26:59,030 --> 00:27:08,530
So yeah, you can see here, if I turn out this online to fill datasets, I will show there are no missing values in there.

201
00:27:08,530 --> 00:27:13,900
Kind of all filters it to a certain point.

202
00:27:18,100 --> 00:27:27,010
Yeah, we have this kind of repeated values 0.027 kind of all over and occasionally had missing values.

203
00:27:28,000 --> 00:27:36,549
And then again, like some a lot of the other methods we talked about, if you don't want to like assign here in this case,

204
00:27:36,550 --> 00:27:44,440
we assigned the right to to a different data frame after filling in the missing values.

205
00:27:44,440 --> 00:27:52,329
If you kind of want to do if you want to take that modification without designing a new data frame you can just leave this

206
00:27:52,330 --> 00:28:06,190
in place was true argument so that actually changes the line to data frame itself as a good place to replace it with.

207
00:28:06,190 --> 00:28:29,729
True. Okay so let's just oh this is just an extra comment that shows to go back to how

208
00:28:29,730 --> 00:28:35,140
we defined but you can modify how you use drop and there's different options.

209
00:28:36,160 --> 00:28:46,750
One option you might want to use this is the how alternate option that's basically kind of like the reverse of the default method that only exists,

210
00:28:47,380 --> 00:28:55,760
that only deletes a row and if all the values are missing from that release,

211
00:28:56,620 --> 00:29:03,730
so it's kind of only delete a row of the data from that row is completely missing.

212
00:29:04,510 --> 00:29:17,200
So that's kind of an alternative that's available, which is more just so much less extreme,

213
00:29:17,620 --> 00:29:23,740
extreme version of the default, which is two weeks in a row if it has one or more missing.

214
00:29:24,130 --> 00:29:29,709
So I think there's some stuff about missing values of the final.

215
00:29:29,710 --> 00:29:36,640
I think that's all I wanted to mention. I don't mind a few slides on this are not really going to go through this.

216
00:29:36,640 --> 00:29:40,690
Okay, if you're interested, just read this.

217
00:29:41,750 --> 00:29:45,850
You run out of time.

218
00:29:45,850 --> 00:29:49,569
I think, you know, merging is important.

219
00:29:49,570 --> 00:29:56,709
And just maybe the thing to note is that PANDAS has a kind of a merging function

220
00:29:56,710 --> 00:30:03,670
that's built in the TV merge if you're interested in merging different data frames.

221
00:30:04,540 --> 00:30:14,290
So. Oh, yeah, let's let's stop there.

222
00:30:14,290 --> 00:30:19,060
I mean, I guess that that's. It's stuck there.

223
00:30:21,240 --> 00:30:34,480
It's impossible to answer.

224
00:30:45,940 --> 00:30:50,260
This country things.

225
00:31:02,240 --> 00:31:40,660
You know, the fact that the witnesses said they didn't know some of the elements.

226
00:31:43,990 --> 00:31:57,460
I wasn't sure if that was the case.

227
00:32:00,100 --> 00:32:21,690
And it's not like you just like this is something that I've got to out.

228
00:32:38,670 --> 00:33:08,200
Students. The 66 year old.

229
00:33:39,780 --> 00:34:06,380
Oh yeah.

230
00:34:16,120 --> 00:34:25,460
From the start if you haven't already.

