1
00:00:00,030 --> 00:00:05,100
I want it to be recorded last time to the screen.

2
00:00:11,630 --> 00:00:17,270
Anyway, I no such thing going on with that many people today.

3
00:00:17,270 --> 00:00:24,510
But anyway, any questions before we start? Erm.

4
00:00:28,450 --> 00:00:33,610
All right, I guess we'll just keep going. I think we'll probably just cover.

5
00:00:37,440 --> 00:00:45,870
The disclosures will cover functions today and finish up if statements and go on functions.

6
00:00:47,130 --> 00:00:50,130
So let's see. Okay.

7
00:00:53,270 --> 00:00:57,140
Okay. So I guess last time we were talking about Boolean expressions.

8
00:01:00,300 --> 00:01:05,460
Basically they look something like this and you can run these directly in Python.

9
00:01:06,060 --> 00:01:14,880
Usually some kind of combination of comparison operations or Boolean operations.

10
00:01:16,200 --> 00:01:25,680
So comparison operations are things like less than or equal to or equal to things like that.

11
00:01:26,160 --> 00:01:33,590
The other kind of thing that you use in Boolean expressions or displays, you might call them Boolean operators.

12
00:01:33,960 --> 00:01:44,770
It's logical and or not. So I guess I mentioned these last time that these are.

13
00:01:46,020 --> 00:01:50,850
It should be lesser than things like that is fairly clear.

14
00:01:51,600 --> 00:01:57,360
I guess we'll just mention how to do these boolean operators in Python today.

15
00:01:57,870 --> 00:02:01,380
So the first thing I use is the Boolean operation.

16
00:02:01,390 --> 00:02:06,780
And for Python, you can just use the actual use the actual word and.

17
00:02:10,170 --> 00:02:18,240
Okay. So in your own expression, you use the word and it's basically testing whether or not two statements are true.

18
00:02:18,990 --> 00:02:27,030
I mean, you could add additional statements. If you want to test three or four things, you can have A and B and C, but it's kind of.

19
00:02:29,420 --> 00:02:34,850
It's actually the same as just looking at two. Two expressions are two.

20
00:02:34,910 --> 00:02:49,649
Two statements. So basically if we have A and B, A and B evaluates to true only if both in terms that's kind of represented in this table.

21
00:02:49,650 --> 00:03:00,540
If you have a B here and these columns and then you look at the and then you evaluate the expression A and B, it's only true if the.

22
00:03:02,620 --> 00:03:11,290
In the first several things are true. And so this is kind of how you would do it in Python.

23
00:03:11,290 --> 00:03:14,610
You just write out the actual word.

24
00:03:14,620 --> 00:03:19,600
And if you're doing that, if you're writing up a Boolean expression.

25
00:03:19,810 --> 00:03:27,700
Okay. So if you look at these these examples here, these are A, B and C are just a Boolean.

26
00:03:27,700 --> 00:03:38,290
Expressions A is true. Since four degraded to B is false and then five modules two equals one.

27
00:03:39,190 --> 00:03:43,630
So that's testing in five modules, two is one. So that's true as well.

28
00:03:44,530 --> 00:03:53,310
Okay. So if we just look at combining A, B and C in different ways, A and B is false because A,

29
00:03:53,350 --> 00:04:02,770
B is false and C is true because both A and C or true and and B and C are false.

30
00:04:02,920 --> 00:04:08,500
B and C is false just because B is false.

31
00:04:08,650 --> 00:04:14,320
Okay. So that's the way and works. It's only true if both of the components are true.

32
00:04:15,310 --> 00:04:21,570
The other major kind bit boolean. Operation are fully in way of combining.

33
00:04:26,470 --> 00:04:34,570
Boolean variables is or basically that that just tests whether or not at least one of the statements is true.

34
00:04:34,570 --> 00:04:39,880
So you can have exactly one of the statements be true or you can have both of the statements true.

35
00:04:40,300 --> 00:04:43,780
It doesn't matter as long as at least one of them is true.

36
00:04:43,780 --> 00:04:47,259
If you look at the order of those two, it will return true.

37
00:04:47,260 --> 00:04:54,040
So you can see that here with the truth table we have a, B, and then if we look at A or B,

38
00:04:56,710 --> 00:05:00,700
it's true in every case except for the case where both A and B, the false.

39
00:05:00,970 --> 00:05:13,750
So that's the whole if we're looking at A, A and B, the only way the statement A or B is false is if both if both A and B are false.

40
00:05:14,230 --> 00:05:18,790
So that's how it works. And then be I think it's a nice feature.

41
00:05:18,790 --> 00:05:26,740
And in Python you can just use the actual. If you use the actual word, or rather than some other symbol.

42
00:05:27,250 --> 00:05:34,900
So if we look at these same Boolean variables that we defined previously, A, B and C.

43
00:05:35,530 --> 00:05:46,250
So these are all kind of. Well. These these variables are Boolean variables because they're the result of what's returned from a boolean expression.

44
00:05:48,920 --> 00:06:02,210
So A, B and C, if we look at the origin of each combination of these, the only one is that is false is B or C, and that's because both.

45
00:06:03,130 --> 00:06:10,300
Both B and C are false to look at A or B, that's true because A is true.

46
00:06:10,300 --> 00:06:16,000
If you look at A or C, that's that's also true because A is true.

47
00:06:18,070 --> 00:06:28,120
All right. So the only other one I guess the only last one I mentioned is is not and again, in Python, you could actually use the word not.

48
00:06:29,150 --> 00:06:33,080
Rather than an exclamation point or something like that. So not just.

49
00:06:33,320 --> 00:06:40,550
It just gives you the opposite. Basically, you just return the opposite of the kind of the Boolean expression that it's next to.

50
00:06:41,260 --> 00:06:51,350
So it is true, even if you write down not a that's false by virtue of a is false, then not a is true.

51
00:06:52,880 --> 00:07:00,350
So yeah, I mean, you can see this here. I think this just maybe just clarifies the way trying to write it out.

52
00:07:00,350 --> 00:07:03,890
So we have these boolean variables here.

53
00:07:04,490 --> 00:07:09,260
The way to do it not is you just put the you split the word not in trouble.

54
00:07:09,320 --> 00:07:19,129
So I could see here. It just it just results in the basically the opposite of kind of the original truth value.

55
00:07:19,130 --> 00:07:22,700
So not dual expression any becomes false.

56
00:07:25,220 --> 00:07:30,170
Not all expression, baby comes true. So that's that's how you write that down?

57
00:07:30,170 --> 00:07:34,880
Is that the actual word? Not in front of the Boolean expression.

58
00:07:34,970 --> 00:07:38,780
Okay. So that's basically the other.

59
00:07:40,540 --> 00:07:52,419
The other main component of Boolean expressions says is the first main place that they're useful in if statements.

60
00:07:52,420 --> 00:07:55,840
So I think I mentioned this last time, right.

61
00:07:55,990 --> 00:08:00,670
And the way you write out if statement in Python is the following,

62
00:08:01,670 --> 00:08:10,330
you have this if and then you inside parentheses, usually you will have some boolean expression.

63
00:08:10,420 --> 00:08:20,080
That's basically what I meant by this. This is just kind of a general way of writing the notation that you're supposed to use.

64
00:08:20,800 --> 00:08:23,320
So condition will be like a boolean expression.

65
00:08:23,320 --> 00:08:33,940
Something like If X is less than Y or something like that, then you put a colon after the closing parentheses and then you'll have some.

66
00:08:35,250 --> 00:08:43,860
Thanks to look some code and something. Okay. And then you should end that kind of each line of kind of everything.

67
00:08:45,070 --> 00:08:52,210
All of the code that is associated with this statement. So you do have to do this and that.

68
00:08:52,240 --> 00:08:58,490
I think you have to do at least. At least one space is as long as you have a space.

69
00:08:58,510 --> 00:09:04,059
I think it works. So here are some examples of that.

70
00:09:04,060 --> 00:09:14,260
Basically, if statement basically to execute to the body of the statement, if this boolean expression in parentheses evaluates to true.

71
00:09:14,770 --> 00:09:14,990
Right.

72
00:09:15,670 --> 00:09:30,940
So you could see that here if we're looking at our boolean operator and it is so this Boolean expression is less T3 and the equals 2.5 is is false.

73
00:09:31,390 --> 00:09:38,380
Joint statement is false because even though B is less than three is true.

74
00:09:39,300 --> 00:09:44,010
If you look at these less than three or the equals 2.5 that evaluates to true because.

75
00:09:46,300 --> 00:09:51,340
If at least one of them is true. All right, so this is.

76
00:09:51,410 --> 00:09:59,350
Okay, so here's. Here's just another example.

77
00:09:59,350 --> 00:10:09,429
It's just a reminder that you can usually or often have multiple lines kind of associated with the statement.

78
00:10:09,430 --> 00:10:18,130
So you need multiple lines of code to kind of execute what you what you want to execute based on this Boolean expression.

79
00:10:18,640 --> 00:10:25,160
And it's just a reminder that you need to kind of indebt each line of code.

80
00:10:25,240 --> 00:10:29,590
So you need to have a few spaces here. Okay. So this is an example of that.

81
00:10:31,810 --> 00:10:43,340
So here's an if statement that says if X is greater than one, we're going to set Y equals two X and then multiply that by three other.

82
00:10:44,290 --> 00:10:48,479
So so this statement x is greater than one.

83
00:10:48,480 --> 00:10:52,600
This is true. So we're going to actually execute these two lines of code.

84
00:10:52,600 --> 00:11:01,600
So what happens in the first line here we have y is equal to X or Y becomes two

85
00:11:02,230 --> 00:11:09,910
and then after that and the next line Y becomes six and then prints out at six.

86
00:11:09,910 --> 00:11:15,840
So again. And then why would actually be a in this case,

87
00:11:15,840 --> 00:11:21,720
even though these are kind of these have the same values as integers in some sense, like it's two and zero.

88
00:11:21,740 --> 00:11:30,210
What if you put this decimal ..0 with going to treat it as a, as a floating point numeric area?

89
00:11:37,140 --> 00:11:47,160
So okay. So that's that's basically if statements are released, the kind of general form of another statement,

90
00:11:48,540 --> 00:11:55,290
I guess is we're going to just kind of add you add different things to the in the basic statement.

91
00:11:55,300 --> 00:11:59,160
The first thing you want to do, you want to add is like the if.

92
00:12:00,300 --> 00:12:10,440
But if else. So basically if statements kind of only does like one thing, if if a condition is true or if it's not true,

93
00:12:10,440 --> 00:12:17,760
it basically just ignores the of whatever is in the contents of the gift statement.

94
00:12:19,470 --> 00:12:31,080
You know, in many cases, you want to do you want to have something like, if this condition is true, you do a if it's not true, you do be okay.

95
00:12:31,090 --> 00:12:36,270
So that's that's that kind of logic is expressed with it with, with, with this L statement.

96
00:12:38,430 --> 00:12:44,400
So basically here is kind of the the the notation that you have to use for this

97
00:12:44,730 --> 00:12:49,830
statement in Python so that if part is basically the same and then to add the galaxy,

98
00:12:49,830 --> 00:12:55,300
just use the kind of keyword. Ellsworth also with a cold and after else.

99
00:12:56,230 --> 00:13:04,890
And then you have to put on the same form and you have to have the code that you want to be associated with the else.

100
00:13:05,890 --> 00:13:11,560
Part of the email statement you have, you have to indent every line in order for room to run.

101
00:13:11,890 --> 00:13:19,210
Okay. So basically because becomes the logic that we have here is if this condition evaluates to true,

102
00:13:19,840 --> 00:13:23,680
we're going to execute all of the the python code here.

103
00:13:24,250 --> 00:13:30,010
If it's not true or not execute all the python code in the second chunk.

104
00:13:32,330 --> 00:13:39,690
All right. So that's it. Also this. I think this just expresses.

105
00:13:42,380 --> 00:13:44,330
These are just examples of their false statements.

106
00:13:44,340 --> 00:13:54,260
So if five is less than three, if you run this, it's going to turn out kind of the second press statement.

107
00:13:54,500 --> 00:14:02,980
Five is not less than three. That's because kind of this this boolean expression up here, Amalgamated False.

108
00:14:03,320 --> 00:14:10,650
Okay. So five is not less than three. Of Kleiner.

109
00:14:11,930 --> 00:14:16,549
Okay. Yeah, this is just another example.

110
00:14:16,550 --> 00:14:20,270
So I'm saying I first define exit the numeric variable.

111
00:14:20,270 --> 00:14:33,829
If as that 3.2 effects is greater than zero, we set the value of this variable absolute value of x to x, otherwise we set negative x.

112
00:14:33,830 --> 00:14:38,000
And so this boolean expression is false.

113
00:14:38,000 --> 00:14:51,139
X is not greater than zero. So we execute kind of the python code right under the else, the else keyword.

114
00:14:51,140 --> 00:14:54,440
So the absolute value of x will be negative x.

115
00:14:54,440 --> 00:14:57,800
And so in this case it's 3.2.

116
00:14:58,310 --> 00:15:04,100
Okay. So these are just examples of if statements or false statements.

117
00:15:08,590 --> 00:15:13,000
So I guess the next step is basically if you have more than two conditions like if.

118
00:15:15,800 --> 00:15:19,870
If this condition is true, you do.

119
00:15:20,210 --> 00:15:23,600
If it's not true, you check another condition. If that condition is true.

120
00:15:24,980 --> 00:15:29,090
It could be. If both of those conditions are not true, then you do see.

121
00:15:29,600 --> 00:15:34,819
So you could certainly have that type of logic for those types of things.

122
00:15:34,820 --> 00:15:49,650
You have to add extra blocks. So in that case, you do what's called the or the syntax to use in Python is the if elif else type of chain.

123
00:15:50,360 --> 00:16:02,360
So this is basically when you have some type of computation that that depends on kind of more than two logical conditions.

124
00:16:02,930 --> 00:16:08,810
Okay. And so that is the. The syntax for this is the following.

125
00:16:08,830 --> 00:16:12,610
I mean, we're kind of basically similar. We're just adding these extra.

126
00:16:13,640 --> 00:16:24,140
I live pictures blocks. So we have this out there and then we have this other condition.

127
00:16:25,010 --> 00:16:29,240
And so if. Is that conditions true?

128
00:16:29,260 --> 00:16:36,040
We execute this or I guess if that condition is true and condition one false.

129
00:16:36,520 --> 00:16:42,520
So it kind of does it checks each condition, you know, sequentially from top to bottom.

130
00:16:42,520 --> 00:16:53,799
So I guess the way to interpret this is if condition one is true, then you execute the code chop one and then after executing coach one,

131
00:16:53,800 --> 00:16:59,830
you then move outside of the like down here, outside of the if all else chain.

132
00:17:02,230 --> 00:17:06,880
If condition one is false, then you check condition two.

133
00:17:07,570 --> 00:17:13,510
So if condition two is true, then you execute coach two and after doing that and then you,

134
00:17:15,970 --> 00:17:23,020
then you go to that the code basically outside of the full force chain.

135
00:17:24,190 --> 00:17:32,080
And then if both condition one and condition two are false, you just execute this, this code chunk three.

136
00:17:32,350 --> 00:17:37,329
Okay, so that's the kind of the logic of an AFL health chain.

137
00:17:37,330 --> 00:17:40,389
And then you can, even if you have a bunch of conditions,

138
00:17:40,390 --> 00:17:50,640
you can even add the extra ellipse in the middle of the logic is basically set to the case where we were.

139
00:17:50,740 --> 00:17:54,160
We have three conditions.

140
00:17:55,520 --> 00:18:13,750
All right. So that's the if. I mean, I guess you don't absolutely have to do this, but in general, it makes it makes more sense to set it up this.

141
00:18:13,790 --> 00:18:19,000
I mean, usually you set up these Boolean expressions.

142
00:18:19,600 --> 00:18:25,090
So that condition one and condition true cannot be both true at the same time,

143
00:18:25,900 --> 00:18:34,060
although I guess in principle you don't necessarily have to do it that way, but it's usually kind of the exclusive logical conditions.

144
00:18:43,980 --> 00:18:57,070
So I guess the reason for that is. If you have a case where both condition one and condition are true, it would actually only execute coach one.

145
00:18:57,600 --> 00:19:01,080
Okay. Which may or may not be what they want.

146
00:19:01,260 --> 00:19:11,790
Okay. Although in print, there's nothing stopping you from doing that, but it's just something to keep in mind.

147
00:19:12,300 --> 00:19:18,090
So as long as you avoid defining your Boolean expression.

148
00:19:18,090 --> 00:19:24,740
So that condition one and condition two are both true, then there's basically only like three possibilities.

149
00:19:24,750 --> 00:19:31,930
So there's the possibility of condition one being true and condition two being false.

150
00:19:32,130 --> 00:19:35,380
In that case, you would execute code chop one.

151
00:19:35,490 --> 00:19:44,280
So in this case, the first bullet point you would, you would execute the code chunk one.

152
00:19:44,760 --> 00:19:52,500
And the second bullet point where condition one is false and condition two is true and you would execute coach on two.

153
00:19:53,100 --> 00:19:58,379
And then kind of the third case where condition one is false and condition two is false as well.

154
00:19:58,380 --> 00:20:01,770
You execute the code chunk three.

155
00:20:02,340 --> 00:20:09,959
So that's kind of a way for looking at different combinations of condition one and two condition two.

156
00:20:09,960 --> 00:20:14,250
And this is kind of where the three different possibilities come from.

157
00:20:17,400 --> 00:20:21,639
So that's the if l. Okay. Just like I said before, you.

158
00:20:21,640 --> 00:20:25,270
If you have more than three possible conditions.

159
00:20:28,900 --> 00:20:39,770
Uh. Then you can just basically use an extra 11 chunks in the middle of the if an elf

160
00:20:40,060 --> 00:20:48,650
at the top of the bottom of it since that's no problem to add as many live chunks.

161
00:20:50,350 --> 00:21:02,870
Okay. So let's maybe just do a little example just to make sure we're clear about the syntax for if all else changed.

162
00:21:02,880 --> 00:21:10,850
So this is similar to the use the bank deposit calculation that we talked about earlier or last time.

163
00:21:10,850 --> 00:21:21,170
So let's say we just want to write some Python code that depicts the amount of money that you have after two years.

164
00:21:21,890 --> 00:21:32,570
Given that you kind of deposited a certain amount of money in a bank account that earns annual interest or compound interest.

165
00:21:33,380 --> 00:21:36,500
But let's say the kind of interest rate.

166
00:21:37,740 --> 00:21:46,290
Uh. Uh. Has some kind of dependance on the initial amount that you that you deposit.

167
00:21:46,400 --> 00:21:52,470
Okay. So kind of the more money than deposit, you have a higher interest rate on your account.

168
00:21:53,070 --> 00:22:02,760
Okay. So let's just say, as I said, as an example, if we have if we deposit less than $100, our interest rate is 5%.

169
00:22:03,210 --> 00:22:10,320
If we deposit between $108,000, our interest rate is 10%.

170
00:22:10,950 --> 00:22:15,330
If it's greater than $1,000, we have a 20% interest rate.

171
00:22:15,930 --> 00:22:19,530
Okay. And then basically just for compound interest,

172
00:22:19,530 --> 00:22:27,090
you can just use this type of formula as like the initial the value of the initial deposit in ours, the interest rate.

173
00:22:28,350 --> 00:22:42,560
So basically, you can use an effective el-Shater for basically these types of these types of calculations changed or if elif else I guess changes,

174
00:22:42,570 --> 00:22:45,570
it's kind of perfect. Okay.

175
00:22:47,550 --> 00:22:55,290
So here is like the the the actual python code they would use for that calculation.

176
00:22:55,290 --> 00:23:01,440
So I'm just defining this very this numeric variable first call in deposit.

177
00:23:03,300 --> 00:23:11,260
So I'm just assigning it the value 200. I think it's actually it's actually an integer the way I first defined it.

178
00:23:11,280 --> 00:23:16,229
And then I just wrote it if elif off chain.

179
00:23:16,230 --> 00:23:22,050
So I'd say if I need deposit is less than or equal to 100.

180
00:23:23,250 --> 00:23:26,940
You create this variable final deposit.

181
00:23:29,560 --> 00:23:34,810
Was equal to the deposit times 1.05 square.

182
00:23:35,230 --> 00:23:39,880
So remember the way you do. Exponent is the double star.

183
00:23:40,630 --> 00:23:47,610
So this is times 1.05 squared. I guess I didn't have to pick a rhyme.

184
00:23:47,730 --> 00:23:50,820
Written it down just 1.5, but same thing.

185
00:23:52,380 --> 00:24:01,560
The second edition is if initial deposit is greater than 100 and some using the boolean and.

186
00:24:02,980 --> 00:24:08,770
Here if it's both greater than the hundred and lesser than or equal to 1000.

187
00:24:11,720 --> 00:24:23,430
Then the final deposit is. Equal to the initial deposit time of 1.1 squared and then else I guess covers everything since everything.

188
00:24:23,440 --> 00:24:39,700
I mean, assuming that kind of initial deposit is positive or it's a positive number, if these condition if these first two conditions are false,

189
00:24:39,700 --> 00:24:45,790
that kind of automatically implies that the initial deposit is greater than a thousand.

190
00:24:45,790 --> 00:24:57,370
Right? If this if it's not less than 100 and it's not between 100,000, it automatically implies that it's it's greater than a thousand.

191
00:24:57,580 --> 00:25:06,700
Okay. So in that case, we, we sign the, the variable of the value initial deposit times 1.2 square.

192
00:25:06,710 --> 00:25:11,650
So that's that's basically the 20% interest rate comes from.

193
00:25:12,820 --> 00:25:19,480
Okay. So you can see this the final printed out like this a lot of times is the.

194
00:25:21,860 --> 00:25:26,660
The final deposit variable is is a floating point at numeric variable.

195
00:25:27,170 --> 00:25:32,320
Okay. So it's working. Basically we're multiplying a integer times a float.

196
00:25:32,330 --> 00:25:42,140
So. No. Is that it for?

197
00:25:46,540 --> 00:25:50,850
Let's do it quickly so we have a little extra practice.

198
00:25:50,860 --> 00:25:54,309
This is just a little exercise.

199
00:25:54,310 --> 00:26:06,300
I think it's just good to write to write things out. Sometimes you see you have some practice writing some python code books now.

200
00:26:07,160 --> 00:26:11,930
So I think this is kind of similar to the previous one, really.

201
00:26:15,850 --> 00:26:29,249
And. You know. Okay anyway so yeah we want to in itself else chain that depends on the calculations

202
00:26:29,250 --> 00:26:34,920
like the final price of a ticket or have a discount that depends on the age.

203
00:26:35,550 --> 00:26:51,690
So there's kind of given these age ranges, you know, the, the, the greater the discount depends on kind of which in each category you fall into.

204
00:26:53,010 --> 00:26:56,970
So let's see, how would we do that? We were in the West Coast.

205
00:26:59,530 --> 00:27:03,510
It's right here. So I said, How would we do that?

206
00:27:06,850 --> 00:27:10,330
So let's just say. And the price is like the.

207
00:27:12,950 --> 00:27:19,970
Since the interval at the original price. Let's just. It's $100 from now, let's just say pages.

208
00:27:20,830 --> 00:27:31,030
We can try different values of and just say, well, you had if it's the first edition that you want to check.

209
00:27:32,280 --> 00:27:38,150
You could do it in different orders, but I'd do it this way if age is lesser than or equal to five.

210
00:27:42,200 --> 00:27:50,110
You're going to. Probably do it similar to what we did before creating a new variable.

211
00:27:52,650 --> 00:28:01,530
Times. This is like I'm writing this for the.

212
00:28:02,570 --> 00:28:12,920
Hash symbol is a comment so you can just write text and it won't affect the execution of Python code.

213
00:28:12,920 --> 00:28:19,190
So this is obviously we're going to note that this is the 50% discount.

214
00:28:20,510 --> 00:28:32,430
So then actually when I do publish it. Because the second condition so well if it's between these age ranges.

215
00:28:32,430 --> 00:28:47,470
So I guess one way to do this is to check. If age is between five and 18 or so, I'm going to have like an ad and it here inside parentheses.

216
00:28:47,920 --> 00:28:54,610
I do that for like separate from I want to evaluate that separately from the the or part.

217
00:28:55,570 --> 00:29:03,190
So the the way you would do that is would say a h is.

218
00:29:06,590 --> 00:29:11,160
And that's what we wanted to do.

219
00:29:11,180 --> 00:29:14,870
So the more Middle Ages, between five and 18.

220
00:29:14,870 --> 00:29:17,570
So greater than five. Lesser than or equal to 18.

221
00:29:19,440 --> 00:29:28,650
And then we want to or so we want to break we want to compare this total statement with the report card.

222
00:29:29,280 --> 00:29:33,120
Okay. So that's that's why we have the parentheses there.

223
00:29:34,260 --> 00:29:40,250
So for ages. Greater than 65.

224
00:29:43,850 --> 00:29:50,630
You need another call and you know the final price point 75.

225
00:29:57,640 --> 00:30:01,550
And then the final one, I guess that covers everything else.

226
00:30:10,540 --> 00:30:13,900
So if you're not here, you're not there.

227
00:30:14,640 --> 00:30:17,740
Yeah, that's incorrect as it helps you get it.

228
00:30:17,990 --> 00:30:23,590
Yeah, it's 10% discount.

229
00:30:33,200 --> 00:30:43,659
The builders cranked out the final price to make sure it runs well.

230
00:30:43,660 --> 00:30:47,080
So I think and if ages 12, we should be getting a.

231
00:30:48,140 --> 00:30:53,480
25% discount. So it should be 75.

232
00:30:53,720 --> 00:30:57,630
Okay. So it's. At least that part runs correctly.

233
00:30:57,930 --> 00:31:03,660
If it's let's say we're four years old, we should be getting a 50% discount.

234
00:31:04,900 --> 00:31:10,000
For like seven days. We should also be getting a 5% discount.

235
00:31:10,140 --> 00:31:13,990
Okay, so let's run this correctly. Oh.

236
00:31:16,490 --> 00:31:20,750
And let's say we're 55, we should be getting like only the 10% discount.

237
00:31:25,690 --> 00:31:31,740
Oh, I guess I put this. If that's necessary, I guess just to.

238
00:31:35,150 --> 00:31:38,810
I helped you. I mean, you could, if you want to. Rounded down to the nearest integer.

239
00:31:39,830 --> 00:31:53,850
You can use this round function. So let's see if this mean we could test it out.

240
00:31:54,900 --> 00:32:02,410
So let's say. Let's say we have a float and.

241
00:32:06,140 --> 00:32:13,580
Let's say we're 65.2 or something. So I think you should be getting you should be getting a 10% discount.

242
00:32:15,550 --> 00:32:22,180
If you're 65.2, even though you're technically greater than 65.

243
00:32:22,180 --> 00:32:29,360
But I'm. Rounded to the nearest integer here you're lesser than or equal to 65.

244
00:32:29,810 --> 00:32:32,870
So you only get a 10% discount. So let's see.

245
00:32:34,370 --> 00:32:46,610
Okay. So that that runs correctly. You can see it with 5.2 as well.

246
00:32:47,240 --> 00:32:52,250
You should be on you should be getting the 25% discount if you need to.

247
00:32:52,250 --> 00:32:57,690
5.20 looks. No, no.

248
00:32:57,710 --> 00:33:00,930
It's lesser than or equal to five. Sorry. So. Yeah.

249
00:33:01,130 --> 00:33:05,260
Okay. So that's correct. It's. Yeah.

250
00:33:05,270 --> 00:33:13,070
You should be getting a 50% discount. Even though you're you're greater than 5%, it rounds down, you're getting 50% discount.

251
00:33:13,160 --> 00:33:17,990
So so that's one way of writing it.

252
00:33:18,000 --> 00:33:21,020
I guess I can mention it. I mean, another way of writing it.

253
00:33:21,020 --> 00:33:24,650
I mean, you know, you could have like instead of writing it this way.

254
00:33:26,960 --> 00:33:39,890
You could have two outlets. You could have like age is greater than five and age is less than 18 and don't even have this or part and just put.

255
00:33:42,470 --> 00:33:50,580
You could put the check in whether or not. Age is less than 65 or greater than 65.

256
00:33:51,090 --> 00:33:55,560
You could just put that as another element. I guess I can just write it out as well.

257
00:33:57,250 --> 00:34:03,879
Yeah. If we could do it this way, and then it just seemed easier to do.

258
00:34:03,880 --> 00:34:09,390
You can do it that way. Right.

259
00:34:12,850 --> 00:34:18,759
Greater than. You could have.

260
00:34:18,760 --> 00:34:26,200
Yeah. And then you would apply the same discount or.

261
00:34:30,590 --> 00:34:40,540
So let's just check it. So that works through 66.

262
00:34:42,150 --> 00:34:47,920
I think the 25% discount. Yeah. That's that's another way of doing it is because you know.

263
00:34:50,980 --> 00:35:04,810
If you enter a value greater than 65, so something like 70, it'll check this box, it'll check this condition here, and that'll be false.

264
00:35:05,500 --> 00:35:10,690
So. But you have another set of statements.

265
00:35:10,690 --> 00:35:18,770
So it could still it'll still kind. You still apply the current discount.

266
00:35:18,860 --> 00:35:23,680
Okay. So there are just two different ways of doing the same thing.

267
00:35:26,000 --> 00:35:37,530
So that's. So that's all I got to say about if all statements, at least for now, in question.

268
00:35:41,200 --> 00:35:45,850
We move on. Comments.

269
00:35:47,340 --> 00:35:57,480
Let's see. So I guess the next thing we want to talk about for Python is this function for how to write functions.

270
00:35:57,990 --> 00:36:04,980
So basically a python, I guess in other languages to add function is just how to think of it.

271
00:36:05,760 --> 00:36:06,070
Right?

272
00:36:06,090 --> 00:36:17,310
The way it's mostly used is it's just a kind of a chunk of code that performs like a specific task or maybe a couple of kind of closely related tasks.

273
00:36:17,490 --> 00:36:29,250
Okay. So one of the reasons why it's useful to be able to write functions in Python.

274
00:36:30,150 --> 00:36:33,360
Ah, I guess that these are the three main reasons, I guess.

275
00:36:34,920 --> 00:36:37,950
One of the main reasons is that.

276
00:36:41,030 --> 00:36:49,160
You know, oftentimes you need to execute the same type of computations many times in different places in your code.

277
00:36:49,550 --> 00:36:55,770
And you don't have to kind of rewrite the same type of code all fall all over the place.

278
00:36:55,770 --> 00:37:00,110
You that to do that type of computation can just write it in a function.

279
00:37:00,890 --> 00:37:11,480
And then whenever you need to use that, you just you just call it functions and allows you to reuse code all over the place.

280
00:37:12,500 --> 00:37:20,450
I'd say it helps readability. It basically allows you, I would say, to kind of separate.

281
00:37:23,600 --> 00:37:31,730
Your code into different chunks. You don't have this a big long string of code there.

282
00:37:33,500 --> 00:37:42,620
That's a few hundred lines or something. It could kind of separate out some of the computations into certain chunks of code that do a specific thing.

283
00:37:43,100 --> 00:37:49,700
It's a lot easier to read or understand what with the program is, is, is doing.

284
00:37:50,550 --> 00:37:55,640
And I guess the last thing I think it helps to reduce bugs or errors in your code.

285
00:37:57,030 --> 00:38:01,909
You know, if you can write a lot here interested in doing some computation,

286
00:38:01,910 --> 00:38:11,330
if you just write it as a function and then really check, check that function well, check that it's working properly.

287
00:38:15,720 --> 00:38:23,270
Then you can kind of use it all over the place rather than kind of checking that kind of a huge program.

288
00:38:23,290 --> 00:38:31,380
Like once it's easier to it's easier to check whether or not a specific function is kind of doing exactly what it should do.

289
00:38:32,400 --> 00:38:38,370
So those are kind of the reasons for doing function or using functions or being able to write your own functions.

290
00:38:40,300 --> 00:38:45,730
So the way these are the chief components that a function should have.

291
00:38:45,730 --> 00:38:57,590
So you have to choose a function name. There's the parameters of a function wizard, like the things that you input.

292
00:39:03,720 --> 00:39:07,890
I'm going to use the word parameter, an argument of a function as the same thing.

293
00:39:08,610 --> 00:39:13,650
I think some people distinguish between the parameters as like the.

294
00:39:14,670 --> 00:39:18,310
The variable names in the arguments are the specific values.

295
00:39:18,620 --> 00:39:29,520
But I think a lot of people just use, you know, the parameters or arguments as a function basically interchangeably.

296
00:39:29,940 --> 00:39:32,940
So these are like the inputs of a function, the inputs to the function.

297
00:39:32,940 --> 00:39:40,590
So a function F of x x is the parameter of the argument of that function.

298
00:39:40,770 --> 00:39:45,720
Okay. And then there's a return value are typically you have a return.

299
00:39:49,140 --> 00:39:53,129
So this is the this is basically what is the output function.

300
00:39:53,130 --> 00:39:56,670
So if you have F of X, it's the the value.

301
00:39:58,570 --> 00:40:10,010
Returned by the fullbacks. I mean, you always have to have a return value and you do have a function that is prince a message.

302
00:40:10,340 --> 00:40:22,600
It doesn't really return something specific, but it's common with most of the time you do have some specific value return type function.

303
00:40:23,020 --> 00:40:30,000
Okay. So here's how the syntax for defining.

304
00:40:31,110 --> 00:40:43,290
A function in Python. So you have to have this keyword def the F so you see the and python code is basically if you see that keyword,

305
00:40:43,290 --> 00:40:51,960
that means that there's a function there. So you have to write the F and then then the, the function name that you choose.

306
00:40:52,350 --> 00:40:58,680
So you're going to choose some function name. And then these are the parameters here.

307
00:40:58,690 --> 00:41:08,170
So these can be. Multiple variables are just a single variables field multiple variables separate them by comma, comma.

308
00:41:08,180 --> 00:41:14,630
So if we have a function that depends on X, Y and Z, you would have X, Y or Z.

309
00:41:15,380 --> 00:41:19,430
If it's just kind of one parameter, you would just have X the way to do it.

310
00:41:20,560 --> 00:41:31,210
And then kind of underneath after using a colon again, you have to do that and dent have to and dent all of your code associated with this function.

311
00:41:34,270 --> 00:41:37,719
So this is just a chunk of code.

312
00:41:37,720 --> 00:41:41,200
So maybe several lines of code are longer than that.

313
00:41:42,280 --> 00:41:51,010
That does some kind of specific type of computation. So this is just a chunk of Python code and then you'll you'll often return of some type of value.

314
00:41:51,140 --> 00:41:56,620
So you can use the keyword return and there's some value here, the functions in return.

315
00:41:57,760 --> 00:42:00,219
So that's how you define a function when you want to use it.

316
00:42:00,220 --> 00:42:10,330
And like other places in your art code, the way you use the function is just a function name and then you give it as the arguments,

317
00:42:10,330 --> 00:42:15,580
like basically it's the value of some variable here or collection variables.

318
00:42:16,240 --> 00:42:22,840
Okay, so that's usually what you refer to as the values that you pass to the function.

319
00:42:23,560 --> 00:42:33,340
And then when you're using this function kind of other places in your python code, each time you use it, it's often calling, calling the function.

320
00:42:33,340 --> 00:42:36,550
So you call function to kind of, kind of use it.

321
00:42:38,120 --> 00:42:41,660
So here's a look at specific examples. So hopefully just to.

322
00:42:42,810 --> 00:42:50,940
And hopefully this will make it more clear. So let's just write a kind of a short function that just computes the square of

323
00:42:50,940 --> 00:42:56,460
a of a number of the input to our functions is going to be a single number.

324
00:42:57,270 --> 00:42:58,739
So we can write it out this way.

325
00:42:58,740 --> 00:43:07,590
Let's say we want to call it square F, then we would write first the keyword def def, then we're going to call it square.

326
00:43:07,600 --> 00:43:12,960
And then so we write down square at ten and then we give it the argument x.

327
00:43:15,700 --> 00:43:20,970
And then. Basically this is our chunk of code.

328
00:43:21,600 --> 00:43:30,480
We just say we define the variable x squared as equal to x times x and we want to return the value of x squared.

329
00:43:30,510 --> 00:43:34,650
So that's just an example of a function that returns the square number.

330
00:43:35,730 --> 00:43:41,310
So in this case, square F is the function name. X is the parameter argument or argument.

331
00:43:42,120 --> 00:43:54,330
And then after doing this, after running this, we can then use it so that that's called call in the function.

332
00:43:54,870 --> 00:44:05,760
So after running this, if you ran this code, it would print out the value nine from zero because because y will have the value of 3.0 squared.

333
00:44:05,880 --> 00:44:10,350
Okay. So square f then would return the value 9.0.

334
00:44:10,620 --> 00:44:19,350
Okay. So basically in the function terminology where we're passing the value 3.0 to the function,

335
00:44:19,920 --> 00:44:28,440
square off and square off, then returning the value 9.0 and then assigning 9.0 to supply.

336
00:44:29,670 --> 00:44:36,230
That's kind of where things are going on. All right, so let's just do another example.

337
00:44:38,690 --> 00:44:43,010
So in this example, I mean, I assign X times X variable X squared.

338
00:44:43,460 --> 00:44:50,570
I mean, you could skip this step, you could just do return x times since that's also possible.

339
00:44:52,170 --> 00:45:03,139
X is another example. Just say say you want to write a python function that returns the value x squared plus white cube for two input numbers.

340
00:45:03,140 --> 00:45:07,160
The way you would do that, you just again use keyword the F.

341
00:45:08,120 --> 00:45:13,490
Then if we have example function, it would have x.

342
00:45:14,180 --> 00:45:21,800
Now we have two parameters or arguments x and y and then we can just return x times x plus plus y.

343
00:45:22,550 --> 00:45:27,100
Okay. Uh.

344
00:45:29,170 --> 00:45:31,600
Yeah. This is just another way of I mean, this does this.

345
00:45:33,310 --> 00:45:46,120
The same exact thing is this I just have this intermediate step where I'm assigning x squared plus y key to this variable F in underscore value.

346
00:45:46,290 --> 00:45:52,630
Our value doesn't really matter if it's just the both of them do the same thing.

347
00:45:53,950 --> 00:45:59,370
Okay, so here's, here's where where I guess functions become useful.

348
00:45:59,380 --> 00:46:04,180
So let's say we let's think about this bank deposit example.

349
00:46:04,180 --> 00:46:13,200
Again, I think it's just easier to write a function that computes this final deposit amount.

350
00:46:14,020 --> 00:46:17,350
And then once we have kind of created this function, we can,

351
00:46:19,090 --> 00:46:28,090
we can just repeatedly use we can just plug in any dollar amount here and we can get the appropriate final, final deposit.

352
00:46:28,100 --> 00:46:39,790
And so I think this is the exact same setup we had before where the interest rate depends on the the value of the initial deposit.

353
00:46:39,790 --> 00:46:46,420
So I think I'm just using the exact same if it helps type of logic.

354
00:46:47,230 --> 00:46:51,370
So that's down here. I think this is the exact same code that we had before.

355
00:46:51,850 --> 00:46:56,459
So now I'm just putting it. I'm just putting it inside the function.

356
00:46:56,460 --> 00:47:05,730
So here we have again, we have the key word, the F, then the name of our function is going to be final.

357
00:47:05,730 --> 00:47:13,320
The deposit value and then have the name of the parameter or input argument is going to be a deposit.

358
00:47:14,040 --> 00:47:20,910
And so once we have. This variable name and the deposit, which you kind of use it.

359
00:47:24,420 --> 00:47:33,840
As if it were a number, at least in our R in our Python code that we write inside the function.

360
00:47:34,830 --> 00:47:42,870
So again, this is basically the exact same if all else chained code that we used before.

361
00:47:43,410 --> 00:47:47,130
And basically, we're just going to return a file deposit at the end.

362
00:47:47,520 --> 00:47:51,160
Okay. Oh.

363
00:47:51,810 --> 00:48:02,130
So this is more convenient. You can kind of see once you've created this, once you've written this function, you can basically use it.

364
00:48:03,420 --> 00:48:14,310
All over the place, especially if you're if it's part of a computation that's needed in a within a larger program, makes things a lot more convenient.

365
00:48:14,880 --> 00:48:18,930
Whenever you need that final deposit value after two years, you can just.

366
00:48:21,100 --> 00:48:25,770
Call this function with the. Okay.

367
00:48:26,340 --> 00:48:37,170
So you have the ability to call the same function many times is really one of the probably most useful, the most useful aspects of functions.

368
00:48:37,300 --> 00:48:44,550
Okay. So this is just these are just examples. If you run it, if you run this, I need to return this value.

369
00:48:49,620 --> 00:48:53,309
Okay. So that's the Pank deposit example.

370
00:48:53,310 --> 00:48:57,750
So here's just a just a note about function names.

371
00:48:58,350 --> 00:49:02,399
It's essentially the same, the same rules as variable names.

372
00:49:02,400 --> 00:49:08,940
And you can. And. You can name function names, mostly what you want.

373
00:49:09,450 --> 00:49:13,170
There's just a few restrictions on the name that you can give it.

374
00:49:14,910 --> 00:49:20,360
So the same rules for variable names apply to function names, basically.

375
00:49:23,280 --> 00:49:28,740
You can they can only contain letters, digits or underscores, and they can not start with a number.

376
00:49:29,580 --> 00:49:35,910
There are. Additional rules.

377
00:49:36,930 --> 00:49:45,060
So you cannot use a function name, which is the same as one of python's reserved words.

378
00:49:45,690 --> 00:49:52,140
It's a python that's kind of a collection of reserved words that you cannot not use as the name of function.

379
00:49:52,500 --> 00:49:55,920
It'll show that in the next slide, I would note here.

380
00:49:56,250 --> 00:50:11,440
I would also say this as a recommendation. So I would not name a function that is built into Python like something like go print is like I said,

381
00:50:11,440 --> 00:50:18,820
that is a built in Python function where I could show the foreground is actually a built in Python function.

382
00:50:19,300 --> 00:50:22,410
So I try to avoid doing that, although I think it's allowed,

383
00:50:22,420 --> 00:50:30,760
but I kind of try to avoid doing it just because that could potentially lead to some mistakes.

384
00:50:31,540 --> 00:50:35,740
So these are the the reserve words that I.

385
00:50:39,660 --> 00:50:46,979
And then there's 30 something, I guess reserved words. So you cannot use any of these words as a the name of a function.

386
00:50:46,980 --> 00:50:53,280
So you can't you can't name a function, for example, or you can't name a function.

387
00:50:53,970 --> 00:50:58,990
And since that's kind of. Reserve for a logical end.

388
00:50:59,200 --> 00:51:02,900
Okay. So you cannot do that.

389
00:51:02,920 --> 00:51:09,980
Okay. Okay. So here, I guess we'll talk about.

390
00:51:11,300 --> 00:51:15,950
Default parameters. So this is just another thing that I think is useful.

391
00:51:16,950 --> 00:51:24,140
And we also talk about this in our and in default values that are pretty common in both both Python and R.

392
00:51:25,510 --> 00:51:33,130
So you'll often see parameters or arguments and functions of the given default values.

393
00:51:34,360 --> 00:51:47,770
Basically, all that means is that you don't necessarily have to provide values for those parameters when you call the function.

394
00:51:48,550 --> 00:51:57,340
Okay. I mean, you can if you want to, but you don't have to. So if you do, kind of.

395
00:51:59,100 --> 00:52:04,650
You'll pass a value to to the parameters that have the fall values.

396
00:52:04,870 --> 00:52:07,950
It'll use those the values that have passed to it.

397
00:52:08,820 --> 00:52:16,980
But if you don't pass it any values, it'll basically just assume that the value has some default value.

398
00:52:17,190 --> 00:52:21,140
Okay. Okay.

399
00:52:21,270 --> 00:52:26,580
So possibly it might be more clear if we look at like an example.

400
00:52:27,180 --> 00:52:32,340
So this isn't the name of a or this is a function called greeting.

401
00:52:32,350 --> 00:52:41,850
It has one, I guess, parameter or argument that does not have a default value and one that does.

402
00:52:41,940 --> 00:52:47,520
Okay. So the first argument has no default value and the second one.

403
00:52:48,360 --> 00:52:56,850
So the way you kind of specify it, something that has a default value, you basically make it equal to something in the function definition.

404
00:52:57,570 --> 00:53:08,730
Okay. So this has a. So basically this returns a string, which is it's going to be like, hello,

405
00:53:09,720 --> 00:53:14,400
some name of your first name and then a last name which has a default value.

406
00:53:15,450 --> 00:53:21,599
Okay. So you can basically call you can basically call this function.

407
00:53:21,600 --> 00:53:27,540
Giving either one or two arguments is basically up to you depending on what you're trying to do.

408
00:53:27,570 --> 00:53:35,490
So if I just give it one argument, it prints this out or it assumes your last name is Henderson automatically,

409
00:53:37,400 --> 00:53:40,680
you know, we only we're only giving it one argument, right?

410
00:53:41,110 --> 00:53:44,490
We call here only giving it one string.

411
00:53:44,640 --> 00:53:53,280
Okay. But if you give it to arguments, it uses it uses the value that you give us.

412
00:53:53,290 --> 00:54:01,440
If I give it the second argument, I just h that it'll use that instead of the, instead of the default value.

413
00:54:06,170 --> 00:54:13,220
So that's how the fault values work. Here's another example to make things clear.

414
00:54:14,530 --> 00:54:23,770
So let's write down something similar to the sum squares function that we had before this time.

415
00:54:24,040 --> 00:54:27,160
Now we're just going to return x squared plus y squared. Okay.

416
00:54:29,890 --> 00:54:35,350
So here in this case, Y is as a default value. So X does not have a default value.

417
00:54:35,350 --> 00:54:39,520
The why does. So Y will be assumed to be equal to one.

418
00:54:40,870 --> 00:54:49,660
If we call this function with only one argument values, if we give it to arguments, it'll obviously use the second argument that we get.

419
00:54:49,780 --> 00:54:59,319
So if we call the function sum squares of two, it'll return to square is two squared plus one squared, which is one.

420
00:54:59,320 --> 00:55:08,180
So it's five in this case. However, if we if we give it to arguments, it'll, it'll use both of those arguments.

421
00:55:08,290 --> 00:55:13,900
If we call some squares with 3.2 and 2.3, it will return.

422
00:55:15,820 --> 00:55:23,880
3.2 squared plus 2.3 square inch instead of two three instead of 3.2 squared plus one.

423
00:55:24,260 --> 00:55:34,150
Okay. So those are default arguments are the full parameters like arguments and you start using those terms interchangeably.

424
00:55:36,550 --> 00:55:40,420
Okay. So that's those are default values. I mean, I think these are.

425
00:55:43,840 --> 00:55:46,990
These are especially useful in practice if you have a function.

426
00:55:48,440 --> 00:55:59,540
That has a bunch of arguments, but know the user doesn't necessarily need to use a lot of the arguments unless they are.

427
00:56:00,690 --> 00:56:05,790
Unless they have some specific narrow thing that they're interested in.

428
00:56:06,690 --> 00:56:11,940
So there's maybe only two or three arguments that you really that are really

429
00:56:11,940 --> 00:56:18,960
necessary to provide that kind of all the remaining like ten or so arguments have.

430
00:56:22,390 --> 00:56:26,260
You know, they can have they can basically be set to some reasonable default, though.

431
00:56:26,740 --> 00:56:37,000
I mean, that's kind of a common use of default parameters when you're I guess, in practice, you know, when you when you're writing Python code.

432
00:56:38,430 --> 00:56:40,200
Okay. So this is.

433
00:56:43,550 --> 00:56:54,230
She would argue it's not really keyword arguments are really just related to how you are just a way of of calling the function in a specific way.

434
00:56:54,230 --> 00:56:59,959
It's not it's not really related to how you define a function or write a function.

435
00:56:59,960 --> 00:57:06,050
These are is it this is mostly just sort of a different way of of of calling a function.

436
00:57:06,950 --> 00:57:14,529
Okay. So I guess one advantage of keyword arguments, I guess.

437
00:57:14,530 --> 00:57:19,180
Well, I guess two advantage. Two advantages. I did list both of them, actually.

438
00:57:19,630 --> 00:57:24,070
I mean, one advantage is I think when you call a function using keywords,

439
00:57:24,070 --> 00:57:32,350
I think in many cases it can make your code more readable, easier to read and figure out what's going on.

440
00:57:33,220 --> 00:57:43,170
The other reason is that. You don't necessarily have to remember that the correct ordering of the arguments in the function definition,

441
00:57:43,170 --> 00:57:47,340
I mean, you could always look up the function definition and double check, but it.

442
00:57:53,720 --> 00:57:58,910
I guess it just makes it you don't use keyword arguments, you probably have to do that less.

443
00:57:58,910 --> 00:58:08,110
And then if you did not. All right, so here, here's just an example of another function.

444
00:58:09,440 --> 00:58:13,050
So I created this function called Power In.

445
00:58:16,210 --> 00:58:22,540
It has two arguments based on exponent and we're just returning base rates to the the power of X.

446
00:58:22,960 --> 00:58:25,240
That's all the function returns.

447
00:58:27,460 --> 00:58:34,890
So you might return you if you wanted to compute to it to to the 10th power and just called power F and to competition.

448
00:58:35,160 --> 00:58:35,410
Okay.

449
00:58:36,820 --> 00:58:46,270
So that's one way of calling function, if you were to call it using kind of a keyword argument type of approach, this is the way you would do it.

450
00:58:46,420 --> 00:58:50,590
You can you can call it this way. You can say power f in.

451
00:58:50,590 --> 00:58:55,690
And then I say base equals two and then exponent equals ten.

452
00:58:55,690 --> 00:59:02,920
So you can kind of use that the names of the parameters explicitly when you call the function.

453
00:59:03,790 --> 00:59:07,089
So you say base equals to exponent equals ten.

454
00:59:07,090 --> 00:59:11,950
So that's equivalent to doing this power f into content.

455
00:59:11,980 --> 00:59:17,080
So again, keyword arguments are just related to how we're calling the function.

456
00:59:17,650 --> 00:59:20,380
If it's not related in any way to how,

457
00:59:20,920 --> 00:59:30,340
how we wrote this is just an alternative way of of calling the function rather than just giving that kind of just only the numbers by themselves.

458
00:59:33,840 --> 00:59:43,170
Okay. And so, again, this allows you to not have to remember the order of the arguments.

459
00:59:43,740 --> 00:59:52,770
Right. So as long as the kind of names of the various the names that are used here kind of have an associated name here,

460
00:59:53,640 --> 00:59:56,670
you can switch around the order and the.

461
00:59:59,990 --> 01:00:05,590
When you call function, okay. You don't have to have in the exact same order that it's in the function definition.

462
01:00:05,600 --> 01:00:11,830
So if we did my power and if we just did exponent equals 10/1 and then basically two,

463
01:00:11,840 --> 01:00:17,000
it's basically the same thing that's doing the exact same thing is what we had before.

464
01:00:17,270 --> 01:00:27,290
Okay. So as long as kind of the names are correct, you don't have to get the you don't have to get the exact order of the numbers.

465
01:00:27,710 --> 01:00:35,100
Correct. Okay. So here is just this grading function that we talked about a few minutes ago.

466
01:00:37,230 --> 01:00:38,520
Let's just look at it again.

467
01:00:38,730 --> 01:00:45,350
What I see is the same function and we're just going to call it in a different way if we just call it using fewer arguments.

468
01:00:45,400 --> 01:00:49,890
This is the way you would be like to use the name of the variable when we call it.

469
01:00:49,900 --> 01:00:57,620
So the first name equals something. And where in this way that first name equals this and last name equals this.

470
01:00:58,460 --> 01:01:07,160
And then again. And in the last example we can see when we call it that, even though we switched around the order, it doesn't really matter.

471
01:01:07,160 --> 01:01:11,570
It's really just the names that we use we call the function which matters.

472
01:01:12,380 --> 01:01:15,500
Okay, so it's basically just the names that matter.

473
01:01:16,190 --> 01:01:24,140
Oh. So here's another. Okay.

474
01:01:25,800 --> 01:01:32,970
Talk a little bit about function next time as well. I think that wraps up kind of the main explanation about functions.

475
01:01:34,290 --> 01:01:39,299
This is maybe just a reminder, a review question just so we can put it all together.

476
01:01:39,300 --> 01:01:42,510
So let's say we define this variable.

477
01:01:44,300 --> 01:01:51,610
Sorry. This function in Python the following way. So it has three argument parameters.

478
01:01:52,810 --> 01:02:00,700
Two of them have default values, right? So excessive default value bool underscore var two as default value.

479
01:02:01,510 --> 01:02:08,970
And then we have this kind of false statement. To compute why inside the function and then we return the value.

480
01:02:09,360 --> 01:02:14,650
So what does the. Function.

481
01:02:14,980 --> 01:02:21,520
Following function call return. So we have we're going to poll question true and then column 1.3.

482
01:02:22,510 --> 01:02:28,220
So let's just. I guess walk through this quickly.

483
01:02:30,800 --> 01:02:34,650
So the first argument that we give it as truth is, is the value of truth.

484
01:02:34,670 --> 01:02:38,059
So that's basically to underscore bar one.

485
01:02:38,060 --> 01:02:44,300
Does that have a value? True. X is going to have the value 1.3 does.

486
01:02:46,430 --> 01:02:50,180
Even though these have default values, it does every thing in order.

487
01:02:51,050 --> 01:03:00,060
So X is going to have the value 1.3 And then we did not specify a value for Boockvar two so it will take its default value.

488
01:03:00,060 --> 01:03:04,970
That's true. So both Boockvar one and two bar two are true.

489
01:03:05,720 --> 01:03:09,860
Okay. So when we go inside the function, both of these are true.

490
01:03:09,860 --> 01:03:13,069
So when we look at and that's that's also true.

491
01:03:13,070 --> 01:03:17,480
So it's going to execute this part of the code Y is equal to X plus two.

492
01:03:18,540 --> 01:03:21,660
Will execute the if part of the.

493
01:03:24,220 --> 01:03:29,530
The if part of the if I'll state. Okay so while will the 3.3.

494
01:03:30,070 --> 01:03:33,219
So then would then return that value.

495
01:03:33,220 --> 01:03:36,760
So this will return the value 3.3 I think.

496
01:03:38,340 --> 01:03:42,360
This should return about 3.3. Right.

497
01:03:42,380 --> 01:03:51,430
So let's just. I think that's mostly true today.

498
01:03:51,430 --> 01:03:54,639
I think I said a few extra comments about the library.

499
01:03:54,640 --> 01:04:00,700
Since we're going to use Python, we're going to have to use some libraries at some point.

500
01:04:00,700 --> 01:04:07,960
So a python like base python actually really doesn't have that many functions by itself.

501
01:04:09,820 --> 01:04:18,670
There's really only 68 built in functions in Python or so, actually, not that many.

502
01:04:19,660 --> 01:04:23,920
So things like trends when type bool,

503
01:04:23,920 --> 01:04:32,770
those are all builtin functions that you can just use directly without adding in loading and any additional libraries.

504
01:04:34,630 --> 01:04:38,380
So I think ABS is also built in function.

505
01:04:38,380 --> 01:04:42,370
So that computes the absolute value of a function of a number.

506
01:04:43,240 --> 01:04:50,830
So you can use all of these directly without loading in any libraries and using the exact same way as you would if your,

507
01:04:51,430 --> 01:04:57,729
if you run a function yourself. So you just call them like this if you get an input argument.

508
01:04:57,730 --> 01:05:01,990
So that's those are built in functions that you can use directly.

509
01:05:03,310 --> 01:05:14,350
These are a few extra examples. Min Max Round, I think we talked about that before in our example round has a second argument that you can give it.

510
01:05:16,540 --> 01:05:19,630
So this is actually an example of a case with the default argument.

511
01:05:20,290 --> 01:05:29,110
So I think the default the default value of an argument so that this is how many digits to round off to various decimal places.

512
01:05:30,130 --> 01:05:33,370
So I think the default value of the second argument is zero.

513
01:05:33,880 --> 01:05:37,990
So if we just give it a number around it down to the the nearest integer.

514
01:05:40,350 --> 01:05:48,570
But if you do, too, if you give it a second argument, the value to it all around it to like two decimal places.

515
01:05:51,310 --> 01:05:59,320
So those are other examples. So eventually within the next few classes.

516
01:06:01,060 --> 01:06:12,490
We're going to have to do things that use a lot additional libraries so way and I think it's pretty straightforward to load in additional libraries.

517
01:06:13,630 --> 01:06:19,510
All you have to do well you have to use this kind of from.

518
01:06:22,290 --> 01:06:29,699
A literary type of a syntax, or I guess a lot of times you load into the whole library,

519
01:06:29,700 --> 01:06:34,190
I guess I just mentioned first if you want to load in a single function from a library.

520
01:06:34,730 --> 01:06:43,580
So that's that's also one option. So you can think of a library is just a whole bunch of functions that.

521
01:06:46,960 --> 01:06:54,310
You can load it and kind of make it available to you when you're on your running Python program.

522
01:06:55,460 --> 01:07:01,310
Okay. So let's say we just want to import one function from a certain library.

523
01:07:01,310 --> 01:07:06,890
The way you do that is just from the library name and then import the name of the function.

524
01:07:07,120 --> 01:07:12,590
Okay. So I think actually square root function, I don't think that's actually part of base Python.

525
01:07:13,190 --> 01:07:16,760
There's no built in function that computes the square root of the number.

526
01:07:17,780 --> 01:07:22,130
So one library that has a square root function is the the math library.

527
01:07:22,700 --> 01:07:26,390
So that I have the math library is actually useful, have a bunch of other stuff.

528
01:07:26,990 --> 01:07:31,880
But if you just want to import the square root function, you just do from math import.

529
01:07:31,970 --> 01:07:36,350
Square root starting. Is that the actual name of the function?

530
01:07:37,900 --> 01:07:41,880
Okay. So once you've done that, you can just run. You can use the square root function.

531
01:07:41,890 --> 01:07:45,430
So once we've done that, I can compute the square root of ten.

532
01:07:49,200 --> 01:07:55,320
Yeah. Like I said before, Matt has a bunch of other useful functions like the sine function.

533
01:07:55,890 --> 01:07:59,190
I just want to import this. Only the sine function.

534
01:08:00,730 --> 01:08:04,330
Myself. I can just do from math. Import something. Okay.

535
01:08:06,670 --> 01:08:16,180
Okay. So in many cases, you're saying it's just easier to import the whole library if you need, like, multiple functions from that library.

536
01:08:18,590 --> 01:08:22,550
In that case, you just you import the name of the library because all you have to do.

537
01:08:23,180 --> 01:08:37,040
Okay. So, I mean, I guess the only thing to note by this is when you want to use if you import the entire library at one time,

538
01:08:37,040 --> 01:08:43,850
the way you use functions from that library are just the name of the library, the start, the name of the function.

539
01:08:44,360 --> 01:08:48,980
Okay. So as an example of this, I'm using this library called Random.

540
01:08:49,070 --> 01:08:52,100
It has a bunch of functions for generating random numbers.

541
01:08:52,790 --> 01:08:57,770
So if I import the whole library, I would just import a random.

542
01:09:01,020 --> 01:09:05,250
And then kind of one function from the library is uniform gender.

543
01:09:06,280 --> 01:09:12,550
Generates a uniform random number. So if I want to use that function, I have to use random dot uniform.

544
01:09:12,910 --> 01:09:19,850
Okay. And so this generates a uniform distributed random variable from 0 to 1.

545
01:09:20,000 --> 01:09:22,760
That's kind of what these these two arguments mean.

546
01:09:24,450 --> 01:09:32,310
So that's how you would import all the functions from the library and use is import the name of that.

547
01:09:33,090 --> 01:09:37,640
And the function. Oh you can also.

548
01:09:37,650 --> 01:09:41,250
Yeah, you sort of mentioned that later. You can also import.

549
01:09:45,360 --> 01:09:50,050
Do you often see that with like pandas or nothing?

550
01:09:50,310 --> 01:09:59,250
They do that import random as far as our way or some other shorter name.

551
01:09:59,250 --> 01:10:02,520
And then you can do like, ah, a dog in the floor.

552
01:10:02,580 --> 01:10:07,200
If you do, if you shorten it a little bit, you can import random as all right.

553
01:10:08,660 --> 01:10:16,469
I will see some examples of that later. I think that's pretty common thing you'll see with your pandas.

554
01:10:16,470 --> 01:10:27,420
They'll do important not be as in in p and they'll have you'll see in dot something when you're calling functions from in P library.

555
01:10:33,960 --> 01:10:39,060
I don't know why, but I guess it's just another example of a function from this library.

556
01:10:39,960 --> 01:10:45,150
The normal varied function generates normally distributed random variable.

557
01:10:45,150 --> 01:10:51,610
So here it has. That's two arguments like the mean and a standard deviation.

558
01:10:51,610 --> 01:10:54,780
But this is just. If there's anything.

559
01:10:56,640 --> 01:11:02,280
That's useful about this slide is just it's just another basically just another example.

560
01:11:05,690 --> 01:11:11,130
So I think that was pretty much all I had planned to cover for today.

561
01:11:16,530 --> 01:11:19,650
Any questions before we finish? Final question.

562
01:11:20,610 --> 01:11:23,850
I'll probably post the first homework later this week.

563
01:11:25,020 --> 01:11:29,500
So just. Keep an eye out for that.

564
01:11:34,820 --> 01:11:43,130
But in the end, the question you got to ask me or ask me after the class.

565
01:11:43,910 --> 01:11:45,530
That's all. Yeah, that's all I have for today.

