1
00:00:03,050 --> 00:00:07,490
She says that morning, everybody.

2
00:00:10,750 --> 00:00:21,740
I know. Yeah.

3
00:00:25,810 --> 00:00:32,570
Good morning, everybody. I think.

4
00:00:38,740 --> 00:00:44,890
So hopefully you got your second homework in today.

5
00:00:44,930 --> 00:00:50,760
That was due at 9:00. Did anyone have any questions before we get started today?

6
00:01:01,780 --> 00:01:13,340
No questions. All right.

7
00:01:15,230 --> 00:01:22,370
Well, we're going to get into more more interesting coding today,

8
00:01:22,640 --> 00:01:26,930
because we're going to actually look at some descriptive statistics and things like that.

9
00:01:28,040 --> 00:01:32,540
So let's a lot to talk about today as well as some formatting and things like that.

10
00:01:32,540 --> 00:01:39,810
So let's go ahead and get started. Now, for some reason, that's not showing up over there.

11
00:01:39,830 --> 00:01:43,130
Okay, let's go. And second.

12
00:01:54,790 --> 00:02:04,590
And. And it looks like that worked.

13
00:02:07,530 --> 00:02:16,830
Yes. Okay, good. All right.

14
00:02:18,980 --> 00:02:24,240
SAS. It is not easy. We recognize that if you're getting frustrated.

15
00:02:26,070 --> 00:02:30,510
Please ask for help. We are here to help. You can always email us questions.

16
00:02:31,290 --> 00:02:35,520
We, all three of us have different office hours, so hopefully one of those can work for you.

17
00:02:36,000 --> 00:02:40,680
You're certainly welcome to see me after class or. Or try to make an appointment with me as well.

18
00:02:40,680 --> 00:02:45,180
So there's opportunities for you to get help if you need it.

19
00:02:45,990 --> 00:02:56,190
Try not to get too frustrated. All right. So some of the objectives we're interested in today are to keep your data organized.

20
00:02:57,210 --> 00:03:04,500
So this is going to be using code books, uh, adding labels to variables and creating and applying formats.

21
00:03:05,960 --> 00:03:13,250
Another objective is going to be to review your data and see if it makes sense.

22
00:03:14,030 --> 00:03:18,740
So we're going to examine some characteristics of the data to ensure that they do actually make sense.

23
00:03:19,700 --> 00:03:23,750
It's going to tail using some of these procedures.

24
00:03:24,770 --> 00:03:28,670
So we're going to talk about proc freak proc means proc unit variant and.

25
00:03:31,320 --> 00:03:41,010
As well as format. So one of the things we want to do to make sure we're staying organized is using a logical variable names.

26
00:03:42,410 --> 00:03:46,850
If you just call your variables here in this data, bar one, bar two of our three.

27
00:03:48,830 --> 00:03:53,840
And that's all you've got to go on. Well, I have no idea what these things mean.

28
00:03:56,360 --> 00:04:01,749
It'd be hard to even guess. And. I don't want blood pressures.

29
00:04:01,750 --> 00:04:04,960
Me? I don't know. But who knows? It could be anything.

30
00:04:07,340 --> 00:04:10,370
So one of the things we can do not only.

31
00:04:11,920 --> 00:04:18,320
Give them logical names, like if they were blood pressure, as you might call them, systolic and diastolic or something like that.

32
00:04:19,390 --> 00:04:27,700
But you can also label the variables. So a label is simply a description for that variable.

33
00:04:28,540 --> 00:04:38,050
A short description. And like a format, it only changes how the name is displayed when you look at your data.

34
00:04:39,730 --> 00:04:48,610
So a format, if you remember, would change how the the values of the variable data here is actually displayed.

35
00:04:49,710 --> 00:04:55,320
Where a label changes, how the variable names are displayed.

36
00:04:56,990 --> 00:05:02,770
Okay. So you can see when I do open up this data set,

37
00:05:02,770 --> 00:05:09,340
even though the variables are not well described here with their name, there isn't a label attached to them.

38
00:05:11,840 --> 00:05:15,950
Okay. So when I open it up, you'll see those labels instead of a variable names.

39
00:05:17,360 --> 00:05:22,470
So they weren't blood pressures. It was a high temperature and a low temperature. For a given month.

40
00:05:25,330 --> 00:05:29,890
So at least we know now what that means. Okay.

41
00:05:31,490 --> 00:05:35,990
You can add labels here. Variables with a label statement in your data step.

42
00:05:38,860 --> 00:05:42,520
So this is taking a data set called a weather.

43
00:05:44,420 --> 00:05:47,750
There's no location attached to it. So that means it lives in the work folder.

44
00:05:49,760 --> 00:05:55,190
And we're creating a new one with the same name. So we're going to overwrite it with the new version.

45
00:05:55,520 --> 00:05:58,520
It has these labels. So the label statement.

46
00:06:00,250 --> 00:06:07,420
Just kind of lists the variables that you want to label and in parentheses, the label you want to give it.

47
00:06:09,800 --> 00:06:13,610
Notice this is all one label statement so you can have multiple.

48
00:06:15,140 --> 00:06:19,570
Labels in the same label statement. Okay.

49
00:06:24,430 --> 00:06:30,580
You can also add labels with if you're using the in file and input statements are not just for.

50
00:06:31,480 --> 00:06:36,430
For a sast data set that you're already starting with in this case whether.

51
00:06:37,430 --> 00:06:43,640
Right. So if you are using an in file input statement in your data step, you can still use a label statement as well.

52
00:06:49,900 --> 00:06:55,690
The other thing to stay organized is formats. So we've talked a little bit about these, but we're going to talk more today.

53
00:06:57,520 --> 00:07:03,700
And I want to emphasize again that formats are simply.

54
00:07:05,230 --> 00:07:08,290
A way to tell SAS how to display the data.

55
00:07:08,660 --> 00:07:12,090
It doesn't change how the data is stored in any way.

56
00:07:13,390 --> 00:07:21,340
Okay. So if you've got a date like the SAS dates here, you've got no format applied to it.

57
00:07:21,610 --> 00:07:25,240
It's going to be displayed as the number of days since January 1st, 1960.

58
00:07:27,760 --> 00:07:38,739
If you apply md5 i y that dot, it'll look like a two digit month, two digit day and two digit year or the ten.

59
00:07:38,740 --> 00:07:45,460
That version has a four digit year. But their steward the same in all circumstances.

60
00:07:46,730 --> 00:07:52,250
As a numeric variable. Which is the number of days since 19 January 1st, 1960.

61
00:07:53,400 --> 00:07:58,280
Okay. So it's stored the same in any case.

62
00:08:01,390 --> 00:08:06,580
That contrasts to an informant, which tells us how to read in the data.

63
00:08:07,680 --> 00:08:14,620
Okay. So this the informant is going to be needed for the data step.

64
00:08:15,310 --> 00:08:18,960
If you are reading in external data. Okay.

65
00:08:19,050 --> 00:08:23,490
You need to tell it what to expect from that incoming data.

66
00:08:27,220 --> 00:08:30,640
So we want to be very clear on the difference between informant.

67
00:08:31,180 --> 00:08:35,370
Informant. Any questions about that?

68
00:08:38,900 --> 00:08:43,350
Is this making sense? All right.

69
00:08:46,130 --> 00:08:49,400
Now you also have to apply formats if you're going to.

70
00:08:51,160 --> 00:08:55,260
Create them. There's many preexisting ones that already exist.

71
00:08:56,040 --> 00:09:06,110
We've seen some of those like the date ones. And you can apply them with a format statement, which we've seen a little bit already last week.

72
00:09:09,840 --> 00:09:15,780
Notice that the format name has a dot on the end. That's always going to be true when you're applying the format.

73
00:09:17,340 --> 00:09:22,570
It turns teal. So Sass knows that it's something different.

74
00:09:23,530 --> 00:09:32,389
Okay. It's a format. If you we haven't actually discussed this yet, I don't think.

75
00:09:32,390 --> 00:09:37,310
But you can get this nice screen here with a list of your variable names and your

76
00:09:37,310 --> 00:09:42,440
data and what type it is and its length and formats and formats and labels.

77
00:09:42,800 --> 00:09:48,020
You can see this nice descriptive table of your of your variables.

78
00:09:48,890 --> 00:09:54,879
If you go into your explorer. You can double click on it and open up the data like this.

79
00:09:54,880 --> 00:10:02,270
Right. We've seen that before. If you right click on it and Choose View columns, you'll get this nice table over here.

80
00:10:02,740 --> 00:10:08,550
So it's a nice way to kind of check out your data and see what you've got, especially if your data sets really big.

81
00:10:08,560 --> 00:10:12,350
You might not be able to find the variables as well that you're looking for.

82
00:10:13,180 --> 00:10:16,990
So you can open it up this way and sort by column name and so on.

83
00:10:17,140 --> 00:10:20,170
So it's it's a nice, convenient way to check out your data.

84
00:10:23,220 --> 00:10:26,430
Okay. Now code books.

85
00:10:28,410 --> 00:10:34,710
This is an example of a code book or a piece of a code, but for many.

86
00:10:36,290 --> 00:10:40,280
Some of these were given to you with your last homework that you had to turn in today.

87
00:10:40,820 --> 00:10:43,220
So you at least have seen some of these before.

88
00:10:44,330 --> 00:10:53,660
But a codebook is really great for an analyst, and it gives the variable name as well as any sass labels that might be there,

89
00:10:54,110 --> 00:11:00,620
and an actual description of what it means, maybe how it was collected, who and who it was collected.

90
00:11:01,000 --> 00:11:05,030
Right. So there might be only a subset of people who have that variable.

91
00:11:06,500 --> 00:11:10,879
In this case, you can see the target is males and females 0 to 150 years.

92
00:11:10,880 --> 00:11:15,650
So that's everyone. Right? But it might not be the case that it's everyone.

93
00:11:18,280 --> 00:11:23,110
And it may also give you some some values, maybe a frequency table of some sort.

94
00:11:24,060 --> 00:11:34,260
In this case, you can see something that's very interesting about this variable in and HAYNES It's got a cut off.

95
00:11:35,040 --> 00:11:37,020
It's cut off at the top right at 80.

96
00:11:38,570 --> 00:11:43,670
So if you didn't have this code book, you might think you didn't have anyone in your data that was more than 80 years old.

97
00:11:44,600 --> 00:11:50,960
But in fact, you most likely do. We've got 439 people that are 80 or above.

98
00:11:53,260 --> 00:11:57,430
The reason that Heinz does that is they don't want you to be able to identify people in their data.

99
00:11:58,090 --> 00:12:01,510
And as as people get. Very old.

100
00:12:02,170 --> 00:12:06,920
You might be able to combine that with some of their other survey questions and so on to to identify them.

101
00:12:06,920 --> 00:12:11,030
And they don't want that to happen. Okay. So that's why they do that.

102
00:12:12,550 --> 00:12:15,970
You have to be very aware of these type of things, so you need to review your code books.

103
00:12:17,080 --> 00:12:20,440
It's also a good idea if you're making new data sets to create a code book.

104
00:12:21,040 --> 00:12:25,590
And that's what we asked you to do for your homework to. All right.

105
00:12:28,230 --> 00:12:33,200
So they're very good to have. Key takeaways in that section.

106
00:12:34,010 --> 00:12:44,090
Keep your data organized, so consider using logical names, using labels, formats, and reporting any data, characteristics and codebook.

107
00:12:49,450 --> 00:12:58,610
Okay. It's still working.

108
00:12:58,760 --> 00:13:06,140
Okay. So next, let's talk a little bit more about formats.

109
00:13:08,830 --> 00:13:14,950
Categorical data is often coded as numbers, even though their the meaning of them is a categorical.

110
00:13:15,430 --> 00:13:19,990
They're often coded as numbers. So in this case, we have a center.

111
00:13:22,000 --> 00:13:30,160
You're actually entered as one, two, three, four. But what those mean are some states here Michigan, Ohio, Illinois or Indiana.

112
00:13:31,630 --> 00:13:36,460
So it's helpful to create a format.

113
00:13:37,560 --> 00:13:46,180
For that type of variable. You can create user defined formats with proc format in Excel.

114
00:13:49,260 --> 00:13:52,800
So you start by invoking the format procedure with that statement,

115
00:13:53,610 --> 00:13:59,670
and then there's a value statement which gives the format a name in this case state.

116
00:14:01,220 --> 00:14:06,680
And then lists the values and their formats that you want to attach to them.

117
00:14:10,310 --> 00:14:14,300
This is a nice way to organize your product format, something like this at least,

118
00:14:14,630 --> 00:14:19,220
so that you can kind of see everything, all the values and so on very easily.

119
00:14:20,060 --> 00:14:23,180
You could put this all in one line, but that would look a little messier.

120
00:14:24,150 --> 00:14:33,430
So this is a nice way to organize that. Now in this case, it's going to save the defined formats in the work folder.

121
00:14:34,390 --> 00:14:42,160
For you to use during your sex session. If you want to save them permanently, you can do that as well.

122
00:14:43,370 --> 00:14:46,820
With the library equals option in that PROC format statement.

123
00:14:50,400 --> 00:14:59,460
Okay. So what this is going to do if you add this option is it's actually going to create what we call a format library.

124
00:15:00,940 --> 00:15:08,380
And it's going to put it in the specified folder that's defined by your live name statement at the top.

125
00:15:09,570 --> 00:15:10,950
In this case, it's called library.

126
00:15:15,730 --> 00:15:24,190
Also notice that you can put more than one value statement in the same product format, so it usually makes sense just to have one format.

127
00:15:25,120 --> 00:15:29,520
For all your user defined. Formats.

128
00:15:35,130 --> 00:15:40,560
Okay. Now there is a kind of a special thing happening here.

129
00:15:42,870 --> 00:15:47,290
Just because you create a format. And or save.

130
00:15:47,290 --> 00:15:54,790
It doesn't mean that Sasse has read those formats in just the two year SAS session.

131
00:15:56,470 --> 00:16:00,610
It will do that automatically here. It will save it into the work folder.

132
00:16:01,360 --> 00:16:05,260
But here it's saving it somewhere else. Okay.

133
00:16:06,340 --> 00:16:09,700
However, because we've called our library.

134
00:16:10,120 --> 00:16:19,930
Library staff will always search any live name called library for formats, and if it finds them, will automatically read them in.

135
00:16:22,420 --> 00:16:26,560
The caveat there is if you call your name, something else.

136
00:16:28,060 --> 00:16:33,250
Like Scott in this case, you're going to have to tell Seth to look for formats there.

137
00:16:34,780 --> 00:16:39,130
And you do that with this options statement with the format search option.

138
00:16:43,010 --> 00:16:46,490
Okay. So I've pointed to that folder.

139
00:16:46,880 --> 00:16:52,850
Call it Scott. And then I've told SAS to look for formats in that folder.

140
00:16:54,870 --> 00:17:03,130
You can you can actually read in full format libraries from multiple libraries if you want by listing them inside the parentheses there.

141
00:17:05,130 --> 00:17:10,330
Okay. So once they're read in, then you can use them.

142
00:17:15,270 --> 00:17:23,110
Makes sense. Of course, just in them doesn't actually do anything to your data.

143
00:17:23,130 --> 00:17:26,610
You have to apply them to your data if you want them to show up.

144
00:17:27,690 --> 00:17:33,120
So you have to create them and then you have to apply them with the format statement in your dataset.

145
00:17:39,380 --> 00:17:45,440
Okay. Notice that when we defined it in the product format, there was no dot, we just gave it a name.

146
00:17:45,620 --> 00:17:55,310
But when you're applying it, the state there has a date on the end, so that sass knows that it's a format and not a variable name.

147
00:17:56,750 --> 00:18:04,180
Okay. So before and after, that's what it will look like.

148
00:18:12,170 --> 00:18:16,250
Question. If I want to do math on that variables center.

149
00:18:17,210 --> 00:18:24,560
Could I do it after it's been for many? Is it still a number?

150
00:18:29,440 --> 00:18:36,060
It is in fact still a number. Yeah. It seems weird to do math on states with.

151
00:18:36,310 --> 00:18:40,150
I'm not sure what Michigan plus Illinois may mean, but uh.

152
00:18:41,310 --> 00:18:47,400
Actually, I do know what that means. It would mean. Michigan plus Illinois would equal Indiana in this case.

153
00:18:48,240 --> 00:18:52,590
Right. But obviously, that's not useful.

154
00:18:52,830 --> 00:19:00,600
But you could do that math even if the format is applied because it stores is still storing the data as that numeric variable.

155
00:19:01,730 --> 00:19:06,750
A format is just. A display for the values of that data.

156
00:19:08,090 --> 00:19:14,680
That's all. Okay. Right.

157
00:19:16,070 --> 00:19:20,690
You can also apply formats and a procedure with with the same type of format statement.

158
00:19:21,530 --> 00:19:26,270
The difference here, though, is that it's only going to work on that one particular procedure,

159
00:19:26,810 --> 00:19:30,140
not permanently, like if you applied it in the data step.

160
00:19:30,530 --> 00:19:33,860
So if you apply it in the data step, it's always going to be attached to that variable.

161
00:19:34,760 --> 00:19:41,300
But if you apply it in a procedure, it's only going to be attached to that variable for that one procedure.

162
00:19:42,610 --> 00:19:48,620
Okay. Couple of things to know about format names.

163
00:19:48,860 --> 00:19:55,830
They can't end with a number. They can be the same as the variable names if you want them to, but they don't have to be.

164
00:19:58,590 --> 00:20:04,470
A format, something like yes no could apply to many variables, so it should have a generic name.

165
00:20:08,520 --> 00:20:16,110
And as I already pointed out in the pract format there is no doubt, but in when you apply it there is a dot at the end.

166
00:20:16,110 --> 00:20:22,590
Right. Another important note about formats.

167
00:20:22,920 --> 00:20:32,790
The same format can be applied to many variables. So if you had something like don't know refused, which you often do in an Ehnes,

168
00:20:33,540 --> 00:20:40,920
you can create a format that let for that and apply that format to multiple variables.

169
00:20:44,450 --> 00:20:49,870
Another important note. Formats are attached to variables.

170
00:20:51,670 --> 00:20:57,610
So to be able to activate user defined formats, you're going to have to point sass to their definitions every time you open SAS.

171
00:20:58,980 --> 00:21:01,230
So that's where that format search comes into play.

172
00:21:02,700 --> 00:21:08,970
If you call your library library and your product formats are saved there, it'll read them in automatically.

173
00:21:09,310 --> 00:21:12,780
But otherwise, if you call it something else, you're going to have to use that option statement.

174
00:21:15,320 --> 00:21:20,270
Okay. You can assign the same folder on your computer for data sets and formats.

175
00:21:20,510 --> 00:21:26,570
So that little name statement there called Scott will work for any data sets that are there.

176
00:21:26,750 --> 00:21:35,360
I can use that as my location, not name for a data set. I can also use it for pointing to the format search here.

177
00:21:38,490 --> 00:21:44,890
It's a good idea to have your format library if you have one in the same folder as your dataset that it applies to.

178
00:21:44,920 --> 00:21:57,640
That's convenient. Now this is one where often people get hung up if there are formats attached to your variables in your data.

179
00:21:59,310 --> 00:22:07,910
And you try to open it. In SAS without those formats being read in, it'll give you an air.

180
00:22:10,960 --> 00:22:14,410
You say there's formats attached, but I don't know what they are, basically.

181
00:22:14,920 --> 00:22:15,760
So I can't open it.

182
00:22:18,000 --> 00:22:25,650
So if you don't happen for some reason you don't have the format library or you can't figure out how to point to that and get them right in,

183
00:22:26,400 --> 00:22:36,580
you can suppress that error with this option. That way, it'll still open up the data even if you don't have the format library.

184
00:22:38,500 --> 00:22:45,210
This happens a lot when when a. A colleague creates some data set and then sends it to you.

185
00:22:45,420 --> 00:22:49,330
Forgets to send you the format library that they created with it. Okay.

186
00:22:49,570 --> 00:22:56,170
You can still open it. As long as you use this option. Some best practices for formats.

187
00:22:57,260 --> 00:23:01,160
Put all your value statements in one format. I think I already mentioned that.

188
00:23:01,880 --> 00:23:08,070
Your product format at the top of your SAS code. And include the code in the format value.

189
00:23:08,850 --> 00:23:17,340
So like this here. So if my value statement was at a one in a zero for new and not new, it's a good idea to put the actual.

190
00:23:19,380 --> 00:23:25,470
The actuals. Value the one in the zero in the label for it.

191
00:23:27,290 --> 00:23:30,680
That way. I know what it was when I'm looking at the data.

192
00:23:32,730 --> 00:23:42,550
Okay. It's going to be very helpful in interpreting your output and troubleshooting your code if you have any troubles.

193
00:23:43,600 --> 00:23:50,180
So that's a good idea. Another thing, it's certainly okay to have multiple format statements.

194
00:23:52,440 --> 00:23:57,780
But it's probably better just to have one when you're applying your your formats in a data step.

195
00:24:01,230 --> 00:24:04,740
So you can see how you can apply more than one in the same format statement.

196
00:24:04,740 --> 00:24:09,270
So just format and then variable name in the format you want to attach.

197
00:24:10,410 --> 00:24:14,630
Variable name for mate you won't attach. Them out.

198
00:24:18,130 --> 00:24:26,500
It's also would be just fine to apply the same format to multiple variables like in that first example.

199
00:24:27,190 --> 00:24:32,110
But it's probably better just to use the second version where you list all the ones.

200
00:24:33,050 --> 00:24:36,560
Followed by the format that you want to attach.

201
00:24:39,530 --> 00:24:42,680
Your first one will work. But obviously it's worth typing and.

202
00:24:45,560 --> 00:24:54,520
Less efficient. Okay. Key takeaways here, you can create your own user defined formats.

203
00:24:56,130 --> 00:25:03,880
They could be temporary or save for later use. Lib name statements used to point to SAS directories.

204
00:25:05,460 --> 00:25:11,700
We saved formats. So use a live name statement to point to formats just like you do for data sets.

205
00:25:13,590 --> 00:25:18,360
After creation formats have to be applied before they're actually going to take effect.

206
00:25:20,060 --> 00:25:24,980
And you can always use no format or option to.

207
00:25:25,980 --> 00:25:31,150
Remove any errors. And are based on not being able to read in formats.

208
00:25:34,220 --> 00:25:43,620
So let's look at some. Some descriptive statistics, so we make sure things are making sense in our data.

209
00:25:45,380 --> 00:25:52,680
We don't want to make this mistake. It's a freak.

210
00:25:53,790 --> 00:26:00,230
Is a really good one to use for categorical data. And this is a basic example here.

211
00:26:00,290 --> 00:26:07,950
So you've got your freak statement. The data equals option tells us what data you want to actually look at.

212
00:26:09,500 --> 00:26:16,799
And then you have a tables statement. Table or tables are pseudonyms.

213
00:26:16,800 --> 00:26:24,860
So you can have these or not, it won't make any difference. And you can list the variables that you want to.

214
00:26:26,170 --> 00:26:30,070
Get your frequency data on. That's a.

215
00:26:32,080 --> 00:26:39,720
Some variable called ran in, some called activity. Of course finish when you run statement like you do for any.

216
00:26:40,640 --> 00:26:45,890
Proc or data step. So what it will give you is these nice tables.

217
00:26:46,070 --> 00:26:51,900
Something like these. So ran his two values, one and two.

218
00:26:53,030 --> 00:26:56,090
That show up 35 and 57 times respectively.

219
00:26:56,570 --> 00:27:01,700
Will give you the percent of each, the cumulative frequency and the cumulative percent.

220
00:27:01,940 --> 00:27:04,820
So these are kind of the default stats a proxy gives you.

221
00:27:07,100 --> 00:27:12,020
Activity has three values one, two and three where these particular percents and frequencies.

222
00:27:16,510 --> 00:27:21,250
Okay. So this, you can see, is going to be very useful for.

223
00:27:23,240 --> 00:27:28,670
For for descriptive statistics, statistics of categorical data.

224
00:27:30,390 --> 00:27:41,460
You can also use proc freak to do cross tabs. So here's a nice two by two table of sex versus smoking.

225
00:27:43,080 --> 00:27:50,550
And you can see to get that, I just have to do a variable times variable.

226
00:27:51,530 --> 00:28:03,020
Never give me the crust in. And again, it gives you a frequency percent, ROE percent and column percent in this case.

227
00:28:03,990 --> 00:28:07,410
Okay. So that's what these four values in each block mean.

228
00:28:08,220 --> 00:28:11,740
So you've got. 20.

229
00:28:11,740 --> 00:28:14,950
People are sex one and smoking value one.

230
00:28:17,350 --> 00:28:22,780
And 21.74% are in that square.

231
00:28:23,740 --> 00:28:27,990
71% are in that row. Right.

232
00:28:28,350 --> 00:28:31,440
So that would be of these 28 in that row.

233
00:28:33,140 --> 00:28:36,170
71% are in this column. Right.

234
00:28:36,560 --> 00:28:42,260
So there's a rogue percent and a column percent. So gives you a lot of nice information here.

235
00:28:44,470 --> 00:28:51,430
Or you can. Calculate from a two by two table, you can calculate things like relative risk and odd ratios.

236
00:28:53,630 --> 00:28:59,870
Like this address. There's one we use most often, which is really just kind of across products for 20 times.

237
00:28:59,870 --> 00:29:03,110
27 over eight times 37.

238
00:29:04,220 --> 00:29:10,220
Give you an odds ratio of 1.8. Yes, sir.

239
00:29:11,060 --> 00:29:18,030
So. What's coming after. Oh, I'm sorry.

240
00:29:18,060 --> 00:29:26,820
That's just a cursor. So when. When there's this copied and pasted in here, the cursor was just sitting and says blinking, you know?

241
00:29:27,450 --> 00:29:33,600
So that's nothing. You should ignore that part. Sorry about that.

242
00:29:38,270 --> 00:29:43,310
Okay. You can certainly also use it for.

243
00:29:44,680 --> 00:29:51,550
Um, well, before I get to that, there's, there's some nice options that you can use with proc freak as well.

244
00:29:52,360 --> 00:30:00,350
And these options are in the table segment. So you can use no RO, no cow, no percent.

245
00:30:00,650 --> 00:30:04,490
So that would suppress those particular values in the table.

246
00:30:05,270 --> 00:30:10,280
You can also use the case square option there to do a chi square test.

247
00:30:11,710 --> 00:30:21,240
Which is really nice. And with that option, we'll give you all this lovely information on that Chi square test.

248
00:30:22,890 --> 00:30:30,510
So in this case, we've got chi squared. It's that first row with a p value of 0.2158.

249
00:30:33,340 --> 00:30:38,560
Indicating that there's probably not really an association between sex and smoking.

250
00:30:40,130 --> 00:30:44,300
Right. And you learned any of that in your bio stats courses yet?

251
00:30:46,170 --> 00:30:49,290
If not, you certainly will. That's that's an important point.

252
00:30:53,270 --> 00:31:00,100
You can certainly also do larger cross tabs as well. So if I have a three category by two category, you can do that in the same exact way.

253
00:31:03,640 --> 00:31:12,360
Right. You can also get Chi Square tests on this if you want. So.

254
00:31:13,610 --> 00:31:18,560
What I'm trying to emphasize here is that you can use this not only for getting descriptive statistics,

255
00:31:19,010 --> 00:31:23,080
but also kind of checking your data to see if things are making sense.

256
00:31:24,470 --> 00:31:31,320
Okay. So in this case we have a cross tab, which is gender by.

257
00:31:32,500 --> 00:31:36,650
C.S. Um.

258
00:31:40,350 --> 00:31:45,390
We wouldn't expect that any males would have a C-section now.

259
00:31:45,420 --> 00:31:53,249
That being said, you know, maybe something is going on we where we have a transgender person or something and that's fine.

260
00:31:53,250 --> 00:31:58,170
But. But it might alert us to that to that issue.

261
00:31:58,680 --> 00:32:04,770
Right. And we should be aware of that. So maybe there's a mistake, but if not, we should at least check on it.

262
00:32:05,550 --> 00:32:11,890
Right. So that makes sense. So this is a good way to check check things.

263
00:32:15,620 --> 00:32:20,110
Key takeaways there. He's prac freq for categorical data.

264
00:32:21,180 --> 00:32:24,360
It's a good way to check out what you've got.

265
00:32:25,470 --> 00:32:29,070
You can create counts and percentage of data within each group.

266
00:32:29,940 --> 00:32:34,820
You can do cross tabs. Can and Chi Square stands.

267
00:32:38,140 --> 00:32:43,240
And it's useful for looking for unexpected values in terms of counts or values.

268
00:32:46,320 --> 00:32:53,510
All right? Yes, sir. Nice work on. Yes.

269
00:32:54,620 --> 00:32:58,810
Yes. I should have actually put the whole code here. I'll fix that later.

270
00:33:00,550 --> 00:33:04,600
Yes. So this these any of these options would be in the table statement.

271
00:33:05,550 --> 00:33:09,570
And you're followed by that forward slash. If you haven't.

272
00:33:10,900 --> 00:33:17,290
He picked up on the pattern yet options that are in.

273
00:33:19,010 --> 00:33:23,630
Like a proc statement like this, proc freq or data.

274
00:33:25,430 --> 00:33:29,780
Step in a data statement, they're just tacked on to the end.

275
00:33:30,590 --> 00:33:38,600
But options that modify other statements that are within those tend to be followed by a forward slash.

276
00:33:40,090 --> 00:33:47,380
So that's modifying the table statement here. So there would be any options that you add would be after a forward slash here at the end.

277
00:33:50,200 --> 00:33:57,470
Okay. We'll see more of that. All right.

278
00:33:58,160 --> 00:34:02,180
Now, what about continuous variables? Well, proc means is a good one for this.

279
00:34:04,250 --> 00:34:12,650
Here's a basic, broad means. So again invoked the procedure with priming statement.

280
00:34:12,740 --> 00:34:16,880
The data equals option points to the data that you want to look at.

281
00:34:20,390 --> 00:34:23,690
In this case. What's going to happen if we run this?

282
00:34:24,920 --> 00:34:30,890
Is this going to give us these default statistics for every variable in the dataset scores?

283
00:34:33,240 --> 00:34:37,440
So this dataset happens to have five variables. Group H score one, score two and date.

284
00:34:38,960 --> 00:34:45,000
You know, give us by default in end. I mean the standard deviation.

285
00:34:45,500 --> 00:34:53,220
I mean in X. So very nice.

286
00:34:53,520 --> 00:35:02,830
Nice information here. Of course you don't have to have it give you all the variables if you only want.

287
00:35:02,840 --> 00:35:08,030
They want statistics on some of your variables or you can list those in a bar statement.

288
00:35:14,240 --> 00:35:20,120
Like this. Okay.

289
00:35:24,610 --> 00:35:30,780
You can also stratify. Your descriptor starts with a class statement.

290
00:35:32,660 --> 00:35:36,050
So by adding this, there's some variable in my data called group.

291
00:35:39,070 --> 00:35:44,620
And it's going to break down those descriptive stats by group.

292
00:35:46,020 --> 00:35:49,770
So we got group one and group two with 23 people in each.

293
00:35:50,670 --> 00:35:54,930
You know, I'll give you the the means and so on. Four for each of those groups.

294
00:35:59,640 --> 00:36:07,790
Okay. These were the default stance.

295
00:36:09,070 --> 00:36:12,940
But Pratt means can give you lots of different descriptive steps.

296
00:36:13,840 --> 00:36:22,020
You just have to tell it which ones you want. And those you can include as keywords in that proc means statement.

297
00:36:24,520 --> 00:36:31,660
So here we're telling it we want and the mean the 10th percentile in the 90th percentile.

298
00:36:34,550 --> 00:36:39,280
So whatever you list there. If you don't list anything, I'll give you a default.

299
00:36:39,370 --> 00:36:46,690
If you list something, that's what's what it's going to give you. Okay.

300
00:36:47,610 --> 00:36:50,760
And there's lots of lots of keywords that you can use here.

301
00:36:51,030 --> 00:36:54,360
So this is a table that's in the SAS Help Index.

302
00:36:54,750 --> 00:37:04,320
If you were to search the SAS help for PROC means you could find this table where you can get things like confidence limits,

303
00:37:04,560 --> 00:37:12,000
number of missing, uh, an inch or quartile range, skewness, all kinds of good stuff.

304
00:37:16,400 --> 00:37:22,220
All right. Makes sense. You just have to list what you want in the in the PROC means statement.

305
00:37:26,730 --> 00:37:32,490
Another interesting trick that you can do is actually save.

306
00:37:33,640 --> 00:37:37,570
The results for your proc means into a dataset.

307
00:37:40,370 --> 00:37:46,640
To do that, you can use an output statement. Within out option, which names the new data set.

308
00:37:47,360 --> 00:37:58,960
So this is going to create a dataset called Mean Scores. Where it includes the means of the variables listed in your VAR statement.

309
00:38:00,580 --> 00:38:04,960
As a single observation. So if I was to open up means scores, it would look something like this.

310
00:38:06,840 --> 00:38:16,560
It's got the frequency age. So another thing you might notice is there was this mean equals option on the end.

311
00:38:17,910 --> 00:38:27,740
This is how I could rename the mean values of age score one and score two if I wanted.

312
00:38:28,230 --> 00:38:32,370
If I leave it blank, it's going to name them the exact same as they show up here.

313
00:38:32,880 --> 00:38:38,600
So this is actually the mean age. This is the mean.

314
00:38:40,130 --> 00:38:46,430
Score one which has a label bassline score and this is the mean for score to.

315
00:38:50,220 --> 00:38:55,710
If I wanted to call them something else, like mean age, I could. I could list that here after the meaning equals.

316
00:38:56,520 --> 00:39:01,330
Yes. Did I want?

317
00:39:08,300 --> 00:39:11,810
Yeah. There's labels attached to those variables. Exactly.

318
00:39:11,840 --> 00:39:15,740
We could see that actually here in this product means there were labels.

319
00:39:15,920 --> 00:39:19,730
If there are labels attached to your shop as a column here in your product means.

320
00:39:21,150 --> 00:39:25,960
Okay. Right.

321
00:39:29,110 --> 00:39:37,110
Any questions about any other questions on that? Krugman's. Right.

322
00:39:38,950 --> 00:39:42,190
Key takeaways. Proc means is very flexible.

323
00:39:42,480 --> 00:39:44,860
You can get all kinds of the basic descriptive stats from it.

324
00:39:46,910 --> 00:39:54,530
You can specify your variables and statistics that you want with a var statement or by using the keywords.

325
00:39:56,200 --> 00:40:00,520
And you can use an output statement to save those means if you if you want to.

326
00:40:04,480 --> 00:40:12,010
There's a couple of more procedures to talk about univariate. This is also a good descriptive stats for four continuous variables.

327
00:40:14,970 --> 00:40:19,770
So here's the basic syntax. Invoke the procedure with proc unit variant.

328
00:40:20,220 --> 00:40:26,400
Tell the data you want to look at. Just like with proc means, you can use a virus statement to list any variables you want to look at.

329
00:40:29,560 --> 00:40:31,540
So it gives you a lot of stuff by default.

330
00:40:32,380 --> 00:40:41,560
So it gives you all these moments like and mean segregation, skewness, variance, courtesies, all that stuff.

331
00:40:42,450 --> 00:40:47,520
It also gives you all this by default. You get your basic stats mean meaning mode.

332
00:40:48,760 --> 00:40:55,180
I got just for location. It's got quintiles, extreme observations.

333
00:40:55,190 --> 00:41:00,170
So it will give you the five lowest and five highest values, that variable.

334
00:41:01,550 --> 00:41:07,750
It also tell you anything about your missing that. Okay.

335
00:41:08,320 --> 00:41:16,390
A lot of stuff by default. You can add plots with fracking a variant.

336
00:41:19,220 --> 00:41:23,000
So here I've included two options plots.

337
00:41:24,000 --> 00:41:29,790
Which will give me the histogram it box plot and a.

338
00:41:29,790 --> 00:41:35,190
Q. Q plus. The normal option will give me this test for normality.

339
00:41:39,050 --> 00:41:49,860
Okay. So this is a good way to visualize what's going on with that variable in the distribution of the variable like univariate.

340
00:41:51,220 --> 00:41:56,500
Has the benefit over PROC means of being able to explore the distribution a little better.

341
00:41:57,610 --> 00:42:01,420
Of course you can get percentiles and things with BRAC means, but this lets you visualize it.

342
00:42:03,400 --> 00:42:14,510
Okay. You can also get the kuku plats and the histograms separately with additional statements.

343
00:42:15,290 --> 00:42:21,630
So here. I'm getting a bigger, nicer version of the Kuku Plat.

344
00:42:23,240 --> 00:42:29,840
By including that statement. I can also get a histogram in the same way with a separate statement.

345
00:42:34,150 --> 00:42:45,100
Here. The normal option in the histogram statement is going to give you the test for normality along with a nice overlaying.

346
00:42:46,370 --> 00:42:54,650
Normal curve on top of the histogram. So that's often convenient if you're trying to determine if your variable is normally distributed.

347
00:43:01,260 --> 00:43:07,170
All right. So the first graphics, those are fun.

348
00:43:08,990 --> 00:43:13,100
Certainly you can also use this product univariate for looking for weird things.

349
00:43:14,260 --> 00:43:18,690
So we've got some outliers here. So there's good way to find those.

350
00:43:23,650 --> 00:43:30,220
What I'm trying to emphasize is you really need to explore your data before you kind of blindly start analyzing it.

351
00:43:30,530 --> 00:43:34,640
Need to know what you've got. You may have to deal with these outliers.

352
00:43:36,100 --> 00:43:40,740
Okay. All right.

353
00:43:41,830 --> 00:43:51,220
So let's move on to SG Plat and SG Plat is a really nice way to make all kinds of different graphs,

354
00:43:52,210 --> 00:43:55,720
including histograms, scatter blocks, box plots and many others.

355
00:43:57,040 --> 00:44:05,560
And it works. It'll it'll look similar to the histogram here in that univariate does, but it's a little more flexible.

356
00:44:07,670 --> 00:44:13,790
You can do more with it. So here's a syntax for a histogram.

357
00:44:14,060 --> 00:44:21,710
You invoke the plot procedure to limit the data and just use a histogram statement where you call it the variable you're interested in.

358
00:44:21,860 --> 00:44:25,430
In this case, score. I'll give you a nice histogram of that.

359
00:44:27,660 --> 00:44:31,740
But this is, like I said, this is quite flexible. There's lots of fancy things you can do.

360
00:44:32,790 --> 00:44:40,800
In this case, I'm actually creating two separate histograms that are overlaid on top of in the same graph.

361
00:44:41,810 --> 00:44:47,120
Where I'm making the second one. Half transparent.

362
00:44:51,100 --> 00:44:55,360
This kind of allows you to compare the two distributions on the same graph.

363
00:44:58,090 --> 00:45:05,130
It makes sense. So you can do things like this and many other fancy things that you can explore.

364
00:45:07,850 --> 00:45:10,790
Can you box plots with the V box statement?

365
00:45:13,350 --> 00:45:18,930
That's a vertical vertical box platform and v-bucks, if you want horizontal back splats, you can use box instead.

366
00:45:21,750 --> 00:45:28,140
Really. You just need that statement with the category option, which will separate this out by group.

367
00:45:28,920 --> 00:45:32,040
Without that, I'll give you just one big box plot for.

368
00:45:33,540 --> 00:45:38,870
For the variable score. You can also add titles.

369
00:45:41,220 --> 00:45:44,730
So if you had a title statement, give it a title.

370
00:45:45,070 --> 00:45:52,250
It'll show up at the top of your graph. Okay.

371
00:45:52,760 --> 00:45:56,390
With enough options you can get. These grafts look really nice.

372
00:45:58,780 --> 00:46:08,170
Here's a scatterplot. So you can use a scatter statement for that where you tell it the X variable.

373
00:46:10,140 --> 00:46:16,270
In the wide variable. Without any options.

374
00:46:16,270 --> 00:46:20,380
I don't just give you a nice scatterplot of X versus Y.

375
00:46:22,390 --> 00:46:29,800
Here. I group them by the group, a group variable. So it's going to give a different color for each value of group.

376
00:46:32,930 --> 00:46:36,680
So the blue dots here, the key at the bottom.

377
00:46:36,950 --> 00:46:40,610
The blue dots are group one. The red dots are group two.

378
00:46:46,360 --> 00:46:52,710
Okay. You can make regression lines.

379
00:46:53,730 --> 00:46:58,830
These are fun. And you do that with a rig statement.

380
00:47:00,930 --> 00:47:08,620
Where again you tell the variable in the way variable. Now there is an interesting.

381
00:47:12,770 --> 00:47:17,190
I guess you could call it error here. And an unexpected error.

382
00:47:18,450 --> 00:47:21,750
So the scatter statement is still there.

383
00:47:22,590 --> 00:47:26,160
So that will make the scatterplot just the same as we saw here.

384
00:47:26,190 --> 00:47:33,720
Right. That's grouped by group. And then the rig statement will overlay the same thing.

385
00:47:35,510 --> 00:47:38,940
On top of it. With a regression line.

386
00:47:40,180 --> 00:47:43,610
So the rig statement or the rig? Yeah.

387
00:47:43,610 --> 00:47:47,750
The big statement here will make the scatterplot also.

388
00:47:48,890 --> 00:47:57,230
So you didn't really need that scatter there. It's kind of putting the same dots on the same place, which is why you can't see the red ones anymore.

389
00:48:00,500 --> 00:48:03,800
Okay. Because it actually just put blue dots on top of the red ones.

390
00:48:04,700 --> 00:48:08,030
And so that's why you see now it's just the balloons.

391
00:48:09,530 --> 00:48:15,890
The CLM option in that rig statement is what's creating this confidence band here.

392
00:48:17,000 --> 00:48:21,040
Along the line. So that's nice to.

393
00:48:24,260 --> 00:48:28,250
You could use that group option in the regs statement.

394
00:48:29,870 --> 00:48:34,940
But that will actually give you two different lines regression lines, one for the group, one and one for group two.

395
00:48:37,010 --> 00:48:42,620
If you wanted the red dots to still show up in just one regression line, you could do it like this.

396
00:48:42,950 --> 00:48:51,340
But you'd have to suppress suppress the plotting the plotting of those dots in the red statement.

397
00:48:51,530 --> 00:48:57,370
So there's an option there you could use to suppress that. So if that's what you want, you can do that.

398
00:49:03,470 --> 00:49:11,720
Any questions about this is a lot of a lot of good stuff. You got rock freak rock means which you'll use all the time for descriptive stats.

399
00:49:12,560 --> 00:49:15,590
And we got univariate for looking at distributions.

400
00:49:15,830 --> 00:49:23,150
Making some plots and SD plots is really flexible for making really nice graphs of all all varieties.

401
00:49:28,940 --> 00:49:33,260
There is. I guess there's one more as g scattered.

402
00:49:36,500 --> 00:49:44,540
This one. Is mostly used for exploring kind of cool linearity between variables.

403
00:49:45,870 --> 00:49:49,070
So it's just going to create a matrix of scatter plots, essentially.

404
00:49:50,830 --> 00:49:53,200
For all the variables you list in the Matrix statement.

405
00:49:55,490 --> 00:50:00,170
Your group bisect so that you get different dots, different colored dots for males and females.

406
00:50:01,010 --> 00:50:04,790
And we tell it, we want histograms on the diagonal of that matrix.

407
00:50:05,480 --> 00:50:08,960
So we'll have a just we'll have a histogram of height here.

408
00:50:10,190 --> 00:50:13,200
And then this is height by weight and. And so on.

409
00:50:13,650 --> 00:50:19,350
So it gives you a nice matrix to see what the relationship between your variables are.

410
00:50:25,420 --> 00:50:35,890
Quick note about ASG plat. When you run a cheap plot, it actually saves that plot automatically, which most procedures and SAS do not.

411
00:50:36,580 --> 00:50:40,510
And it will save something with a very generic name in your.

412
00:50:41,800 --> 00:50:45,690
Um, your user directory here.

413
00:50:46,530 --> 00:50:51,270
You're working directory. So don't be alarmed if you see some.

414
00:50:52,770 --> 00:50:58,230
Some files show up in your working directory. It's called like a SG plat one or something like that.

415
00:50:59,690 --> 00:51:02,990
It's just automatically says that there you can delete it if you want.

416
00:51:03,990 --> 00:51:08,430
It's no big deal. All right.

417
00:51:11,170 --> 00:51:16,140
S g plot is very useful. You may have any questions.

418
00:51:23,770 --> 00:51:28,810
All right. Good luck on your lap today. You'll be exploring all of these procedures.

