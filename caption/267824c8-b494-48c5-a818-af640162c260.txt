1
00:00:13,150 --> 00:00:41,940
It's just. All right.

2
00:00:41,940 --> 00:00:49,150
I guess we'll start looking into this fairly short term as it were finished.

3
00:00:49,170 --> 00:01:02,860
Most of the stuff, most of the topics in the course Gensler mentioned Astellas and RCP.

4
00:01:03,810 --> 00:01:09,090
And then I guess I had a few things about object oriented programing and C++.

5
00:01:09,090 --> 00:01:12,419
I mean, we don't really have time to kind of practice it,

6
00:01:12,420 --> 00:01:21,659
but I do think that would like might be the next topic to discuss if we had a longer course, but we don't have a lot of time.

7
00:01:21,660 --> 00:01:29,250
So we'll just kind of mention the rough, rough idea and how to get how to get started with object oriented programing.

8
00:01:29,930 --> 00:01:39,520
Okay. So I guess that's basically today we're coming in second online quiz and then next week is the final assignment.

9
00:01:39,540 --> 00:01:46,080
So basically, isn't it for this for this module?

10
00:01:47,520 --> 00:02:03,340
So I just want to mention a few things about using still guess I still data structures or containers in our CPE, you can basically use them.

11
00:02:05,110 --> 00:02:11,849
It's basically you can just use them directly in our CPE.

12
00:02:11,850 --> 00:02:21,000
I just wanted to show an example of what it looks like in like it returns to our if you use a steel container,

13
00:02:21,690 --> 00:02:36,419
I think I mean if you're writing RCP code yourself, I mean I think it's generally useful to use the numeric vector in numeric matrix type.

14
00:02:36,420 --> 00:02:47,160
I think it's efficient and it's kind of easy to it kind of matches the type of objects that you pass it for more.

15
00:02:48,870 --> 00:02:55,110
However, I think there's some case, you know, there's many cases where you might want to use a steel container.

16
00:02:55,400 --> 00:03:04,700
And I think the two probably the two main reasons would be if you're using like a C++ code that's already written.

17
00:03:04,710 --> 00:03:08,810
Like if you have, if you have, you know,

18
00:03:08,910 --> 00:03:14,879
a complicated set of functions that have already been written in C++ and you just want to kind of use

19
00:03:14,880 --> 00:03:21,360
them directly when you're interacting with R so you can just kind of copy and paste those functions.

20
00:03:21,360 --> 00:03:30,060
So that's probably one one example where you really want to use steel containers.

21
00:03:30,450 --> 00:03:40,430
The other is in some cases using the steel containers is it's makes the implementation easier in some cases.

22
00:03:40,440 --> 00:03:50,519
I think math is probably a good example. I don't think there's a things I mean, you can do the same thing in RCP, a similar thing,

23
00:03:50,520 --> 00:04:02,219
but there's not really an exact equivalent of a map in R the map data structure.

24
00:04:02,220 --> 00:04:07,890
So for certain types of things that might be a piece is easier.

25
00:04:07,890 --> 00:04:13,470
So in those cases, you might want to use like a steel library if you want to use maps.

26
00:04:14,700 --> 00:04:23,260
Okay. So you can use. Yeah.

27
00:04:23,370 --> 00:04:37,179
So this is a small example of how you would do it and ask people if you have a steel factor vector as an argument.

28
00:04:37,180 --> 00:04:44,409
So the first argument here is an steel factor and then the return type is also a steel factor.

29
00:04:44,410 --> 00:04:53,890
So here all it's doing is just takes an input as a factor and then a number like a double.

30
00:04:54,360 --> 00:05:04,480
And it just adds that factor to the end of the sorry as a number to the to the end of the vector and then returns that.

31
00:05:05,260 --> 00:05:12,550
So the way it kind of looks are if you give it to vector 1 to 3 up to ten and then the number 23.

32
00:05:13,680 --> 00:05:19,959
Oh yeah. Just adds the number 23 at the end of this thing here,

33
00:05:19,960 --> 00:05:33,040
if we have this vector here and then a number should work pretty much automatically if you use the vector type in RCP function.

34
00:05:34,540 --> 00:05:44,169
All right. So here's an example. I thought it's just so it's actually the example we talked about before when we were talking about maps.

35
00:05:44,170 --> 00:05:51,580
So this is the word counterexample, I think using a map or this, it just makes it easier.

36
00:05:52,030 --> 00:05:56,740
I mean, you can do it with other data types, but I think it's a little bit easier with the map.

37
00:05:58,570 --> 00:06:07,180
So here's an example where we're returning a map from an RCP function and then the input is also let's see.

38
00:06:08,910 --> 00:06:15,420
I think I had two different examples. So I had one with the character vector.

39
00:06:18,070 --> 00:06:21,170
No. Uh, okay.

40
00:06:21,180 --> 00:06:26,610
Yeah, I just. I just use the character vector. So the character vector as the input.

41
00:06:27,120 --> 00:06:32,910
So a character vector, I don't know if we talked much about it, but that's like a specific RCP.

42
00:06:34,400 --> 00:06:38,990
It's basically the same sentence similar to a numeric vector.

43
00:06:39,180 --> 00:06:42,240
The components are characters instead of numbers.

44
00:06:42,930 --> 00:06:45,760
So that character vector is like an RCP type.

45
00:06:46,770 --> 00:06:59,429
And so here the return value is going to be a map where the keys of the map are string types of t string, and then the values are integers.

46
00:06:59,430 --> 00:07:06,810
So this strings are like words. Each word is a key in the map, and then the values are integers and those.

47
00:07:06,820 --> 00:07:14,520
That's basically how many times that word appeared in the in the text document.

48
00:07:15,090 --> 00:07:23,760
So that's basically all this function does. It just counts the number of appearances of each word and returns that as a map.

49
00:07:24,540 --> 00:07:29,939
So this function here. So let's see, what does it do?

50
00:07:29,940 --> 00:07:38,519
So it takes in a character vector V and then functions and as the size of V and that's

51
00:07:38,520 --> 00:07:47,160
basically the number of words that are in the character vector and then map the define.

52
00:07:47,280 --> 00:07:57,220
So this is just declaring the map. It's called word underscore S.A. And then to do to kind of fill in this map, all you have to do is loop.

53
00:07:59,770 --> 00:08:07,379
Let's see. Well, first you have to declare the string called S inside the loop.

54
00:08:07,380 --> 00:08:15,030
That's basically. You're converting the highest element of V into a string type.

55
00:08:15,720 --> 00:08:20,300
And then you do this word underscore C.

56
00:08:20,340 --> 00:08:27,810
S plus plus. Remember, that just increases the value, the value associated the word s by one.

57
00:08:28,260 --> 00:08:28,590
Okay?

58
00:08:30,170 --> 00:08:41,370
In that part of the word that's going to give account for each word, and then we just return word count so that you basically return a math type.

59
00:08:45,310 --> 00:08:50,940
Designed as a century. So has the same function we had before.

60
00:08:51,870 --> 00:09:03,660
The way this works and ah, if you were to run this and ah, so there's this function, you can use a scan if you have a text document.

61
00:09:04,340 --> 00:09:11,999
Um, basically if you scan each and the variable you assign it to,

62
00:09:12,000 --> 00:09:17,340
it's like it's just a character vector and each component of the character vector is a word.

63
00:09:17,350 --> 00:09:27,540
So like if you look at this vector sonnet words, the first element is this second element is, is, is and so forth, so forth.

64
00:09:27,540 --> 00:09:33,060
Since it is a big, big, long vector, each component is a word.

65
00:09:33,480 --> 00:09:35,520
So that's the input that you would use.

66
00:09:36,360 --> 00:09:45,300
And so the word counter functions of the word counter function and the input is this character vector sonnet words.

67
00:09:45,900 --> 00:09:55,560
And so since ah doesn't really have a map, it's just tired from other more complicated.

68
00:09:59,660 --> 00:10:09,320
Types but for if you have a value. Is is is a string the way it returns it is as a as a named vector.

69
00:10:11,420 --> 00:10:15,590
Basically like an R vectors can be names.

70
00:10:15,590 --> 00:10:20,840
That just means you have a name for each element of the vector. So that's the way it's the way R returns it.

71
00:10:21,630 --> 00:10:26,420
Even though it's not a it's not exactly a map.

72
00:10:27,170 --> 00:10:33,979
But that's that's kind of the closest, I guess, some version of a mapping, which is a named a vector.

73
00:10:33,980 --> 00:10:42,610
Each component of the vector has a name. So it's probably a pretty I remember the exact length.

74
00:10:42,610 --> 00:11:00,800
It's a pretty long vector subject and the elements of word map of where where it's greater than 2000s.

75
00:11:01,070 --> 00:11:04,309
So the elements of the word map are numbers, those are the counts.

76
00:11:04,310 --> 00:11:08,600
And then like the names, the associated names are like the words in the document.

77
00:11:09,320 --> 00:11:17,120
And so this is this is like you India accounts for each each of these words, at least for the words that appear 2000 or more times.

78
00:11:17,750 --> 00:11:24,770
Okay. So it's kind of interesting. And then, uh, show an example.

79
00:11:24,770 --> 00:11:29,569
If you sort it by the frequency, you can get something like this.

80
00:11:29,570 --> 00:11:44,000
Like the most common word is the. So that's think, that's really the only name example I had for using still containers.

81
00:11:45,990 --> 00:11:49,730
Uh, you know, the main point is basically use them.

82
00:11:50,360 --> 00:11:58,930
You can basically just copy and paste them and it should work in most cases and it should work pretty much directly in our CTP.

83
00:12:03,750 --> 00:12:11,010
Okay. This is the only thing to pay attention to, isn't there?

84
00:12:12,910 --> 00:12:18,000
There's not an exact equivalence between the types between ah.

85
00:12:18,000 --> 00:12:25,230
And that steel container. You may have to look, look something obvious to me.

86
00:12:25,890 --> 00:12:30,600
Make sure you are. I don't know it.

87
00:12:30,750 --> 00:12:33,930
Return something sensible. All right.

88
00:12:33,930 --> 00:12:45,870
So this is I think that's basically the main it's actually all the contents, I think, for in terms of what's being quizzed or as on the homework.

89
00:12:46,410 --> 00:12:59,219
So this was the final part was just a little bit about object oriented programing, just maybe a little bit on introduction and how to get started.

90
00:12:59,220 --> 00:13:05,700
So I guess you might compare object oriented programing with procedural programing.

91
00:13:06,330 --> 00:13:11,730
I mean, you're going to you're doing C++, you're going to be doing something mixed.

92
00:13:12,390 --> 00:13:28,740
But I guess it's good to know what kind of the distinction is between these two kind of programing approaches.

93
00:13:29,970 --> 00:13:38,940
So I guess procedural programing is just you break down a programing into kind of running a set of procedures,

94
00:13:38,940 --> 00:13:49,349
basically, you know, writing functions and calling those functions step by step, which you still need to do.

95
00:13:49,350 --> 00:13:54,990
But I guess object oriented programing is really where you the design is.

96
00:13:55,440 --> 00:14:04,769
A lot of it is focused on you have kind of an object in some sense and there are kind

97
00:14:04,770 --> 00:14:13,020
of data elements of objects and procedures that you can do on those type of objects.

98
00:14:13,530 --> 00:14:23,339
So I think really you can think of like steel containers as, as objects, right?

99
00:14:23,340 --> 00:14:28,830
So they're sort of like a vector.

100
00:14:29,130 --> 00:14:33,540
A vector object has to have certain data, has to have a certain structure.

101
00:14:35,820 --> 00:14:40,860
And then there's like automatic procedures that you can use that you can use on vectors.

102
00:14:41,370 --> 00:14:53,549
So you can talk about a lot of them on the size of the vectors and the some the elements of the vector,

103
00:14:53,550 --> 00:15:02,940
you can add the vector or take out elements of the vector using like don't push back and things like that.

104
00:15:04,560 --> 00:15:10,380
So that's, that's kind of a procedure that's part of the vector class, I guess.

105
00:15:10,470 --> 00:15:14,700
So you don't really have to know the details of the implementation of that.

106
00:15:14,700 --> 00:15:17,040
When you're when you're working it with vectors,

107
00:15:18,660 --> 00:15:28,260
you can kind of know that it's a procedure that's made available to all kind of any variable that has a class of vector.

108
00:15:28,270 --> 00:15:40,110
It kind of has a certain structure and there's a certain certain number of procedures that you can kind of use automatically on that vector object.

109
00:15:42,060 --> 00:15:58,560
So I don't know, I guess is the point of this is object oriented is kind of a little bit of a more abstract way of a programing abstract.

110
00:15:58,560 --> 00:16:03,030
I mean, that's the way I've written it is that when you kind of run a lot of things,

111
00:16:03,030 --> 00:16:10,409
you don't necessarily have to know all a lot of the the exact details of how it's implemented, like for steel containers.

112
00:16:10,410 --> 00:16:17,610
I mean, each type of object there, you really don't have to know how it's implemented in order to use it.

113
00:16:19,320 --> 00:16:22,410
You can kind of sum something of a in the string class.

114
00:16:22,410 --> 00:16:30,930
You just have you just have to know that a string is something like a, a word and then there's a bunch of methods that you can use on.

115
00:16:31,200 --> 00:16:39,329
Words are a bunch of methods that you can use on any object of of type string.

116
00:16:39,330 --> 00:16:43,020
You don't really have to know kind of any of the implementation details.

117
00:16:43,830 --> 00:16:48,479
So I think this is just yeah, I mean, even like in Python,

118
00:16:48,480 --> 00:16:55,230
they do have some capabilities of object oriented programing, although I don't think we can really talk about it.

119
00:16:57,930 --> 00:17:01,890
Okay. Yeah.

120
00:17:01,960 --> 00:17:05,820
So I guess an abstraction. It's basically. Yeah.

121
00:17:06,040 --> 00:17:09,680
I don't know if I can plan it better than I did before.

122
00:17:09,700 --> 00:17:16,120
The basically one here is the purpose of object oriented programing.

123
00:17:16,120 --> 00:17:24,639
C++ is you can basically define your own data structures like using steel containers,

124
00:17:24,640 --> 00:17:29,920
example, those are like factors or maps or certain data structures.

125
00:17:30,700 --> 00:17:43,990
Object oriented programing kind of allows you to allows you to write your own data structures and then you can kind of use them in an abstract way,

126
00:17:45,010 --> 00:17:51,610
meaning that like once it's defined, you don't really have, you don't really care about the implementation details.

127
00:17:52,180 --> 00:17:59,320
You can kind of license methods to any object in of that data structure class.

128
00:17:59,890 --> 00:18:07,780
So it's kind of the kind of the idea is that I don't know if this example helps,

129
00:18:07,780 --> 00:18:16,000
but like there's a car, like, so when you consider like, for example, a, a variable or string type,

130
00:18:16,060 --> 00:18:17,530
if you just consider that a string,

131
00:18:17,530 --> 00:18:25,750
but there's actually kind of a bunch of which are kind of a bunch of components in a string, an element of string class.

132
00:18:26,150 --> 00:18:33,250
And there's a bunch of different methods and you can use for strings, but you don't really have to think about it in that way.

133
00:18:33,250 --> 00:18:37,000
You can kind of think of a string variable as just a string.

134
00:18:38,350 --> 00:18:41,080
So that was kind of the idea of this example.

135
00:18:41,710 --> 00:18:48,280
There's kind of a bunch of components in a car, but in many cases it's just easier to think of a car as a single object.

136
00:18:49,810 --> 00:18:55,780
Okay, so let's see. Yeah.

137
00:18:55,960 --> 00:19:08,450
I think the point of this is there's basically a sort of, you know, object oriented programing in C++.

138
00:19:08,450 --> 00:19:20,179
You think about classes. So like, uh, the, the vector still is a vector, but still vector is a class.

139
00:19:20,180 --> 00:19:26,350
So each like each variable that, each vector variable that you define, you can, you could,

140
00:19:26,930 --> 00:19:32,540
you can think of it as it's an object of type str vector and there's kind of a,

141
00:19:32,880 --> 00:19:42,500
a bunch of methods that you can use on object of class still vector and you don't really have to know the exact details of how it's implemented,

142
00:19:42,500 --> 00:19:44,210
although you should know kind of what it does.

143
00:19:45,530 --> 00:19:52,820
You should know the results of applying those methods, but you don't really have to know the details of how it's implemented.

144
00:19:53,690 --> 00:20:06,229
Okay, so let's see. So yeah, steel is basically kind of an object oriented programing.

145
00:20:06,230 --> 00:20:14,050
And I guess the way I would think of it, it's, it's just like, you know,

146
00:20:14,230 --> 00:20:19,990
I steal objects that are kind of a bunch of methods that you can apply on those objects.

147
00:20:21,100 --> 00:20:26,499
Right? Like with the vector, you can extract the size, you add elements,

148
00:20:26,500 --> 00:20:32,139
you can add elements to it, you can take the sum and kind of do all those things directly.

149
00:20:32,140 --> 00:20:40,360
You know, you can't really do those things with the like, the fundamental data types, like an integer or a float and things like that.

150
00:20:40,880 --> 00:20:43,960
That was the point, point of this slide.

151
00:20:44,710 --> 00:20:52,270
So yeah, the classes are really what allows you to do object oriented programing.

152
00:20:52,630 --> 00:20:57,730
I mean, I would think I mean, at least I think of classes as basically a tool.

153
00:20:58,270 --> 00:21:03,400
It's really just a tool to allow you to define your own type of data structure.

154
00:21:03,970 --> 00:21:11,280
So just like a steel vector is a type of data structure that's very useful or nice steel map.

155
00:21:11,920 --> 00:21:12,910
It's very useful.

156
00:21:13,780 --> 00:21:27,850
And in some cases, you want to be able to define your own data structure that that kind of operates in a similar way to a string or, or a vector.

157
00:21:28,120 --> 00:21:31,630
So classes are what allowed you allows you to do that.

158
00:21:32,140 --> 00:21:40,480
So I think I mean, what the way I'm using a data structure is just basically an object that stores kind of a certain type of data.

159
00:21:40,870 --> 00:21:46,080
And then there's a lot of methods for performing operations on that data.

160
00:21:46,090 --> 00:21:49,370
So for example, like here, like a vector,

161
00:21:49,390 --> 00:21:56,680
the vector class that's still a vector class store is a certain type of data or at least data in a certain format.

162
00:21:56,690 --> 00:22:04,930
It's you have a collection of elements that are ordered and then there's a lot of methods for working with that.

163
00:22:04,960 --> 00:22:10,330
So that size. So these would be methods for a vector class.

164
00:22:10,810 --> 00:22:16,600
That size extracts the size of the vector. That push back kind of gives you extra.

165
00:22:19,170 --> 00:22:23,670
As an extra element to the vector. So that's that's basically what I mean by that.

166
00:22:23,880 --> 00:22:28,980
These are like methods for the astral vector class size to push back.

167
00:22:30,450 --> 00:22:32,640
All right, so let's see.

168
00:22:32,670 --> 00:22:42,899
So basically, the basically the two main things when you're writing classes are that you want to think about or basically the the data attributes,

169
00:22:42,900 --> 00:22:51,330
like what type of data is it going to store? So these are also often called like the number of variables or attributes and then

170
00:22:51,330 --> 00:22:57,480
like the methods that you're going to make available for members of that class.

171
00:22:57,490 --> 00:22:59,910
So these are often called number functions.

172
00:22:59,910 --> 00:23:09,570
So what are the useful kind of methods that you can apply to these type of data attributes, which is really the two,

173
00:23:10,080 --> 00:23:20,400
two main types of things you would want to think about when you're kind of building your own classes in C++.

174
00:23:20,430 --> 00:23:35,160
So I just did one kind of small example just to hopefully introduce the the idea of the classes if you want to learn more about it in the future.

175
00:23:35,640 --> 00:23:43,469
So this is just a class that I call a point. So basically the idea or the reasoning for this class,

176
00:23:43,470 --> 00:23:50,280
it's basically supposed to represent a point and two dimensions and the type of data it's supposed to store.

177
00:23:50,760 --> 00:24:01,919
So there's like an X coordinate in a wide format. So the way you define like the way you define it is you say the keyword class,

178
00:24:01,920 --> 00:24:06,690
and then I'm going to say the the name of the class is point with the capital P.

179
00:24:07,410 --> 00:24:11,880
And so it's going to be that type of data. It's going to type stories like a.

180
00:24:16,690 --> 00:24:23,110
Integer X and Y coordinates. So that's these these are these are called member variables X and Y.

181
00:24:23,800 --> 00:24:32,560
And then another thing I wanted to have was like a, I guess the only method I wanted to have is a distance function.

182
00:24:33,560 --> 00:24:41,950
So those are often called member functions. So distance zero is basically the distance between this point and zero.

183
00:24:42,460 --> 00:24:51,610
Okay? So it's like the square root of x squared plus y squares, the distance of that point from zero, that's basically all this class does.

184
00:24:51,610 --> 00:24:59,830
It stores a point into dimension and the method that you can use on that is the distance from zero.

185
00:25:00,730 --> 00:25:08,820
Okay. So in this example, if you like, you can actually so once you define the class point,

186
00:25:08,830 --> 00:25:14,230
you can you can also you can then declare variables that have type point.

187
00:25:14,800 --> 00:25:18,760
So you can you can declare variables that have type point.

188
00:25:19,270 --> 00:25:22,120
So if you declare a variable that has type point,

189
00:25:22,660 --> 00:25:31,360
you can think of it as just say as a single variable with with class point and then that variable, what does that mean?

190
00:25:32,590 --> 00:25:36,490
What do you know about that variable? Well, it stores it a certain type of data.

191
00:25:37,060 --> 00:25:44,170
And then we also have you can use a method to get information about that type of data.

192
00:25:44,170 --> 00:25:50,590
It's kind of the way to think the way. Just think about it. All right.

193
00:25:56,960 --> 00:26:06,300
I want to see him. Okay. You know, I don't know if it's that important to know about public versus private right now.

194
00:26:11,370 --> 00:26:16,610
I guess it's related to how you can change certain member variables, basically.

195
00:26:18,410 --> 00:26:22,780
But again, I think we need to and this is just an overview.

196
00:26:23,720 --> 00:26:27,410
So we're going to discuss public members of the class.

197
00:26:27,890 --> 00:26:35,900
Public member variables is the only other thing that's probably useful to know when you get started is what's called constructors.

198
00:26:35,900 --> 00:26:45,200
That's really just a that's like the syntax of how to how to declare a variable of that type of that class, basically.

199
00:26:45,800 --> 00:26:52,130
So there's like, you know, just as you have a certain syntax for declaring an object of class a vector,

200
00:26:52,610 --> 00:26:59,599
you also have to give kind of the syntax for how to declare a variable type point.

201
00:26:59,600 --> 00:27:04,280
For example, if you're using a point class you define before.

202
00:27:06,770 --> 00:27:18,589
So you have to kind of specify the syntax of how to declare a variable of type point, since it has to be like a deep detail.

203
00:27:18,590 --> 00:27:22,790
If we really got into detail about classes how to do pointer.

204
00:27:22,790 --> 00:27:30,320
So this is yeah, this is just make sure we know the syntax.

205
00:27:31,520 --> 00:27:43,729
So you have a syntax I like to use to declare a class is just use the class keyword and then basically the name of the class

206
00:27:43,730 --> 00:27:52,550
that you want and then you put like all of the stuff that's necessary for the class definition inside of the curly braces.

207
00:27:54,200 --> 00:27:59,540
So basically the main thing you have to define our member variables and member functions.

208
00:28:03,470 --> 00:28:10,100
Okay. So in this example, we have number variables X and Y and a number function called distance zero.

209
00:28:11,890 --> 00:28:15,840
Okay. So this office cut it off. They're just supposed to be a closing.

210
00:28:15,850 --> 00:28:21,990
Currently, prices at the bottom. Here is one more find we talked about before.

211
00:28:22,000 --> 00:28:26,150
So this is declaring a class named point.

212
00:28:27,490 --> 00:28:34,300
Kind of the member variables are X and Y and then the main member function is distant zero.

213
00:28:35,020 --> 00:28:40,599
And then I added this. So this is needed, this would be the constructor.

214
00:28:40,600 --> 00:28:49,659
So this is basically telling you the syntax of how to declare an object of class point.

215
00:28:49,660 --> 00:28:55,930
So in the way you do it is just point A and B, a common P.

216
00:28:55,930 --> 00:29:06,220
So if you want to declare a variable type point, you have to have to use kind of the syntax.

217
00:29:07,330 --> 00:29:12,370
That's basically what a constructor does. So yeah, it just means you have to do.

218
00:29:13,070 --> 00:29:17,320
Yeah, I guess it's not exactly this, but it's point.

219
00:29:17,830 --> 00:29:27,560
You have to have the keyword point then kind of the name of the the variable you want and then kind of a number here and a number here.

220
00:29:28,150 --> 00:29:32,000
Both both of the numbers that you give it have to be double. Okay.

221
00:29:32,140 --> 00:29:38,890
So here's an example. So here's just the formal C++ program.

222
00:29:39,340 --> 00:29:41,590
We already talked about the class part.

223
00:29:42,280 --> 00:29:50,140
And here is just well, we're basically just declaring a variable of type point and printing out kind of the elements.

224
00:29:51,040 --> 00:29:59,200
Well, actually, we're not printing out the elements were printing out the value that's returned by the the distance function,

225
00:30:00,010 --> 00:30:04,540
I guess the distance method. So here this is kind of the key part of it.

226
00:30:05,320 --> 00:30:14,709
If we declare a variable of class point, you just do point and I say p t you comma v so this when we run this,

227
00:30:14,710 --> 00:30:21,880
this is just saying that p t is a variable type point. And then after that we're just saying we're printing out, you know,

228
00:30:21,940 --> 00:30:28,479
the distance from zero is and if you didn't point that distance zero open close parentheses,

229
00:30:28,480 --> 00:30:33,610
that just means you're applying the distance method to point out.

230
00:30:34,810 --> 00:30:41,950
So it's basically just going to return x squared square root of x squared plus y squared

231
00:30:42,550 --> 00:30:50,140
or in this case the x and y components of t are unseen you in v variables here.

232
00:30:53,350 --> 00:31:02,829
So you can see that here if we just run it, basically enter in the values to and then 0.4 and then it prints out the distance from zero.

233
00:31:02,830 --> 00:31:15,450
So. So applying the distance zero method to point kind of does that calculation.

234
00:31:16,290 --> 00:31:24,630
Okay. Yeah. So we've I mean, you know, our works.

235
00:31:29,400 --> 00:31:36,750
I mean, we've definitely seen some examples of this, although we didn't really talk about classes explicitly.

236
00:31:36,750 --> 00:31:43,549
But when you do all of these kind of a lot of these methods like vectors, if you do a dot size, for example,

237
00:31:43,550 --> 00:31:50,850
what you really doing is applying the size method to to of a member of the other vector class.

238
00:31:50,920 --> 00:31:53,960
That's kind of where this syntax comes from.

239
00:31:53,970 --> 00:32:01,770
So if you want to apply a member function to an element of a certain class,

240
00:32:01,770 --> 00:32:09,380
you just use the the name of the variable and then you do that kind of the member function name, open and close parentheses.

241
00:32:09,390 --> 00:32:13,170
So that's, that's how you use methods for certain objects.

242
00:32:14,700 --> 00:32:19,620
That's how you apply methods to, to an object of a certain class.

243
00:32:19,620 --> 00:32:27,830
And then here, if you want to access certain member variables, you just use kind of this syntax without the open closed parentheses.

244
00:32:28,470 --> 00:32:35,880
Right. So if you want to access the X component of our variable p t is 2.18 x.

245
00:32:36,480 --> 00:32:39,920
If you want to access the Y variable, you just do that.

246
00:32:39,990 --> 00:32:46,740
What if you want? And you said before, if you want to use the distance method, you just do distance zero.

247
00:32:47,190 --> 00:32:51,000
Open closed parentheses. Okay. So this is.

248
00:32:53,220 --> 00:32:55,110
You know, this is just an example of running it.

249
00:32:56,380 --> 00:33:08,220
You know, if you define it as 3.0, having elements 3.0, 4.0 petty dynamics and petty, that why I can access that information.

250
00:33:08,970 --> 00:33:21,870
So let's see. Oh, I don't need a series of extra detail if you want to use a pointer or she won't.

251
00:33:21,960 --> 00:33:39,480
If you want to access member variables or member functions of a or using a pointer to a class, you use this kind of arrow type of thing.

252
00:33:40,540 --> 00:33:48,959
Is this the way you do that? I think we think we ought to show an example before for the map in one of the earlier

253
00:33:48,960 --> 00:33:59,910
lectures where you were and you're trying to access components of a map through the pointer.

254
00:33:59,910 --> 00:34:09,480
So here in this case, we have a and this this function, we have a pointer to a pointer to a variable of class point.

255
00:34:09,900 --> 00:34:18,300
If you want to like print out the X component and the Y component, you just do this annual P at P error line.

256
00:34:18,900 --> 00:34:28,040
And if you want to extract kind of the value after applying the distance zero method, you do this arrow to distance zero.

257
00:34:28,080 --> 00:34:39,870
That's kind of the way you access elements or or number functions from a pointer to a class.

258
00:34:39,880 --> 00:34:43,320
So I guess this thing, that's basically all I want to say.

259
00:34:44,400 --> 00:34:49,190
Yeah. Like if you print this out, it should print out the same things here.

260
00:34:49,200 --> 00:34:54,809
We did. We did pass.

261
00:34:54,810 --> 00:35:09,900
Well, this is actually pass by reference in the first case when we're calling Foo and then the second case where did well

262
00:35:09,930 --> 00:35:16,860
is it is kind of pass by reference but we're using the we're using the pointer as as the argument in the function.

263
00:35:17,390 --> 00:35:29,700
And so you can see here only this P error, X and P like kind of works out the same thing as P detects or p dot Y from the original variable.

264
00:35:30,970 --> 00:35:38,390
No. I think that's I mean, I think that's all I wanted to say.

265
00:35:38,420 --> 00:35:45,980
I mean, we didn't really have time to really get into our religious practice using classes and learning things.

266
00:35:46,010 --> 00:35:50,380
I just thought I'd just give kind of a brief overview.

267
00:35:50,660 --> 00:35:58,890
If you wanted to start. Doing this in the future, you have to have a little bit of a head start.

268
00:36:08,960 --> 00:36:15,330
Really. That's for basically for the club. I mean, I don't there's any we have extra time.

269
00:36:15,330 --> 00:36:19,310
I don't know if there's any questions about the homework or the.

270
00:36:19,730 --> 00:36:23,820
Yes. So my coworker wanting to work on it, too.

271
00:36:23,850 --> 00:36:29,550
You had like test cases that had you had like test cases that had the example results.

272
00:36:29,610 --> 00:36:33,240
Is it possible to put some in for homework and final assignment?

273
00:36:35,490 --> 00:36:40,920
Possibly, because I think sometimes.

274
00:36:43,410 --> 00:36:48,820
Just check. So I think there's some in some of the examples, there's some randomness.

275
00:36:48,840 --> 00:36:52,590
You get test cases, but you don't get outputs like.

276
00:36:53,040 --> 00:36:58,740
So let me I'm just trying to see if there's a sensible answer.

277
00:37:02,790 --> 00:37:10,380
Okay, let's see. I can add so we I cannot tell you any examples.

278
00:37:13,810 --> 00:37:30,570
I think in in question three at least give the idea of a single update like if you ran it once, you should give it it.

279
00:37:32,580 --> 00:37:47,920
Oh there's yeah, there's one example. So three the other examples would be two since I can add one or two example.

280
00:37:47,950 --> 00:37:51,760
Yeah, I can do that. Maybe not everything.

281
00:37:51,840 --> 00:37:54,960
So let's see. In this one, the only.

282
00:38:10,130 --> 00:38:16,750
I'm going to give examples for all. I can add one, or at least for one or two cases and use examples.

283
00:38:18,650 --> 00:38:23,620
This needs an exam and you can.

284
00:38:25,910 --> 00:38:38,270
The only things to be careful about here is the assumption that the state ties by a vector that is known to less certain or equal to feature.

285
00:38:39,110 --> 00:38:49,120
So which just zero. If it's just so it doesn't it actually doesn't make a difference if you do greater than or strictly less than seven.

286
00:38:49,680 --> 00:38:56,150
Example Yeah, I can add one or two spellings and since I did a lot of the other.

287
00:39:01,810 --> 00:39:12,160
Any any other questions or. Yeah.

288
00:39:12,290 --> 00:39:15,920
So do you have that officer next week? Oh, yeah. Yes, I think.

289
00:39:19,480 --> 00:39:26,350
You know, I was thinking probably like 2:00 on Monday and 3:00 on Wednesday.

290
00:39:27,760 --> 00:39:31,990
Yeah. I like the normal thing. I'll have to then.

291
00:39:39,810 --> 00:39:43,180
Yeah. I just have to office hours, so be hungry.

292
00:39:44,380 --> 00:39:53,800
Yeah. Yeah, there will be. I didn't set up the zoom zoom you know, to do that but yeah I'll, I'll, I'll have a zoom.

293
00:39:54,160 --> 00:39:59,080
Yes. Yeah, I'll, they'll be hybrid.

294
00:40:02,210 --> 00:40:08,270
And unless. Well, I find something comes up, we'll have to change.

295
00:40:08,480 --> 00:40:19,560
Yeah. You think too much on your shoe? Which.

296
00:40:29,670 --> 00:40:41,270
You know, she had a good sense of English semesters and basically did so to finish the four last final assignments.

