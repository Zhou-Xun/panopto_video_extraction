1
00:00:02,150 --> 00:00:07,570
No, no, no. I mean, is not like.

2
00:00:16,770 --> 00:00:21,090
All right.

3
00:00:22,170 --> 00:00:30,860
Good morning, everybody. So.

4
00:00:32,790 --> 00:00:41,190
We are reaching mid-semester. Things are getting busy, I'm sure, for you all as it is for me as well.

5
00:00:41,670 --> 00:00:45,750
Um. You had homework, find you today.

6
00:00:45,760 --> 00:00:51,030
Hopefully you got that in on time. Did anyone have any questions about that?

7
00:00:56,910 --> 00:01:00,330
All right. You've got your midterm next week. Very exciting.

8
00:01:02,610 --> 00:01:07,990
So. Please fire away if you have any questions about what to expect.

9
00:01:08,740 --> 00:01:12,870
What you should study. Anything.

10
00:01:16,130 --> 00:01:20,180
There's that practice test on canvas. You can try if you haven't already.

11
00:01:20,720 --> 00:01:24,620
It'd be a good thing to give a go and see how you do.

12
00:01:26,190 --> 00:01:31,500
And I at least give you a reasonable idea of the types of things that you'll need to know for the tests.

13
00:01:34,960 --> 00:01:39,970
Okay. I would advise you to get here as early as possible next week.

14
00:01:41,470 --> 00:01:45,100
You're going to want to start right at 9:00 so you can have the full time.

15
00:01:46,290 --> 00:01:51,430
Okay. No questions about it, really.

16
00:01:57,130 --> 00:02:00,910
Yes. That's correct.

17
00:02:01,140 --> 00:02:05,080
You will not have lab next week. That's right. You'll just come in here for the test.

18
00:02:05,830 --> 00:02:13,820
When you're done, you can enjoy the rest of your weekend. Also today's homework that was due.

19
00:02:17,280 --> 00:02:20,800
There's only one more after this. So.

20
00:02:21,460 --> 00:02:25,690
So that's good. You got a little break from from that for a little bit.

21
00:02:26,080 --> 00:02:30,430
The last homework's also not due till after Thanksgiving, I believe.

22
00:02:30,940 --> 00:02:35,680
So just one more left. Right.

23
00:02:40,360 --> 00:02:49,150
This week we obviously need to focus on. After today's lab, you should focus on studying for that exam.

24
00:02:51,490 --> 00:02:59,320
Make sure you get your sheet, your all your notes and cheat sheets and whatnots in order so that you have them for the exam.

25
00:02:59,990 --> 00:03:03,640
Then you can bring those things and use them during the exam.

26
00:03:04,630 --> 00:03:10,870
But no electronics, please. So you shouldn't be looking at your phone or your computers during the exam?

27
00:03:11,500 --> 00:03:22,940
Yes. Sorry.

28
00:03:22,940 --> 00:03:30,210
I was having a hard time here, you know? Want to.

29
00:03:36,540 --> 00:03:42,910
Yeah. So she's asking about whether you should focus on studying the homeworks.

30
00:03:44,970 --> 00:03:48,690
I think those are are good, good things to study.

31
00:03:49,920 --> 00:03:56,070
You won't have any super complex things that you need to code on the exam, but you will have to code some things.

32
00:03:57,590 --> 00:04:02,569
You just write the code on the paper, right? So but it won't be anything extensive.

33
00:04:02,570 --> 00:04:06,530
It will be a basic data step or a basic procedure.

34
00:04:08,450 --> 00:04:12,950
One of the basic procedures that, you know, something like prep means or freak or something like that.

35
00:04:13,190 --> 00:04:17,430
Something. Fairly basic. Okay.

36
00:04:18,960 --> 00:04:23,940
But yeah, those are certainly the hallmarks are material that you would need to know.

37
00:04:27,170 --> 00:04:35,700
Okay. Any any other questions before we get started?

38
00:04:44,900 --> 00:04:50,540
All right. Well, today is a little different in that we're not really learning anything.

39
00:04:51,690 --> 00:04:54,120
Really new from what we've already done.

40
00:04:54,720 --> 00:05:02,560
But we're going to focus a little bit more on debugging, meaning when something goes wrong with your code, what should you do and what?

41
00:05:02,580 --> 00:05:07,730
How can you find what's went wrong? So that's kind of the focus for today.

42
00:05:14,440 --> 00:05:17,050
So we've learned a lot already in class.

43
00:05:17,770 --> 00:05:28,000
We learn how to import data, store it, merge datasets, manipulate them by creating variables and so on, and subset them.

44
00:05:29,690 --> 00:05:41,360
We learn how to summarize what product free product means is some some basic graphics like histograms, scatter plots and some other simple analysis.

45
00:05:44,650 --> 00:05:49,840
What we want to focus on today is how to identify and fix those problems with your code.

46
00:05:50,800 --> 00:05:58,390
So that's another skill that's going to be really important when you start any of your your real projects, right?

47
00:05:59,660 --> 00:06:05,990
So what is debugging? Well, it's the process of identifying the root cause of an error and correcting it.

48
00:06:10,790 --> 00:06:16,840
And we're going to. It's going to be important for us to to look at our long.

49
00:06:19,010 --> 00:06:27,410
I know we've tried emphasizes, but we don't always do it because if things are working, we're not looking at it and we're not paying attention.

50
00:06:27,770 --> 00:06:33,080
But it really is important to always look at your log. It's going to echo your submitted code.

51
00:06:34,510 --> 00:06:38,770
It's going to inform you of any unexpected or fatal errors.

52
00:06:40,790 --> 00:06:45,460
And it's often going to tell you where that error happens. Okay.

53
00:06:47,120 --> 00:06:56,090
But also it can sometimes show you totally wacky messages that you don't quite understand, but they'll at least give you hints about what's happening.

54
00:06:57,910 --> 00:07:03,870
Okay, so I always check your line. So learning objectives here.

55
00:07:03,870 --> 00:07:09,180
We want to interpret those messages in the log in and identify problems and resolve them.

56
00:07:11,790 --> 00:07:15,660
So what to do when code breaks? Well, take a deep breath.

57
00:07:15,720 --> 00:07:20,050
It's okay. Make sure you're clear and what you want to do.

58
00:07:21,650 --> 00:07:32,630
Check that log and read it carefully. Sometimes you'll have multiple errors and the same in the same code and those all show up in the log.

59
00:07:33,410 --> 00:07:38,970
Just take them one at a time. So start with the first one. Right.

60
00:07:39,000 --> 00:07:42,850
One at a time. And look for those common errors.

61
00:07:42,850 --> 00:07:46,900
That can happen a lot. And we'll talk more about those.

62
00:07:48,370 --> 00:07:51,650
So. Let's look at this example.

63
00:07:54,580 --> 00:08:02,800
So it's a simple data step here where we're creating a temporary dataset called Q2,

64
00:08:03,730 --> 00:08:11,350
and we're starting from a dataset that's permanent in an enhanced library.

65
00:08:13,270 --> 00:08:16,420
And there's a keep statement in here keeping several variables.

66
00:08:19,620 --> 00:08:22,800
But the datasets not created.

67
00:08:26,390 --> 00:08:30,430
Well, the question is why? So we look at our log here.

68
00:08:32,700 --> 00:08:36,600
And no warnings, no errors.

69
00:08:37,230 --> 00:08:47,650
Just this black text. Well, remember that the log reflects the code that you run.

70
00:08:48,730 --> 00:08:55,000
Okay. And so. You see here, this is actually showing you what's been run.

71
00:08:57,050 --> 00:09:02,920
Anyone see what happened here? It looks like by mistake.

72
00:09:04,050 --> 00:09:07,760
When you ran this. You kind of missed the ending here.

73
00:09:08,800 --> 00:09:13,090
Right. There's no in parentheses, no semicolon, and no run.

74
00:09:14,710 --> 00:09:18,960
Right. So when you were highlighting that code, you wanted to run.

75
00:09:18,990 --> 00:09:22,470
You just didn't quite get it all. You ran it and nothing happened.

76
00:09:23,560 --> 00:09:27,520
Well, that's because there was no run. It didn't actually execute the code at all.

77
00:09:30,140 --> 00:09:38,430
Okay. So. Essentially.

78
00:09:40,190 --> 00:09:47,390
It hasn't run anything. It's still trying to compile things, but it's not complete.

79
00:09:48,600 --> 00:09:50,550
So there's a couple of things you can do.

80
00:09:51,300 --> 00:10:00,810
Probably the best thing you could do is click on the little exclamation point there and cancel your submitted statements.

81
00:10:02,200 --> 00:10:05,889
This will allow us to reset and start over.

82
00:10:05,890 --> 00:10:09,230
So you then you can highlight the whole thing. And run it.

83
00:10:11,190 --> 00:10:16,020
Okay. This is true any time SAS kind of gets stuck.

84
00:10:17,500 --> 00:10:19,030
Sometimes there's a loop,

85
00:10:19,060 --> 00:10:24,640
that's your code and you'll get stuck in the loop and never again be able to get out because something's not quite coded right.

86
00:10:25,640 --> 00:10:36,560
So you can hit this exclamation. This window will pop up and you can make sure the cancel submitted statements button is is selected and hit.

87
00:10:36,560 --> 00:10:46,570
Okay. Okay. The other option is to actually go back to your code here.

88
00:10:47,500 --> 00:10:55,630
And run the missing code that you haven't yet run from the exact spot where it left off.

89
00:10:56,080 --> 00:11:04,540
So if your your log says this, it looks like you stopped right before the final parentheses so you could highlight the final print,

90
00:11:04,540 --> 00:11:09,820
see the semicolon in the run by itself and run that.

91
00:11:11,070 --> 00:11:16,500
And then SAS will get the complete code and actually run it.

92
00:11:18,740 --> 00:11:22,330
Okay. So that's also an option.

93
00:11:23,020 --> 00:11:28,360
But sometimes that leaves a little room for error if you don't highlight the exact spot where it ended.

94
00:11:29,170 --> 00:11:33,900
It won't work. Okay. So it's probably safer.

95
00:11:34,200 --> 00:11:37,590
Easier just to cancel your submitted statements and start again.

96
00:11:40,140 --> 00:11:43,570
Okay. That makes sense to everyone.

97
00:11:43,870 --> 00:11:48,860
Yes. Previous.

98
00:11:50,550 --> 00:11:57,540
Yeah. So if you ran this partial piece and then went back and ran the whole thing again.

99
00:11:58,990 --> 00:12:02,860
It would. Think of all of that as one chunk of code.

100
00:12:04,950 --> 00:12:09,220
Okay. So it would not work. Yeah.

101
00:12:11,740 --> 00:12:18,110
Essentially SAS is still running. Because you haven't told it to execute with that run statement.

102
00:12:18,650 --> 00:12:22,370
So it's still running. So if you submit more code, it will keep running.

103
00:12:23,780 --> 00:12:27,650
Okay. That's a good question.

104
00:12:32,380 --> 00:12:39,190
All right. Here's another common mistake, common error, I should say.

105
00:12:41,080 --> 00:12:48,150
Where your data sets don't exist. So here we submitted this code at the top.

106
00:12:49,920 --> 00:12:53,270
And the error in the log says File in Haynes. Q.

107
00:12:53,280 --> 00:13:00,150
Q That data does not exist. Usually the culprit here is some kind of spelling mistake.

108
00:13:01,600 --> 00:13:05,500
Some typo. In fact, the data set was called.

109
00:13:06,040 --> 00:13:09,130
Q But we added an extra Q in there.

110
00:13:10,590 --> 00:13:15,360
So when you get this error, should go back and check all your spelling on your data sets.

111
00:13:17,120 --> 00:13:21,390
And make sure you're correct. Okay.

112
00:13:27,810 --> 00:13:32,210
And this other one here. We've got a live name statement.

113
00:13:34,050 --> 00:13:44,260
Pointing to some directory on your computer. And in that case, the log is saying library needs does not exist.

114
00:13:46,900 --> 00:13:50,920
So again, that's the usual culprit. There is some kind of typo.

115
00:13:52,440 --> 00:13:59,340
So this path that you've pointed to actually doesn't exist because something in it is spelled incorrectly.

116
00:13:59,910 --> 00:14:06,270
It's probably that serious, but it should be at 640, I'm guessing sort of instead of 646.

117
00:14:07,880 --> 00:14:16,070
Right. Now, the easiest thing to do when you're copying paths is to actually go to the the folder in your Windows

118
00:14:16,070 --> 00:14:24,170
Explorer and you can highlight the top and actually copy the path name and paste it into your sense.

119
00:14:24,890 --> 00:14:28,190
It's usually the easiest way to to ward off those type of errors.

120
00:14:31,140 --> 00:14:39,120
Okay. There's also this common error.

121
00:14:41,610 --> 00:14:47,850
Where it says the variable so-and-so in the drop keep or rename list has never been referenced.

122
00:14:52,340 --> 00:14:58,870
Well, that's another. Prime suspect for typos.

123
00:15:01,800 --> 00:15:04,920
Because remember, all the variables need to be spelled correctly as well.

124
00:15:05,400 --> 00:15:09,940
And if they're not, this is the error that you'll see. Okay.

125
00:15:10,370 --> 00:15:24,560
Yes, that's. Well, if it's in the warning, it means that the codes still ran.

126
00:15:25,520 --> 00:15:30,410
But there is a problem in that it didn't recognize that variable, so it kind of skipped it.

127
00:15:30,920 --> 00:15:37,790
But the code would still run in that case. In this case, it didn't run at all because we have it in a keep statement.

128
00:15:38,210 --> 00:15:43,980
That's the key if statements in our set statement as well.

129
00:15:44,000 --> 00:15:52,100
Right. Which means that it's trying to keep that as it reads in the enhanced Q dataset.

130
00:15:53,360 --> 00:15:55,700
And because it doesn't recognize it, it can't do that.

131
00:15:57,170 --> 00:16:06,260
If we had that keep statement as a separate keep statement or in the data statement, it may actually still run.

132
00:16:07,810 --> 00:16:12,610
Because it would read in the file, it would execute anything you want.

133
00:16:13,210 --> 00:16:18,520
And then when it writes it, it would try to keep it but wouldn't recognize it.

134
00:16:18,520 --> 00:16:22,110
So it just skip it. Okay.

135
00:16:23,470 --> 00:16:28,990
So that's a great question. If it shows up in the morning. That could still be a problem.

136
00:16:29,030 --> 00:16:33,600
Probably is still a problem. But it doesn't mean that the code didn't run.

137
00:16:36,550 --> 00:16:42,690
Okay. Just because code runs doesn't mean there's no errors.

138
00:16:43,910 --> 00:16:45,530
That's that's a very important lesson.

139
00:16:46,310 --> 00:16:53,120
And so that's why you also want to open up your data sets and check it and make sure it looks the way you expect.

140
00:16:54,980 --> 00:16:59,630
Okay. So that's another important thing to do.

141
00:16:59,960 --> 00:17:10,470
Check the log and check your data when you're done. Yeah.

142
00:17:10,480 --> 00:17:13,900
So you might get this kind of error as well.

143
00:17:15,710 --> 00:17:20,210
In this case, it says variable fuel four nine is on initialized.

144
00:17:20,810 --> 00:17:25,040
This is not an error, as you can see. It's just a note. It's not even a warning.

145
00:17:25,040 --> 00:17:30,040
It's a note. So the code ran ran just fine.

146
00:17:30,940 --> 00:17:37,060
However, when you open your dataset, you see nothing in these two two columns.

147
00:17:42,410 --> 00:17:51,560
So what could have happened there? Yes.

148
00:17:54,830 --> 00:17:58,190
Yeah, that's exactly right. It's un initialized.

149
00:17:58,580 --> 00:18:04,430
You tried to do some kind of variable creation with it, but you didn't keep it in the first place.

150
00:18:07,450 --> 00:18:13,290
So what Sasse is going to do is say, well, it doesn't exist, so I'll just create it and leave it blank.

151
00:18:14,700 --> 00:18:19,120
And then when you create that new version of it. It's still blank.

152
00:18:20,270 --> 00:18:26,310
All right, so you just end up with two empty columns. All right.

153
00:18:27,860 --> 00:18:36,230
So if you see that error, it usually means you're trying to do some kind of math or variable creation with a variable that doesn't exist.

154
00:18:38,940 --> 00:18:44,110
Either because you didn't keep it. Or you spelled it wrong or something of that nature.

155
00:18:47,140 --> 00:18:56,160
All right. These are very common errors. Happens all the time. The trick is being able to recognize them and and fix them.

156
00:19:00,580 --> 00:19:03,640
There's also errors that happen regularly with merging.

157
00:19:03,760 --> 00:19:10,480
So in this case, it says in our log the variable name has been defined as both character and numeric.

158
00:19:11,710 --> 00:19:20,620
Well, if you recall from last week, in order to merge on an ID variable, they have to be the exact same type, the exact same name.

159
00:19:22,050 --> 00:19:30,950
In the exact same format. Right. So this is just telling you that that's not the case for the two datasets you're trying to merge.

160
00:19:32,060 --> 00:19:39,650
It's character in one, an American the other. So as we learned last week, you'd have to go back and change one of them.

161
00:19:41,620 --> 00:19:45,550
Change the character one to numeric, for example. And then they'll both be numeric.

162
00:19:46,710 --> 00:19:51,800
And then you can merge them together. Okay.

163
00:19:59,000 --> 00:20:02,880
Incorrect data types. You'll see this quite a bit.

164
00:20:03,870 --> 00:20:10,650
It's sometimes fatal, sometimes not. Because SAS can help you out sometimes in this case.

165
00:20:12,210 --> 00:20:14,370
So if we're running this code here, this data step.

166
00:20:16,260 --> 00:20:22,630
It puts a note in the log saying character values have been converted to numeric values at the places given by.

167
00:20:23,510 --> 00:20:30,920
I'll give you the line in the column. So if you look at the echoed version of your code in the log here.

168
00:20:31,990 --> 00:20:35,740
155 is the BMI variable creation there.

169
00:20:38,500 --> 00:20:44,330
And if we look at. Our column names and types.

170
00:20:45,020 --> 00:20:48,950
You can get this either from a. For me.

171
00:20:53,640 --> 00:21:00,990
So I'm blanking on the name. But you can you can open up the you can right click on the data set, right, and open up new columns.

172
00:21:00,990 --> 00:21:06,350
And you can, you can see all this stuff. So.

173
00:21:08,060 --> 00:21:11,210
Part content. The other option there to find this stuff out.

174
00:21:12,450 --> 00:21:17,520
You can see that weight is numeric, but height is actually character.

175
00:21:19,140 --> 00:21:26,780
Since Textor. So when you try to do that math to create the BMI variable.

176
00:21:29,520 --> 00:21:37,640
There is. There's an issue, right? I if it's character, it's you can't really divide by a character.

177
00:21:38,150 --> 00:21:42,440
However, since Bale's you out and says that it converts it to character first.

178
00:21:44,390 --> 00:21:48,320
So it did run and it did work. But it's something to be aware of.

179
00:21:50,840 --> 00:21:58,450
Okay. It probably means you'd you'd want to go back and convert that height into a numeric.

180
00:22:03,730 --> 00:22:09,480
All right. Incorrect data types.

181
00:22:10,260 --> 00:22:13,860
So here we're trying to enter some some data with the data lines.

182
00:22:14,910 --> 00:22:20,650
Statement. But our input tells us we're entering in heightened gender.

183
00:22:22,310 --> 00:22:25,520
We've entered gender as a character variable.

184
00:22:28,010 --> 00:22:36,590
So the aerial scene near logs, a bunch of stuff like this, it'll say note invalid data for gender in line, blah blah blah and know.

185
00:22:37,960 --> 00:22:41,560
Do that for every line of code that you entered.

186
00:22:44,020 --> 00:22:52,880
So when you see that, it simply means that you've. You confused numerical character, you were inconsistent there.

187
00:22:54,490 --> 00:23:00,930
You remember how to. To identify a character variable in an input statement.

188
00:23:02,130 --> 00:23:05,290
Do you remember how to do that? The dollar sign.

189
00:23:05,310 --> 00:23:11,520
Yeah. So we should have a dollar sign after the gender here to indicate that it is character.

190
00:23:14,430 --> 00:23:21,510
So that would be the fix. Or you could go back and Recode F and M is say one and two or zero and one.

191
00:23:22,550 --> 00:23:25,990
And then 4 minutes later. I would also work.

192
00:23:29,170 --> 00:23:39,150
Okay. There's another example where we're trying to import some data within in file and input statement.

193
00:23:41,170 --> 00:23:46,390
Here's the actual data here at the bottom. And.

194
00:23:47,710 --> 00:23:51,490
Here's what we see in the log. We see some.

195
00:23:52,780 --> 00:23:57,220
Invalid data for ID number, some invalid data for height and weight as well.

196
00:23:58,900 --> 00:24:06,040
And when we open up the data set, we see this. What went wrong here?

197
00:24:14,020 --> 00:24:18,780
There's a code. What went wrong?

198
00:24:25,410 --> 00:24:36,670
Yes, the. Yeah.

199
00:24:36,670 --> 00:24:41,710
So what you're recognizing here is this gender shows up here, right?

200
00:24:43,870 --> 00:24:51,250
With some other missing. Well, if we look at the data, we've got a header, Roe.

201
00:24:52,650 --> 00:24:55,740
But we didn't tell says that it had it had a room.

202
00:24:58,150 --> 00:25:03,130
Right. So that's why this happened to tried to read in that hetero as data.

203
00:25:06,350 --> 00:25:10,010
So what do we need to do to fix that? Yes.

204
00:25:12,270 --> 00:25:20,460
Yeah. We need a first of equals two option in that file statement that'll tell sense to start reading data from line to.

205
00:25:23,230 --> 00:25:29,100
Okay. So if you see this type of thing, that's probably what happened.

206
00:25:30,920 --> 00:25:37,480
It's an easy thing to miss because you're not thinking about the hero. But sass only does what you tell it to do.

207
00:25:41,740 --> 00:25:51,080
Wrong keywords. So if we run this code at the top, it actually underlines the problem.

208
00:25:52,740 --> 00:25:57,690
Which is very convenient and it says statement is not valid or it is used out of proper order.

209
00:25:58,060 --> 00:26:06,810
It's a very common error. Well, if we actually look at our code, we can use the colors to help us as well.

210
00:26:07,260 --> 00:26:10,470
If something shows up red, that's generally bad.

211
00:26:12,430 --> 00:26:17,710
Okay. And in this case. Var is not a valid statement.

212
00:26:18,340 --> 00:26:22,630
What do we need instead? Table, a table statement.

213
00:26:24,320 --> 00:26:29,320
Okay. So we just used the wrong keyword. So that's what Sass is trying to tell us.

214
00:26:29,340 --> 00:26:33,000
It underlines the problem. It tells you it's not valid.

215
00:26:34,960 --> 00:26:39,640
So you have to figure out what the correct the correct keyword actually is.

216
00:26:43,950 --> 00:26:49,020
Failing to sort can be another problem in any time you have a buy statement.

217
00:26:50,760 --> 00:26:55,950
Either in a data or a procedure step.

218
00:26:57,310 --> 00:27:07,370
They have to be sorted on that by variable first. And it'll tell you just that worked out look is not sorted in ascending sequence.

219
00:27:10,320 --> 00:27:15,480
You can see there's a buy statement in there. So you'd have to run a practice sort.

220
00:27:16,810 --> 00:27:20,230
On that data set by gender before.

221
00:27:21,320 --> 00:27:29,290
You can run this broad means by gender. Okay.

222
00:27:32,510 --> 00:27:37,460
So key takeaways in that section. Always review your blog for information about where things went wrong.

223
00:27:39,360 --> 00:27:43,560
The echo code can inform you of if full code was not submitted.

224
00:27:44,820 --> 00:27:52,290
So if you don't see any warnings or errors or any anything but the code text, that means you didn't submit the whole thing probably.

225
00:27:54,460 --> 00:28:01,360
Variables, data sets or libraries that do not exist where on initialized indicate they have not been created yet.

226
00:28:02,170 --> 00:28:10,990
Or there's some typo in the name. The log will often tell you explicitly of the problems and where to find them.

227
00:28:13,620 --> 00:28:21,860
It's important to check it. So let's look at some more strange messages as well.

228
00:28:26,680 --> 00:28:34,570
So let's say we submit this code now its underlying set and so set is not allowed in the data statement.

229
00:28:35,410 --> 00:28:39,000
Well. What does that mean?

230
00:28:43,240 --> 00:28:48,290
Yes. Yeah, exactly.

231
00:28:48,830 --> 00:28:52,160
So because there's not a semicolon in that first line.

232
00:28:53,490 --> 00:28:58,110
It thinks that set is still part of that same statement, the data statement.

233
00:28:59,960 --> 00:29:03,200
And that's what it's telling you that is not allowed in the data statement.

234
00:29:03,800 --> 00:29:07,760
Right. We need to end that data statement before we can start to set statement.

235
00:29:10,170 --> 00:29:14,640
So this often happens. If you've missed a semicolon, I'd say that's a good thing to check first.

236
00:29:17,190 --> 00:29:24,030
Even it says check for a missing semicolon. So it usually doesn't help you that much, but in this case, it will.

237
00:29:25,760 --> 00:29:31,120
Okay. What about this?

238
00:29:32,910 --> 00:29:38,680
Get the semi-colon in there now. But now it says statement is not valid or is used out of proper order.

239
00:29:41,400 --> 00:29:44,850
Hmm. We. No such statements should be correct.

240
00:29:46,100 --> 00:29:51,310
In a data step. When he spots us there.

241
00:29:55,120 --> 00:29:58,540
This one's tough. So if you go back to actually code.

242
00:29:59,790 --> 00:30:04,730
This is what it looks like. So what's the error?

243
00:30:08,100 --> 00:30:12,350
Yes. That's right.

244
00:30:12,360 --> 00:30:16,050
Yeah. We never closed the comment line up there.

245
00:30:17,390 --> 00:30:24,560
So that means when it finally saw a semicolon in the data statement, it thought that whole thing.

246
00:30:25,960 --> 00:30:31,400
Was the comment. Right.

247
00:30:31,880 --> 00:30:36,660
And that's why I set is is not is. And.

248
00:30:37,890 --> 00:30:41,100
Is not valid, set is not valid or use out of proper order.

249
00:30:42,000 --> 00:30:46,910
That's true because we haven't started the day to step. Right.

250
00:30:48,330 --> 00:30:52,130
So make sure you close. Those comments.

251
00:30:55,880 --> 00:31:00,500
And you can do that two ways, right? You can either have the slashes or you can have a semicolon at the end.

252
00:31:04,940 --> 00:31:10,970
Often problems are more subtle. Sometimes something just will not run.

253
00:31:11,630 --> 00:31:18,670
So there's no log to tell you what happened. So this one in this example.

254
00:31:21,140 --> 00:31:25,130
Everything seems okay. Can anyone spot what's wrong?

255
00:31:29,680 --> 00:31:34,710
Yes. Yeah, it is.

256
00:31:35,160 --> 00:31:38,340
And if you actually look at the code that you've written.

257
00:31:40,100 --> 00:31:45,090
Well. While it turns purple like it should because it's inside quotes.

258
00:31:45,510 --> 00:31:56,850
You notice that bled into the run as well. So nothing shows up in your log other than the echo of the code because it hasn't executed anything.

259
00:31:56,970 --> 00:32:01,580
Because there's no run. I thought that was part of the.

260
00:32:02,780 --> 00:32:06,900
The character string. Okay.

261
00:32:07,920 --> 00:32:11,910
You do need to match single quote with single quote or double quote?

262
00:32:12,000 --> 00:32:16,670
Double quote. Otherwise.

263
00:32:17,950 --> 00:32:22,470
It just won't close that that. That character string.

264
00:32:26,060 --> 00:32:32,150
And if this does happen again, you can use that exclamation point to cancel your summit statements and start over.

265
00:32:33,140 --> 00:32:42,170
Because it didn't execute anything yet again. Any more code that you run will get tacked on top of it and things will get all jumbled up.

266
00:32:42,650 --> 00:32:46,820
So if this happens, reset SAS in this way.

267
00:32:50,920 --> 00:32:55,860
Yes, I like. You.

268
00:32:58,080 --> 00:33:06,600
Do you have to highlight it? You do not know because anything that's running at that current moment, you will cancel out with this this procedure.

269
00:33:09,430 --> 00:33:14,060
Okay. Makes sense.

270
00:33:17,830 --> 00:33:24,010
All right. Key takeaways in that section when the log tells you things that you know not to be true.

271
00:33:26,200 --> 00:33:34,990
Look at your coat before the air occurs. So that just simply means is if you get some kind of error like this.

272
00:33:36,240 --> 00:33:40,680
You should look at the code above where it's pointing out to make sure that's correct.

273
00:33:41,490 --> 00:33:48,700
Something went wrong. And we can use the enhanced editor and the coloring to find those problems.

274
00:33:52,390 --> 00:33:56,320
I don't think anyone's ever. And not using enhanced editing. There is one.

275
00:33:59,020 --> 00:34:02,980
Standard editor, I guess you would call it, where those colors don't show up.

276
00:34:03,640 --> 00:34:07,480
So. You can forget that exists.

277
00:34:07,720 --> 00:34:10,730
Just never use it. Right.

278
00:34:14,220 --> 00:34:21,520
Silent airs. You should know that the law is not always enough to find mistakes.

279
00:34:23,960 --> 00:34:30,590
And you should review your data for logical mistakes and anticipate issues with new data sets as well.

280
00:34:33,390 --> 00:34:40,240
So silencers are code that runs. But something still is going wrong.

281
00:34:41,410 --> 00:34:43,690
And usually this is some sort of logical error.

282
00:34:45,000 --> 00:34:51,780
Where you specify what you actually want, where you have some incorrect interpretation of your needs or you have a typo.

283
00:34:53,320 --> 00:34:56,440
So you need to remember to look at your data carefully.

284
00:34:59,490 --> 00:35:04,950
So here's an example where we're trying to categorize.

285
00:35:06,510 --> 00:35:17,330
This restaurant variable here. We have a series of we have a do a do group here.

286
00:35:18,050 --> 00:35:27,740
So if it's not missing, then do and we have if less than one to make a restaurant one if less than three, make it two else.

287
00:35:28,800 --> 00:35:32,490
ElseIf If it's greater than three, then make it three.

288
00:35:34,560 --> 00:35:38,780
But when we run. A freak on this thing.

289
00:35:39,350 --> 00:35:43,370
We see that everything's in Category two or three. There's no Category one.

290
00:35:49,360 --> 00:35:56,230
So what happened? Yes.

291
00:36:09,640 --> 00:36:13,390
Yeah, that's that's exactly right. So in the first if statement.

292
00:36:14,800 --> 00:36:19,410
It counted anything less than one as one. So that's fine.

293
00:36:19,470 --> 00:36:23,970
That's what we wanted. But in the next if statement, if it's less than three.

294
00:36:26,520 --> 00:36:30,960
It makes it too. So any of those that were less than one are still less than three.

295
00:36:31,140 --> 00:36:35,720
So it overwrites those those one categories with twos.

296
00:36:38,410 --> 00:36:41,640
Right. So what's.

297
00:36:41,670 --> 00:36:48,580
What's one way that we might fix this? Yes.

298
00:36:51,920 --> 00:36:57,390
Yeah. That would work if we used an F in the second. In the second line there.

299
00:36:59,100 --> 00:37:03,380
Instead of if. Then it would.

300
00:37:03,620 --> 00:37:08,270
If it found something less than one, it would skip the rest of those logical.

301
00:37:09,210 --> 00:37:12,880
Cuz. And then you'd be fine.

302
00:37:12,940 --> 00:37:16,300
You have all your ones. This one's your twosies. Twos and threes and threes.

303
00:37:18,590 --> 00:37:22,280
Okay. The other.

304
00:37:22,520 --> 00:37:28,040
Another solution would be to put a lower bound in that second line.

305
00:37:28,040 --> 00:37:31,160
Line. So you could say if.

306
00:37:33,850 --> 00:37:38,080
One is less than or equal to the variable and less than three.

307
00:37:40,130 --> 00:37:46,820
I would also work. Okay.

308
00:37:51,000 --> 00:37:56,580
All right. So the logic is something you need to pay attention to.

309
00:38:01,340 --> 00:38:07,420
Another thing. Is that you can employ a systematic debugging.

310
00:38:07,960 --> 00:38:16,830
So you're just not sure. Usually this is in a data step where you're coding a bunch of stuff and you can't find the logical problem right away.

311
00:38:18,030 --> 00:38:22,060
So one technique here. Is to.

312
00:38:23,920 --> 00:38:27,250
Go back and remove parts of your code.

313
00:38:28,360 --> 00:38:32,770
To try to eliminate where the error is occurring.

314
00:38:33,310 --> 00:38:40,960
So let's say we have this data set. You got a bunch of code doing a bunch of different code lines and the air is actually occurring code line six.

315
00:38:41,350 --> 00:38:50,510
But you don't know it. So one thing you could do is simply remove some of that code.

316
00:38:51,560 --> 00:38:54,680
So I've done that now by deleting it, but just by commenting it out.

317
00:38:56,240 --> 00:39:05,170
Right. If I comment out the bottom half of this and rerun it all and code runs, everything seems fine.

318
00:39:07,310 --> 00:39:11,910
So then I can add a little bit more back in. Oh, it still runs.

319
00:39:13,820 --> 00:39:17,600
Right. And a little bit more in. Oh. Now it fails.

320
00:39:18,020 --> 00:39:24,020
So we can, by process of elimination, conclude that the problem occurred in code line six.

321
00:39:27,250 --> 00:39:35,220
Okay. So this is really good when you're just not sure where there's happening.

322
00:39:37,870 --> 00:39:45,330
And you can't figure out how to fix it. So just use process the process of elimination.

323
00:39:48,080 --> 00:39:51,570
You can also subset your data. This is kind of a subset in your code, right?

324
00:39:51,580 --> 00:39:55,340
And you could subset your data in a similar way.

325
00:39:59,510 --> 00:40:02,660
To see if there's particular observations that are causing the problem.

326
00:40:04,430 --> 00:40:09,410
Now, if your data sets very large, it's often worthwhile to make a smaller test set to debug with.

327
00:40:12,900 --> 00:40:16,110
And use known data to test your code. So this is.

328
00:40:17,850 --> 00:40:21,780
Kind of a complex example.

329
00:40:22,410 --> 00:40:28,200
But the real point is here that you can actually print information to your log to try to help you.

330
00:40:29,540 --> 00:40:33,080
So there are some logical statements here. Some statements.

331
00:40:35,560 --> 00:40:40,240
And then there's this. If a birth date is.

332
00:40:42,560 --> 00:40:49,340
The st is less than the why when when 1900 and birthday not equal back then put.

333
00:40:49,970 --> 00:40:59,090
So what's happening here is the suspected problem is that maybe some of these birth dates are

334
00:40:59,270 --> 00:41:05,630
previous to 1900 and they're not getting coded correctly when they're converted into a fasting.

335
00:41:07,330 --> 00:41:14,880
So that's the suspicion. So we're saying if that occurs.

336
00:41:16,790 --> 00:41:21,439
We're telling it to print a message in the log, which is calculated.

337
00:41:21,440 --> 00:41:26,820
Birthdate is prior to when one 1900. Please confirm.

338
00:41:27,780 --> 00:41:36,960
Right. So it's it's simply a way to code a message for you if particular observations are occurring that you suspect are a problem.

339
00:41:38,560 --> 00:41:42,580
This might be a big dataset and you can't really search through it all and find those things.

340
00:41:42,970 --> 00:41:46,570
So it'd be nice to have it simply print.

341
00:41:48,850 --> 00:41:55,770
This error in in the log for you. Okay.

342
00:41:59,340 --> 00:42:04,680
So while this is somewhat advanced, it is something that you can employ to help you out.

343
00:42:11,230 --> 00:42:16,850
Another thing that might occur. Suppose you were code was working perfectly fine.

344
00:42:18,640 --> 00:42:22,300
It's been running for you. It's been working. You've been analyzing it.

345
00:42:22,990 --> 00:42:27,520
And then you go and you add some new piece of code.

346
00:42:28,690 --> 00:42:37,090
And it stops working. Well, obviously, if it was working before and you're using the same data, everything's the same.

347
00:42:37,510 --> 00:42:41,590
But you've added some new code. That new code is the culprit, right?

348
00:42:42,920 --> 00:42:51,480
So you need to go back and check that first. I still can't figure it out.

349
00:42:53,450 --> 00:42:56,600
Well. He thought it was fixed.

350
00:42:57,200 --> 00:43:00,560
Sometimes you've got these hanging statements. So again, you can.

351
00:43:02,140 --> 00:43:05,140
You can hit the exclamation and cancel your submitted statements.

352
00:43:06,650 --> 00:43:18,800
Sometimes that'll help it rework. I saw that in some of your labs maybe a couple of weeks ago where you were overwriting the same data set.

353
00:43:20,450 --> 00:43:28,880
With one that already existed. And because something went wrong in the previous step, it was still going wrong.

354
00:43:29,180 --> 00:43:36,310
When you when you were trying to overwrite it. So the key there was just to start over.

355
00:43:37,240 --> 00:43:43,120
Cancel whatever's happening. Start again. And if you're still stuck.

356
00:43:44,430 --> 00:43:47,550
Take a break. Come back to it later.

357
00:43:48,600 --> 00:43:58,480
Sometimes you just need a fresh look. If all else fails, well, you can just start over.

358
00:43:58,660 --> 00:44:02,410
You can raise your car and be like, This isn't working.

359
00:44:02,980 --> 00:44:10,120
Start over. That's a last resort, but it is one that's an option for you.

360
00:44:12,210 --> 00:44:19,440
All right. So key takeaways in that section systematically remove lines of code to find problems.

361
00:44:19,900 --> 00:44:27,780
You can use a process of elimination there. You can run code and subsets, data and test before running a full dataset.

362
00:44:29,490 --> 00:44:35,080
And sometimes you're going to need to break the code. If SAS is hung up and just start over.

363
00:44:41,870 --> 00:44:49,090
A few other areas here we can talk about. Logical errors.

364
00:44:50,520 --> 00:45:00,180
So here we're. We've seen this before in previous lectures where dropping height and weight in the set statement when it reads it in.

365
00:45:00,510 --> 00:45:06,270
But then we're trying to do math with those variables. Right? So that's going to leave everything blank.

366
00:45:07,300 --> 00:45:11,800
We've seen that before. Here's a more subtle one.

367
00:45:13,490 --> 00:45:19,810
We're trying to create an average. Of V one through v five.

368
00:45:22,580 --> 00:45:31,399
If you're you're using this v1-v5 notation to indicate all five variables you will need.

369
00:45:31,400 --> 00:45:37,110
And of this, that's one that's easy to miss. And this will run.

370
00:45:37,980 --> 00:45:42,960
So you really have to be careful. So you're going to have to open up your data and spot check things.

371
00:45:44,460 --> 00:45:51,900
When doing this type of calculation. Because it will subtract B5 from V1 and find the mean of that.

372
00:45:53,280 --> 00:46:00,960
That will not work. It just won't be right. Another thing that can occur.

373
00:46:02,400 --> 00:46:09,330
Is maybe your codes running perfectly fine. And then you add more data.

374
00:46:10,560 --> 00:46:16,930
And now it doesn't work. That's usually because you didn't code all the possibilities.

375
00:46:17,050 --> 00:46:22,630
Maybe you coded all the possibilities in the first data set, but when you added more, there was additional possibilities.

376
00:46:24,170 --> 00:46:31,180
Right. So this might happen if if you were working within Haines here and you had refused,

377
00:46:31,180 --> 00:46:39,940
don't know or missing and you already knew there weren't any refuse in your piece of piece of data that you had.

378
00:46:40,270 --> 00:46:46,390
So you didn't record them when you added additional stuff, maybe an extra year or something like that.

379
00:46:47,110 --> 00:46:55,700
There were there were reviews. And so when you go back and rerun that same exact code, those reviews will.

380
00:46:56,940 --> 00:47:05,130
We'll make things not work. So it's important to actually code all the possibilities that you see in your code book.

381
00:47:06,370 --> 00:47:09,790
Whether you actually have them in your piece of data or not.

382
00:47:11,300 --> 00:47:15,820
That's good practice. Always inspect your data after manipulation.

383
00:47:16,840 --> 00:47:20,500
Could all possible options, even if they're missing in your current dataset.

384
00:47:22,050 --> 00:47:25,870
Okay. Any questions?

385
00:47:33,700 --> 00:47:38,770
All right. So your lab, Nic lab this week is a little different.

386
00:47:41,020 --> 00:47:49,300
You're going to practice debugging, obviously, but instead of starting with a homework sheet and answering questions,

387
00:47:49,990 --> 00:47:51,970
coding and answering questions about that code,

388
00:47:52,210 --> 00:47:57,970
you're going to start with a piece of code and you're going to run it, try to figure out what's wrong with it,

389
00:47:58,690 --> 00:48:02,980
and you'll have to create your own word document further for the writer.

390
00:48:03,370 --> 00:48:07,450
So just explain what went wrong in each problem. Okay.

391
00:48:09,880 --> 00:48:14,530
So good luck with that. Your exams next week.

392
00:48:14,710 --> 00:48:16,420
Don't forget. Be here early.

