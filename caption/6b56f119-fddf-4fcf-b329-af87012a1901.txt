1
00:00:01,360 --> 00:00:05,280
Yeah, I know.

2
00:00:05,660 --> 00:00:09,080
I know. I know. Yeah.

3
00:00:11,430 --> 00:00:15,030
All right. Hi, everyone, and welcome to Evans six seven for our second week.

4
00:00:15,030 --> 00:00:19,829
Thank you for being virtual with me. The first week I'm back at it and ready to roll.

5
00:00:19,830 --> 00:00:26,880
So here's our agenda for this one. So number two is going to be due in two weeks because data management is going to be a big topic.

6
00:00:27,180 --> 00:00:33,209
I recommend you get started on it now, but keeping that in mind for the future and then here's our outline.

7
00:00:33,210 --> 00:00:38,550
So we're going to go over our recap, the last class and our first homework, a number to finish up some of these activities.

8
00:00:38,550 --> 00:00:42,510
From the first week, we'll take two sides.

9
00:00:42,510 --> 00:00:45,870
Anything in the data, any comments, questions about structure.

10
00:00:46,320 --> 00:00:49,560
You can see we're going to do a lot of data activities next week as well.

11
00:00:53,500 --> 00:00:56,670
All right. A couple of more challenges.

12
00:00:56,910 --> 00:01:01,020
Just remember to do your code and your output in the same file.

13
00:01:01,500 --> 00:01:04,920
Some people provided only output or only code did.

14
00:01:05,000 --> 00:01:12,450
Did anybody have an approach? How did you try to do that? How did you try to link code and output anything that they tried that worked for them?

15
00:01:15,180 --> 00:01:19,500
Yeah. I'm just doing like the artwork and doing the render to create video.

16
00:01:19,920 --> 00:01:23,639
Yeah. So then once you're coding, once you're satisfied with how your code is going,

17
00:01:23,640 --> 00:01:27,720
you can put that render button and that will stitch everything together for you.

18
00:01:28,200 --> 00:01:34,979
Okay. Yeah. Something I found helpful was at the time it said, like, each HTML is a it sounds output or something like that.

19
00:01:34,980 --> 00:01:38,730
And I just watched it, the pdf and that was like an even nice document.

20
00:01:39,380 --> 00:01:44,700
Oh, nice. So up in the format, up in that header, you can specify your title, your offer, the date.

21
00:01:45,000 --> 00:01:51,479
One important thing you can specify as the format. So what file type you want the output to set up.

22
00:01:51,480 --> 00:01:57,900
And and I think the default is to make an email so to make a website, but you could do a PDF, you could do a doc x if you'd like a word.

23
00:01:57,900 --> 00:02:03,840
Doctors, I want you to have ways to do it. Did anybody encounter any challenges when they were trying to hit that render button?

24
00:02:04,710 --> 00:02:07,980
Yeah. Was that like. Yeah. So I'm still having an issue.

25
00:02:08,070 --> 00:02:12,060
Oh, yeah. We'll work through it. I, I tried doing it, but every time.

26
00:02:12,360 --> 00:02:15,380
So with our markdown, it was a net but not rendered. Yeah. Yeah.

27
00:02:15,390 --> 00:02:22,050
And then when I switched to auto to see if that would help out, I'm still getting like an error or not being able to render the document.

28
00:02:22,950 --> 00:02:29,880
But someone suggested you like file in print, which worked for just getting the code, but I wasn't able to get the output with it when I would print.

29
00:02:30,000 --> 00:02:34,739
Oh yeah. What kind of it's totally normal to get error messages is I have this happen to me all the time.

30
00:02:34,740 --> 00:02:40,560
What kind of stuff did the error message. So with marked out I was getting something that I needed to install like the latex.

31
00:02:40,710 --> 00:02:47,640
So I tried doing that still wasn't working. And so you were able to see it's like telling me I'm missing a package, so let me out of that package.

32
00:02:47,650 --> 00:02:53,690
Yeah, that's great troubleshooting. But now I don't really know what this, like, error messages count.

33
00:02:54,150 --> 00:02:56,670
Yeah, let's read through it together.

34
00:02:58,700 --> 00:03:05,210
But your approach of like a make it work moment, like let's just get the code out got together with the output is perfect.

35
00:03:05,540 --> 00:03:09,589
Right. I don't you spend all day working through this render alone like we can help

36
00:03:09,590 --> 00:03:12,709
you out with that and copy paste and do what you got to do to get it going,

37
00:03:12,710 --> 00:03:16,900
especially in the beginning. I think that's a great strategy there.

38
00:03:17,940 --> 00:03:23,120
Let's try to Google. Oh, this is an honor.

39
00:03:23,120 --> 00:03:29,180
It's the first time I've seen this particular area. I love new areas like moving slow concurrency.

40
00:03:29,960 --> 00:03:34,970
It takes a type error, invalid argument and then adds, Wow.

41
00:03:35,090 --> 00:03:38,350
Okay. Um. Yeah.

42
00:03:38,720 --> 00:03:48,260
Let's go to the source and maybe let's get rid of this and just say format.

43
00:03:48,290 --> 00:03:54,890
What kind of format would you like to want to make a similar word, doc or a ultra PDA format?

44
00:03:55,940 --> 00:04:02,030
Colon PDA. And I don't know if this matters, but I think that's supposed to be like, okay, and then should that be?

45
00:04:02,270 --> 00:04:06,490
Doesn't need to be for that. No. Okay.

46
00:04:09,380 --> 00:04:12,700
Whew. Oh, I know.

47
00:04:14,570 --> 00:04:19,510
Okay, so we're closer to something called 25.

48
00:04:19,900 --> 00:04:23,790
So this is one of the things when we're working on our personal computers are like, uh,

49
00:04:23,890 --> 00:04:30,430
these additional install requests that'll come up along the way and we can work through those together and.

50
00:04:33,510 --> 00:04:38,820
Something else I noticed in the homework. A couple of people like Flip the fraction.

51
00:04:39,210 --> 00:04:42,300
That's also totally normal. Make typos, make mistakes. I do this as well.

52
00:04:42,480 --> 00:04:45,780
But what I want you to remember is the logic. Check your work.

53
00:04:46,140 --> 00:04:49,680
So this should be something that you have access to the Internet,

54
00:04:49,680 --> 00:04:54,240
to outside resources to get an idea of what the value of the boiling point of water should be here.

55
00:04:54,450 --> 00:04:59,400
So I'm going to go through that cycle in your head of what do you expect, what do you get and do they match?

56
00:04:59,790 --> 00:05:03,119
So if you get a value of 87.5, does that matter?

57
00:05:03,120 --> 00:05:06,200
Expectations. Not. So we're probably going.

58
00:05:07,140 --> 00:05:10,080
That's like a sign for us to go back in and troubleshoot our code.

59
00:05:10,620 --> 00:05:15,899
So when you're working on projects and ah, it's not, you're not alone, you can use other resources,

60
00:05:15,900 --> 00:05:21,959
you can use other fields of study you work through to think through and make sure you're not just,

61
00:05:21,960 --> 00:05:29,910
um, kind of like automatically accepting the values that gives you that you're doing this logic check to see if they do they make sense for you.

62
00:05:33,360 --> 00:05:38,339
Um, and somebody else there was like, there was a little bit of confusion between these symbols.

63
00:05:38,340 --> 00:05:44,129
Can anybody help me out? What's the difference between a upward facing carrot and an asterisk?

64
00:05:44,130 --> 00:05:50,250
What are those two different things, I mean, and ah, yeah, the upward carrot is sort of power.

65
00:05:50,430 --> 00:05:53,549
Yeah. Versus the ostracism. Yeah.

66
00:05:53,550 --> 00:05:57,870
So this would be saying Z squared versus this is Z times two.

67
00:05:58,230 --> 00:06:04,200
So little subtle things and we'll get more familiar with the keyboard symbols of how are was going to interpret that.

68
00:06:04,980 --> 00:06:11,790
Is there anything else that was. Um, people are curious about things that there's been some really nice discussion posts.

69
00:06:11,790 --> 00:06:15,359
People have been really constructive and helpful with each other on there.

70
00:06:15,360 --> 00:06:18,390
I've, I've been excited to see those conversations take place.

71
00:06:18,750 --> 00:06:22,350
Anything else people I want to talk about with respect to that first one I've seen with.

72
00:06:24,440 --> 00:06:27,890
There's no penalties if you haven't done it yet. So get that in.

73
00:06:30,790 --> 00:06:37,609
Does the general question, I guess. When I generated my arm down, I just get the output, you know, as it is traditionally shown in art.

74
00:06:37,610 --> 00:06:41,270
Do you want that? Like, is that fine or do you want it written in a statement like the.

75
00:06:42,890 --> 00:06:43,480
Oh, yeah.

76
00:06:43,490 --> 00:06:51,020
So if you were using the like, template for the homework I gave you, you might have noticed the set at the bottom, like in Interpret Your House here.

77
00:06:51,290 --> 00:06:58,100
And that's a habit I'd like you to get in right now. It might feel silly because there's only one value in the output, but in the future,

78
00:06:58,400 --> 00:07:02,540
like if we're doing a T test or something an hour, there's gonna be a whole paragraph of output.

79
00:07:02,750 --> 00:07:09,390
So I'm going to really get in the habit of when R provides us values, we pull out what are the meaningful aspects of it.

80
00:07:09,440 --> 00:07:16,370
So that initially building that habit, when it's a quite straightforward example, might feel kind of silly.

81
00:07:16,370 --> 00:07:22,099
But well, I assure you we will have much more complex output for the future.

82
00:07:22,100 --> 00:07:31,160
That's a great point. All right.

83
00:07:31,180 --> 00:07:36,280
What are we learning last time? So objects are anything we give a name to.

84
00:07:36,280 --> 00:07:39,700
And this is where we're going to hold our data. We hold graphics in there.

85
00:07:39,700 --> 00:07:44,829
We can put all kinds of make all kinds of things on object. How do we assign an object, a name?

86
00:07:44,830 --> 00:07:49,660
What's the character expression or the operator expression that we learn how we assign something name?

87
00:07:54,280 --> 00:08:00,100
Yeah. Oh, you could do like a equals something or like the arrow pointing to.

88
00:08:00,880 --> 00:08:06,730
Exactly. We got two ways we could do it. Both of them work. So whatever value you want, say it's like a value of five.

89
00:08:07,030 --> 00:08:15,850
We can use that left facing era. So be it. Dash and here at pointing to the left and whatever you want that name to be like what?

90
00:08:16,270 --> 00:08:21,930
Literally any any name you want. So this will say take the value of five and assign it to the name carats.

91
00:08:22,330 --> 00:08:26,020
You could also an equivalent statement would be to use a single equals sign.

92
00:08:27,850 --> 00:08:32,170
I like to use the two character expression because it reminds me to read my code of Right to Life.

93
00:08:33,190 --> 00:08:37,030
So whatever the name of the value is going to be is on the left. So take a value of five.

94
00:08:37,210 --> 00:08:44,650
Now the new name of the object is left here. So whichever flavor you like, you'll start to develop your own personal, ah, coding style.

95
00:08:46,260 --> 00:08:51,300
What? What are some types of objects we learned about? Hey, Ray, give me the name of a type of object.

96
00:08:53,200 --> 00:08:58,090
Exactly. Yeah. Vector vectors are what we've got when the data are only in one dimension.

97
00:08:59,170 --> 00:09:02,830
So we've got values that only going one dimension.

98
00:09:02,920 --> 00:09:07,960
This is going to be a vector. Vectors have values.

99
00:09:08,500 --> 00:09:17,680
They also have position information. So those positions are it matters which value is in spot one, what values in spot two.

100
00:09:17,890 --> 00:09:21,070
And so they're not just like scrambled eggs. They're in specific positions.

101
00:09:21,880 --> 00:09:25,780
What symbol do we think of? And ah, so we learned about this assignment.

102
00:09:25,780 --> 00:09:30,100
Operator What's the symbol we think of when we're talking about positions of an object?

103
00:09:32,690 --> 00:09:40,340
Yeah. Square brackets. So we're going to use those square brackets any time we want to refer to a position in a vector so we can have carrots,

104
00:09:40,550 --> 00:09:47,300
so we can have the name of the object. And then what's the value of carats in position one.

105
00:09:47,570 --> 00:09:54,590
So I would have a value of five. So you put the name of the object inside brackets to refer to what position you want to talk about.

106
00:09:55,310 --> 00:10:01,900
We learned about a couple of different types of vector, so in R you can have as many values as you want.

107
00:10:02,270 --> 00:10:07,760
And I've done some up to like 25 million. But what our ones is all of the values to be the same type.

108
00:10:08,800 --> 00:10:11,050
So what are some types of values that we could have?

109
00:10:11,290 --> 00:10:17,710
Can anybody give me an example of a type of a value we could put in this sector that we've got merit?

110
00:10:19,990 --> 00:10:22,569
And then there's like a couple of subtypes of those that'll come up.

111
00:10:22,570 --> 00:10:32,170
There's an integer and a double which this can't have decimal places just can have doesn't they're all only in the family.

112
00:10:32,770 --> 00:10:36,520
So that would be if there's numbers in these values, what's another type of vector we could do?

113
00:10:38,420 --> 00:10:41,920
Well, you know, I don't know.

114
00:10:42,060 --> 00:10:45,440
Yeah, that's factor. Yeah, we have a factor.

115
00:10:45,440 --> 00:10:53,720
So this is like a categorical variable. So a factor, we put some boundary down and we say, you can only have these values.

116
00:10:54,410 --> 00:10:59,270
So your factor values might be low, medium and high or your factor values might be.

117
00:10:59,270 --> 00:11:05,030
Um. Michigan. Ohio. Illinois. So it's like you're putting it can't be every value in the universe.

118
00:11:05,030 --> 00:11:07,070
There's only certain levels that are allowed in there.

119
00:11:07,250 --> 00:11:13,130
So most of our epidemiologic categorical variables will try to convert to factors along the way.

120
00:11:13,670 --> 00:11:20,880
What's another type of factor out? Okay.

121
00:11:21,620 --> 00:11:28,759
That character. So this would be for this is a little more free flowing than a factor because this could literally

122
00:11:28,760 --> 00:11:35,420
have anything in there that you want to express in words and the way in which we start.

123
00:11:35,500 --> 00:11:42,530
And that character expression will be one quote. So going to start on that for each entry in my character's question.

124
00:11:43,220 --> 00:11:51,220
So if your data are collected like this is a little bit more data cleaning because somebody might have misspelled a state or something like that.

125
00:11:51,230 --> 00:11:54,950
So this will be kind of foreshadowing for data management.

126
00:11:56,000 --> 00:11:59,990
We might spend some time with the data collected as a character. We might try to convert it to a factor.

127
00:12:02,030 --> 00:12:07,700
It's another type or I'll do it. I think these are the three main ones, but mostly is they.

128
00:12:08,000 --> 00:12:13,880
Yeah, these are going on and I'm going to put that off till like class three or four until we get into that.

129
00:12:15,320 --> 00:12:25,040
Yeah. It's specific types of for time and data information and then the last one is called logical and that ends with trues and false.

130
00:12:25,910 --> 00:12:28,760
And this is useful for when we want to ask our questions.

131
00:12:29,090 --> 00:12:36,979
So we might ask questions like is the list of participants in this visit one identical to visit to tell us.

132
00:12:36,980 --> 00:12:40,040
True, false, true, true. So this is useful.

133
00:12:40,550 --> 00:12:45,950
We use this type of information to ask our questions so you can have as many values as you want in a vector,

134
00:12:46,250 --> 00:12:48,920
but you want all of the values to be of the same type.

135
00:12:50,260 --> 00:12:55,120
Certain functions which we'll talk about today, only are applicable to different types of information.

136
00:12:55,630 --> 00:12:59,890
So this is object types that have information in one dimension, a vector.

137
00:12:59,900 --> 00:13:06,300
What if you have information in two dimensions where we call that? Returns to.

138
00:13:08,140 --> 00:13:11,770
What's this about in our matrix? Yeah, we could call it a matrix.

139
00:13:11,770 --> 00:13:15,280
Or just the other name that is different.

140
00:13:16,770 --> 00:13:20,370
And they're very similar. What's different about these two?

141
00:13:21,030 --> 00:13:25,350
It's kind of subtle. Matrix wants every column to be the same vector type.

142
00:13:26,190 --> 00:13:27,960
So every column would have to be numeric.

143
00:13:28,260 --> 00:13:34,229
But if you want one column to be numeric, one column to be character, one column to be logical, then you're going to have a dataframe.

144
00:13:34,230 --> 00:13:40,620
So different is a little bit more flexible. It lets you have different types of informations in the columns, but it wants all.

145
00:13:40,620 --> 00:13:45,300
It treats each column like a vector. It wants the same information type in each column.

146
00:13:46,130 --> 00:13:48,420
All right. So we're going to always arrange our data set.

147
00:13:48,420 --> 00:13:54,960
This will be part of data cleaning to put our variables in the columns and our participants in the rows generally.

148
00:13:56,190 --> 00:14:01,950
So if we want to use those square brackets to index around and talk about positions in this dataframe,

149
00:14:02,250 --> 00:14:06,420
now we have to have coordinates in two dimensions. Right? So how do we do that?

150
00:14:06,420 --> 00:14:10,230
What if we're calling this one? I don't know, potato.

151
00:14:10,680 --> 00:14:15,749
We've got a different problem, potato. And how do we find this position right in here?

152
00:14:15,750 --> 00:14:24,510
What am I going to do with these square brackets? What do you call a five room club?

153
00:14:24,820 --> 00:14:27,850
The flat. So row is always going to want rows.

154
00:14:28,770 --> 00:14:29,640
Common problems.

155
00:14:30,180 --> 00:14:35,190
And there's not, like, too many things you have to memorize that are but are always going to give you the rows first, the column second.

156
00:14:35,400 --> 00:14:39,110
So if we want disposition, those are the same X and Y.

157
00:14:39,120 --> 00:14:44,550
Let's do this one. So this would be row two, comma column three.

158
00:14:45,890 --> 00:14:52,200
Okay, so rows, that's how we do positional information in a in a dataframe or matrix,

159
00:14:53,340 --> 00:14:59,700
we get another special symbol in a dataframe because oftentimes I'll forget which columns,

160
00:14:59,700 --> 00:15:04,379
which in terms of numbers, we can provide names of column information.

161
00:15:04,380 --> 00:15:08,340
Can anybody remind me what's the symbol? We used to refer to columns by their name.

162
00:15:09,030 --> 00:15:18,940
That's the dollar sign. So if we want to put names on these columns, those I'm like with Excel where like the column names would be real one.

163
00:15:19,150 --> 00:15:22,710
Here, that's like information on top of the data from another matrix.

164
00:15:23,020 --> 00:15:27,400
So here I might have a column called Tomatoes.

165
00:15:28,060 --> 00:15:34,210
I might have a column called Lettuce. I might have a column called Cucumbers or something.

166
00:15:34,920 --> 00:15:40,360
I don't know who's in my theme here, but so this to find out this column would be potato.

167
00:15:42,340 --> 00:15:49,000
Dollar sign. Q. So you're going to use the dollar sign or fur to which color?

168
00:15:49,690 --> 00:15:54,120
So if this like square brackets works better for you, square brackets in the numbers use that.

169
00:15:54,390 --> 00:15:57,420
If the dollar sign in the column name works better for you, then use that.

170
00:15:57,810 --> 00:16:00,690
This is how we're going to start to develop our own personal style with our.

171
00:16:00,870 --> 00:16:06,389
And it's totally fine if your homework and your colleagues homework, you take different approaches to solving things.

172
00:16:06,390 --> 00:16:09,430
That's. That's a wonderful thing to be celebrated. We're not looking for you.

173
00:16:11,540 --> 00:16:16,120
Think this hit on a different object. Things I want to talk about. Yeah, we talked about the square brackets and the dollar sign.

174
00:16:16,360 --> 00:16:21,610
Is there anything else people want to talk about from last class that we didn't hit on in this recap?

175
00:16:33,020 --> 00:16:35,419
I'd like to do. I think I have a missing side here.

176
00:16:35,420 --> 00:16:46,249
I'd like to jump into the coding aspect because we need to finish coding up all of our objects so we can follow our link.

177
00:16:46,250 --> 00:16:50,720
It's later on in the slides but it's also on our home page for Canvas.

178
00:16:51,020 --> 00:16:56,750
This we're going to navigate into the function and it's the same.

179
00:16:59,230 --> 00:17:02,410
Posit this like at length.

180
00:17:02,410 --> 00:17:06,790
This is a similar use on the graph. If you haven't joined yet.

181
00:17:06,790 --> 00:17:14,650
If this is your first week, you can join our class session here. Then jump into this positive workspace, which I already have open.

182
00:17:24,930 --> 00:17:30,680
All right. So let's pause for a second. Is there anybody who has having trouble accessing our plaza for the class?

183
00:17:30,690 --> 00:17:34,230
Because this is one of those check points where I'm not sure everybody's in here.

184
00:17:37,920 --> 00:17:41,250
Yeah. It's my first one. Hey, welcome.

185
00:17:41,660 --> 00:17:46,470
Yeah, let me add you to the canvas site, and then you'll have all these links.

186
00:17:48,110 --> 00:18:00,540
Nice. Do you mind sharing with me or you meet me?

187
00:18:01,170 --> 00:18:04,560
It's t h.

188
00:18:05,280 --> 00:18:10,350
Hey, give this what you need. Thank you. This is Wednesday section.

189
00:18:12,380 --> 00:18:16,900
Hurford. Welcome to our. Thank you.

190
00:18:17,140 --> 00:18:22,150
Yes. All right.

191
00:18:22,150 --> 00:18:27,550
So if anyone was not here last time, we're going to see a copy.

192
00:18:27,880 --> 00:18:35,770
So here's my answer. This is very simple. Here's my instructor class project.

193
00:18:36,190 --> 00:18:39,280
If you might remember from last time, only one person can be in here at a time.

194
00:18:39,280 --> 00:18:42,850
So if you go in, we're going to ping pong each other out. An alternative approach.

195
00:18:43,160 --> 00:18:48,309
I mean, put this on top. You got to make your own copy. If you were here last week, you already have your own copy.

196
00:18:48,310 --> 00:18:52,510
So you can click to rejoin that. But I'm just going to click to grab on to this.

197
00:18:54,760 --> 00:18:58,810
Happy. I have so many sections of the fast.

198
00:19:04,100 --> 00:19:24,200
We're finishing center. Okay.

199
00:19:24,320 --> 00:19:29,000
All right. So I'm going to open up in the from the lower right hand corner. I'm gonna open the class mark now.

200
00:19:32,810 --> 00:19:37,720
So that get me the four panels we've, uh, started to become familiar with.

201
00:19:39,300 --> 00:19:42,510
And I'll scroll down. I have in my notes some left.

202
00:19:45,090 --> 00:19:48,299
Around here so somewhere around make your first are objects.

203
00:19:48,300 --> 00:19:55,290
Is that consistent with other people? If you're ever looking for one to navigate, there's a button here that's helpful called outline.

204
00:19:56,720 --> 00:20:01,880
And this can help you navigate to those different headers that I've been using.

205
00:20:01,890 --> 00:20:05,240
So we're going to go to the header on making our first our objects.

206
00:20:07,740 --> 00:20:15,130
We can close this outlet at any time that we need more space. All right, so I'm down here on this.

207
00:20:16,070 --> 00:20:20,870
Code chunk about making objects. If we want, we can.

208
00:20:22,250 --> 00:20:26,060
This is a helpful button. If we want to run all the previous code chunks.

209
00:20:26,570 --> 00:20:35,330
You may have already done that in LastPass, but you can hit this downward facing era and this will run all of the previous code chunks.

210
00:20:35,480 --> 00:20:39,080
So that's kind of like a way of catching us all up if you didn't run those last.

211
00:20:42,250 --> 00:20:47,260
All right. We're going to make our first objects and let's do that logic text initially.

212
00:20:47,260 --> 00:20:52,460
So let's think think this. What do you think is going to happen when we run this code line 80?

213
00:20:52,480 --> 00:20:55,810
There might be a different number for you based on how many notes you're taking. No problem.

214
00:20:56,110 --> 00:21:00,480
But what do you think is going to happen when we run? Can anyone talk me through this line of code in words?

215
00:21:00,490 --> 00:21:10,640
What do you think is going to happen here? Yeah. You're. Beautiful.

216
00:21:10,810 --> 00:21:15,850
So we're taking the value of five and we're assigning it as a new object that we're naming number of apples.

217
00:21:16,090 --> 00:21:19,329
So that's like empty environment over here. So sad.

218
00:21:19,330 --> 00:21:22,810
There's no object. I'm expecting this to make us our very first object.

219
00:21:23,320 --> 00:21:25,270
Can anybody remind me, how do we run code?

220
00:21:25,270 --> 00:21:30,610
So it's one thing to type the code in our source editor, but how do we actually like submit the code to our.

221
00:21:30,640 --> 00:21:34,030
Can anybody remind me, are there any options we have for running a line of code?

222
00:21:34,510 --> 00:21:38,919
Course. Yeah, we can do control enter or command enter.

223
00:21:38,920 --> 00:21:42,370
We got two options for keystroke commands and you may think of another way to do it.

224
00:21:43,120 --> 00:21:49,360
Yeah. You can select the line of code and then hit run. Yeah, we can select it or put our cursor anywhere on that line.

225
00:21:49,600 --> 00:21:53,050
And then there's a button here for run. Right? So we're on this.

226
00:21:53,620 --> 00:22:00,460
And what do you see? We popped up a new object in our environment, has the name and number of apples and has a value of five.

227
00:22:01,330 --> 00:22:04,660
I see we've got our first object and all we have to do was assign a name.

228
00:22:05,110 --> 00:22:11,280
Yeah, yeah, I can tell you input.

229
00:22:13,480 --> 00:22:22,270
Oh, yeah, yeah. If you want there. If you have other values in the home, in the environment, they probably won't interfere.

230
00:22:22,270 --> 00:22:28,870
But if you ever want to clear them. There's a function and we'll learn about functions on our next section.

231
00:22:29,080 --> 00:22:38,770
It's called Remove or Arm. Ah M and then parentheses and you can list what values you want to remove.

232
00:22:39,400 --> 00:22:42,610
So whatever you made in your homework, you were wrong. And I want you to do it.

233
00:22:42,790 --> 00:22:51,980
There's this little broom. So you get this little broom and that will clear all the objects in your workspace so you can do it with a click button.

234
00:22:52,180 --> 00:22:55,720
You could do that with a command in your code.

235
00:22:56,560 --> 00:22:59,830
Yes. I always think of objects kind of as temporary, as ephemeral.

236
00:23:00,010 --> 00:23:06,640
But what is what I'm saving and what I can always do is the code so that I can regenerate all my objects if I need to.

237
00:23:10,550 --> 00:23:16,760
All right. So we've got one object up here and we want to see what it is to double check.

238
00:23:17,810 --> 00:23:25,310
I can run this line of code. I'm essentially asking our. What is the number of Apple's object?

239
00:23:25,730 --> 00:23:33,140
And it tells me the number of apples is an object with a value of five in position one.

240
00:23:33,260 --> 00:23:36,800
So we're using a square brackets to tell us what position it's in.

241
00:23:39,020 --> 00:23:43,940
We can make another object here at the cost of the wall.

242
00:23:44,180 --> 00:23:49,170
And I once got a value of $0.55. I'll make another object.

243
00:23:49,180 --> 00:23:52,750
I'm calling it tax so that in Michigan would have a value of 7%.

244
00:23:54,130 --> 00:23:58,360
So now we've got three objects. And they're all having value.

245
00:23:58,420 --> 00:24:04,450
They all have only one position. But once we have those, we can start playing around with them, just like we were doing with.

246
00:24:07,360 --> 00:24:12,009
Like keyboard mathematical operators. So we can start adding them together.

247
00:24:12,010 --> 00:24:14,350
We can start subtracting, not multiplying them.

248
00:24:14,770 --> 00:24:18,880
So once you've got objects, you can start treating them similar to how we were treating numbers before.

249
00:24:19,990 --> 00:24:23,480
So what am I doing here? Can anybody help me with this line of code?

250
00:24:23,500 --> 00:24:28,060
What do you think I'm doing with this line of code? That for me is why maybe Faulkner would talk me through that.

251
00:24:33,050 --> 00:24:37,760
Yes. I'll be multiplying the number of copies by the cost and assigning to do, of course.

252
00:24:38,330 --> 00:24:41,380
Yes. We're going to take those two objects were multiplying by each other.

253
00:24:41,390 --> 00:24:47,870
We're doing that using the Astros for multiplication. And instead of just looking at the output, we want to we want to send that as a new object.

254
00:24:48,080 --> 00:24:52,460
So once you have a couple of objects, it's like you can start using them to create more and more objects.

255
00:24:53,900 --> 00:25:00,380
Now we can check to see what that is. We see that the cost of an apple without taxes to 75 or something.

256
00:25:03,220 --> 00:25:05,690
Now we can calculate the cost with tax.

257
00:25:05,930 --> 00:25:15,230
So it's just by way of an example that you can start using these mathematical symbols that we learned earlier in combination with objects.

258
00:25:19,040 --> 00:25:23,719
So far, these have been objects that only have a length one. Let's make it a little more complicated.

259
00:25:23,720 --> 00:25:27,350
Let's have objects that have vector objects that have a longer length.

260
00:25:31,030 --> 00:25:34,839
So first I'm going to ask you a question. And this is using a function called length.

261
00:25:34,840 --> 00:25:37,390
We'll spend some time talking about functions coming up, for example.

262
00:25:37,660 --> 00:25:44,620
But here I'm asking are how long is the number of Apple subjects we say that has a length of one.

263
00:25:44,710 --> 00:25:50,530
So there's just one value in there that's consistent with our expectations of this, that it only has one value.

264
00:25:52,870 --> 00:25:56,440
But now I'm going to try something else. I'm going to try it.

265
00:25:56,460 --> 00:26:03,070
I'm going to say take the values of one, two, three and four and assign that as the number of Apple's objects.

266
00:26:04,180 --> 00:26:10,200
Do you think we're going to get any kind of error or warning or anything that we are basically writing over our dataset?

267
00:26:11,740 --> 00:26:15,970
So we already have something with this name. Now I'm going to assign something else with this name.

268
00:26:16,000 --> 00:26:21,210
Do you think God is going to tell us? Now this is a helpful example.

269
00:26:22,020 --> 00:26:26,940
That might be one of those things we have to learn over and over again. But I will not give you a warning.

270
00:26:26,940 --> 00:26:32,550
I assume you know what you're doing. And let's watch what the number of apples is going to change from a value of five.

271
00:26:34,240 --> 00:26:37,360
So now it's become an integer object with values.

272
00:26:37,360 --> 00:26:40,750
One, two, three, four and position, hoping for no warning, no error.

273
00:26:41,180 --> 00:26:44,710
And so it's very easy to overwrite your data without knowing.

274
00:26:45,250 --> 00:26:51,460
So you want to keep in practice developing your workflow to, like, keep your original data set the same.

275
00:26:51,640 --> 00:26:53,490
And as you're making changes along the way,

276
00:26:53,490 --> 00:27:01,090
I kind of make a copy of that so that if you ever need to go back to the original dataset, that is like completely intact.

277
00:27:02,920 --> 00:27:06,129
You can see what that looks like. We saw that has the values.

278
00:27:06,130 --> 00:27:10,850
One, two, three, four. Here is an equivalent way to generate a vector.

279
00:27:11,590 --> 00:27:16,570
That's exactly the same. This is what a function called C for the combined function will learn about.

280
00:27:16,780 --> 00:27:22,140
So it's essentially saying combine the numbers one, two, three and four into a vector called number of apples.

281
00:27:23,630 --> 00:27:28,340
So we got the same thing, multiple ways of generating the same information.

282
00:27:28,700 --> 00:27:33,050
This C functions a little bit more flexible because we can provide the values in different orders.

283
00:27:33,860 --> 00:27:39,200
So again, I keep overwriting this object so we're a little or it's a number of Apple's object

284
00:27:39,200 --> 00:27:44,150
keeps being overridden and now we can see it's changed the values have changed position.

285
00:27:48,280 --> 00:27:51,909
An equivalent way to cut all of this is with a C function that we learn about.

286
00:27:51,910 --> 00:27:57,190
So this is counting from the number one to the number for counting by one, right?

287
00:27:57,190 --> 00:28:00,700
So lots of ways to develop these kinds of vectors.

288
00:28:01,030 --> 00:28:04,630
And now we can ask, how long is that vector? We see that vector has a length of four.

289
00:28:04,810 --> 00:28:09,990
Yeah, I suppose one in no over three sectors.

290
00:28:10,900 --> 00:28:14,590
Why do you need the seed coming in?

291
00:28:14,590 --> 00:28:18,010
Like to order this, like for homework. Never sure.

292
00:28:18,010 --> 00:28:21,420
But I was just wondering when he was back. When he was healthy or something.

293
00:28:21,550 --> 00:28:26,230
Yeah. Very. Oh yeah. So that would be super long.

294
00:28:26,230 --> 00:28:33,750
Right. If you were trying to do. This type of strategy with the C function and try to count yourself all the way up to a thousand.

295
00:28:33,750 --> 00:28:41,219
I would probably make a mistake along the way right out of my skip number like 72 or something, and that's how I'm going to use of our time.

296
00:28:41,220 --> 00:28:45,150
So in that case, we probably would want to use one of these counting functions.

297
00:28:45,390 --> 00:28:52,110
So this will count from 1 to 1000 by one so we can use one of these more like

298
00:28:52,110 --> 00:28:56,579
the C function might be useful quickly if as a short a few number of things.

299
00:28:56,580 --> 00:29:01,590
But here in that case, we might want to use a more specialized function to help us count without errors.

300
00:29:01,590 --> 00:29:04,740
In that case, yeah. It was going to have this thing in the C.

301
00:29:06,330 --> 00:29:13,350
Yeah. Perfect. Yeah. I guess I was wondering where that C function you have to include the five one.

302
00:29:13,830 --> 00:29:18,389
Will it automatically by default think it's what I want. Yeah, let's check that out.

303
00:29:18,390 --> 00:29:24,540
So this is great experimentation. So what happens if I do this same line of code?

304
00:29:27,420 --> 00:29:31,080
And if I delete this option at the end, the buy equals one.

305
00:29:32,280 --> 00:29:35,390
All right, so this was what happened when we had it in there.

306
00:29:35,400 --> 00:29:40,530
Let's see what happens when I leave it out. We got the exact same thing.

307
00:29:41,100 --> 00:29:45,960
And that's because that buy one is the default. And we'll talk about this when we talk about functions.

308
00:29:46,170 --> 00:29:51,660
So we can look this up in the Help viewer. Every time we look up and we work with a new function, we can look it up.

309
00:29:53,480 --> 00:29:56,830
So the default setting is the count by one and an hour.

310
00:29:56,840 --> 00:30:02,420
If you ever want to use the default, it's totally up to you whether you want to write it or not.

311
00:30:02,700 --> 00:30:11,660
And you could develop your style of coding. Do you do you like it to be more verbose, more complete, or do you like to have very succinct, short code?

312
00:30:12,230 --> 00:30:16,700
So these are equivalent statements. You can always if it's a default setting, you can always omit.

313
00:30:18,500 --> 00:30:25,960
So great question. And whenever I'm curious about something like that, I'll just try to be like, Well, what happens if I leave this out?

314
00:30:26,230 --> 00:30:30,340
What happens if I do that? It is a great way to approach it.

315
00:30:36,830 --> 00:30:40,820
We can also do addition, subtraction, division.

316
00:30:41,090 --> 00:30:52,970
All of these things start to get more familiar with these key commands in our one that I think we haven't seen yet is this double equals sign.

317
00:30:53,870 --> 00:30:56,330
This is asking, are that true false question?

318
00:30:57,620 --> 00:31:05,150
So because the single equals sign already has a job, the single equal sign is already with this assignment vector.

319
00:31:05,450 --> 00:31:09,080
If we want to ask if things are truly equal, we have to use two equal signs.

320
00:31:09,410 --> 00:31:12,590
So here I'm asking our question is this vector equal to this vector?

321
00:31:12,590 --> 00:31:17,419
Which of course they are. I just get the same thing twice. But then it tells us, okay, I'm position one.

322
00:31:17,420 --> 00:31:21,380
It's true in position to. It's true. Position three, it's true. Position four, it's true.

323
00:31:21,620 --> 00:31:26,570
So I do this kind of thing often if I have. Okay, here is my list of participants who came to the first visit.

324
00:31:27,080 --> 00:31:32,629
Here's my participants who came to the second visit. Did did we make did everybody come back?

325
00:31:32,630 --> 00:31:35,750
Is that all true or do we have some false in there? Were people only made one.

326
00:31:36,050 --> 00:31:39,500
So this is going to be a useful kind of data set checks along the way.

327
00:31:42,810 --> 00:31:46,380
Numeric information. Let's make a character vector.

328
00:31:51,210 --> 00:31:55,050
The important thing here are making character of actors is that we give all the

329
00:31:55,050 --> 00:31:59,540
character expressions with quotes around them and they always have to be pair.

330
00:31:59,550 --> 00:32:06,390
So this is where your pattern recognition will be useful because if you ever notice a situation where like you're.

331
00:32:09,330 --> 00:32:12,600
All of your other code beyond it starts to turn green.

332
00:32:12,600 --> 00:32:18,690
Like here, my parentheses turn green. That's because I forgot my second quote.

333
00:32:19,320 --> 00:32:24,990
So any time you start to notice the patterns change, there might be an issue.

334
00:32:25,200 --> 00:32:32,760
And I just deliberately deleted that and then put it back. But so all of our all of our character expressions, we have paired quotes around it.

335
00:32:32,970 --> 00:32:38,730
You can see there can be spaces in there. No problem. And each element will be separated by commas.

336
00:32:39,940 --> 00:32:46,630
So here I'm saying take these four different foreign names and assign it as a vector I'm calling fruit farms.

337
00:32:46,870 --> 00:32:52,210
So we're expecting now a new vector to show up over here. That's a character vector.

338
00:32:56,520 --> 00:32:58,830
All right. So this is the first time we've seen a character actor.

339
00:32:58,840 --> 00:33:04,230
You can see how it has a different format here as opposed to introducing off the character.

340
00:33:04,440 --> 00:33:12,500
And it shows us that it has positions one through four. We can look at it in our output and see what it's looking like here.

341
00:33:14,060 --> 00:33:23,900
Our output. If we want just short versions of the name, we can provide those for make make some character actors.

342
00:33:24,740 --> 00:33:27,920
Let's check in. Let's see how we're doing. I want you to try this yourself.

343
00:33:28,310 --> 00:33:31,880
So am I going to make a new code chunk where you're going to make your own vector?

344
00:33:32,450 --> 00:33:36,980
And I want it to contain at least two recent books you read or two movies you've seen.

345
00:33:37,550 --> 00:33:41,090
So call it either a book or a movie based on the type of information you're providing.

346
00:33:41,870 --> 00:33:45,650
And let's see if we can make a new vector that'll show up in your environment.

347
00:33:47,090 --> 00:33:52,370
USR colleagues usr neighbors are as a community spore.

348
00:34:03,620 --> 00:34:14,330
I don't know what to do.

349
00:34:14,930 --> 00:34:25,270
I'm on the campus page. I'm working here.

350
00:34:25,450 --> 00:34:30,710
You should be like, Are you trying to say yes?

351
00:34:31,340 --> 00:34:35,210
Or I know there's a slightly different thing that you wanted to do, you know,

352
00:34:35,650 --> 00:34:42,980
so that was to make a long and then the next one down is the only thing that we've done is this.

353
00:34:43,950 --> 00:34:58,530
Well, very well. Just recently or now I just finally, you know, and then they like I want to make one number so there's a high probability.

354
00:34:59,100 --> 00:35:02,550
What on being able to, um, you know, go towards that.

355
00:35:03,600 --> 00:35:06,860
Yeah. It's nice to see the charm of these.

356
00:35:07,320 --> 00:35:15,390
Oh, right. Oh, yeah, yeah, yeah.

357
00:35:16,550 --> 00:35:21,940
To have you. Yeah, I guess not all of them.

358
00:35:22,340 --> 00:35:33,490
Yeah, yeah, yeah. Is there anything that you might be able to do?

359
00:35:33,600 --> 00:35:37,970
I mean, I know where they are. Yeah, yeah.

360
00:35:39,000 --> 00:35:45,270
This is a great question. So I was curious about this, like, tab separation I've got going on here.

361
00:35:45,270 --> 00:35:50,430
So it's like invented in space. Let's try it. Doing without that and see what works.

362
00:35:50,850 --> 00:35:53,880
I know you already personally checked this. Let's see what works.

363
00:35:56,430 --> 00:36:00,990
So if I want to put these all on the same line with no spacing between them.

364
00:36:03,300 --> 00:36:08,310
Do that. I can't sleep. I know, right?

365
00:36:08,550 --> 00:36:12,240
Yeah. It's definitely nothing to do with you.

366
00:36:14,070 --> 00:36:17,220
And then if I run that line of code, we got the exact same thing.

367
00:36:17,300 --> 00:36:19,560
I wish I had. These are lines of code.

368
00:36:20,250 --> 00:36:29,790
Personally, I find it easier to visualize and make sure that I have both quotes and that I know each line with a comma if I separate them that way.

369
00:36:30,000 --> 00:36:32,700
But if you want them all like this, that's totally fine.

370
00:36:32,940 --> 00:36:40,710
Our is going to ignore spaces is going to ignore enter signs as long as it's within the same parentheses.

371
00:36:40,720 --> 00:36:47,130
So it's because we open a parentheses. It's going to keep looking for that back end of the parentheses, even if it goes across lines.

372
00:36:47,700 --> 00:36:53,610
So this is just purely an esthetic choice. I like to spread things out this way, but you can do whatever you like.

373
00:36:53,850 --> 00:37:01,530
It's a great, great question. Yeah, my movies didn't turn green, but they like it.

374
00:37:01,530 --> 00:37:05,480
Went through it like it created the character who is interesting.

375
00:37:06,030 --> 00:37:12,510
Yeah. Oh, you're not in a code chunk.

376
00:37:13,020 --> 00:37:16,470
You're in the free space. Oh, okay, guys.

377
00:37:16,800 --> 00:37:21,490
So look first. Right so many times this year.

378
00:37:21,500 --> 00:37:26,840
How did they approach this? What's the first thing they did here when they're trying to do this, this activity?

379
00:37:28,490 --> 00:37:33,290
Yeah. So I clicked enter a couple times to give us some space and then we want to make a code chunk.

380
00:37:33,740 --> 00:37:40,430
So you hit that green C plus button to make a coaching and if you hover over it, there's also a keystroke command if you want to do it.

381
00:37:40,430 --> 00:37:43,999
I think it's control alt, high or command alt.

382
00:37:44,000 --> 00:37:48,760
If you're on a mac, you can hit those green C-plus. And now we have a coach.

383
00:37:49,090 --> 00:37:53,830
So now we're talking to her because back when we were just in the white part, this was just free text space.

384
00:37:53,840 --> 00:38:01,390
We're just giving some narrative information for ourselves, but we're only talking to our when we're inside one of these coaches.

385
00:38:01,780 --> 00:38:06,580
So what's the next thing we do? We've got space to work. What do you do when you're trying to make your best start?

386
00:38:06,640 --> 00:38:15,190
Anybody talk me through? Yeah.

387
00:38:15,460 --> 00:38:26,200
Well, I had the character name movie out and I used an equal sign that you can use the arrow sign and then he's actually some assignment operator,

388
00:38:26,200 --> 00:38:30,010
so you can use the left facing error or the equals sign, whatever you prefer,

389
00:38:31,150 --> 00:38:42,070
and then see parentheses and then your movies in quotes and then separated with the comma and then close the parentheses.

390
00:38:42,220 --> 00:38:47,260
Perfect. So I don't know what movie is said when you just watch everything everywhere all at once.

391
00:38:47,650 --> 00:38:54,130
And what's another movie that is relatively recent spacing out and thinking about books right now?

392
00:38:56,590 --> 00:39:01,650
Yeah. There you go. Glass, onion. And you can see that you can put spaces in there.

393
00:39:02,170 --> 00:39:07,990
But so what we want is each element has quotes around it and the elements are separated by commas.

394
00:39:08,410 --> 00:39:15,940
So we need pairs of quotes and we need pairs of parentheses so we can run that and we're now we can double check,

395
00:39:15,940 --> 00:39:22,330
we can type A here and see what did we make what we thought we did. Yeah, we made a better movie with those two elements and.

396
00:39:23,130 --> 00:39:29,350
You could talk me through it. Any questions you have, we always have to use the double click.

397
00:39:29,370 --> 00:39:33,550
So how does it work? What's in the last week? Oh, let's see. Does that work with single quotes?

398
00:39:33,580 --> 00:39:45,060
We'll get a shot. So even though we call this a test and see function and we produce a well, a single quote.

399
00:39:48,050 --> 00:39:51,960
And then give it a second thought. When.

400
00:39:56,880 --> 00:40:00,410
Does that work? And then do tests.

401
00:40:02,690 --> 00:40:08,020
That one works as well. The other thing that was a little bit troublesome for me, I don't know if you noticed that when I was typing,

402
00:40:08,230 --> 00:40:12,100
when I did my first double quotes, it automatically gave me the second one.

403
00:40:12,670 --> 00:40:18,790
And when I did my first apostrophe, it didn't give me a second one, so I had to type in that second one.

404
00:40:19,390 --> 00:40:25,220
Personally, I like ones where they're going to help remind me of the other one.

405
00:40:25,240 --> 00:40:36,700
You got a lot of options? Yeah. When I ran your code for fruit farms, it comes out with all different lines, but mine's just one line, like I'm here.

406
00:40:38,380 --> 00:40:43,040
Yeah. I just wondered how you did that. Oh, like how what?

407
00:40:43,180 --> 00:40:47,080
How it shows up in two columns here. Is this what you're talking about now?

408
00:40:47,100 --> 00:40:51,969
Sort of. Yeah. Mine came out in four columns. Is that just like that's how zoomed in we are?

409
00:40:51,970 --> 00:40:55,670
So if I were to zoom in a little bit more. It would.

410
00:40:56,180 --> 00:41:00,350
And I run this again. I'll run through France, okay?

411
00:41:00,890 --> 00:41:09,290
It'll show up in one column, and it's still the same information as the nursery self tantra and position one cabinet in position to.

412
00:41:10,250 --> 00:41:14,210
Everything's in the same position. It's just based on yeah that's good is I'm zoomed.

413
00:41:14,390 --> 00:41:19,830
If I zoom out really small I think we can put them all in the same. Yeah.

414
00:41:19,830 --> 00:41:23,280
There's all these, like. Works through it all here.

415
00:41:23,280 --> 00:41:28,040
That's what I'm going to two lines. So what it does, it is it'll tell you the position of the one at the top left.

416
00:41:28,050 --> 00:41:31,350
And this is saying teachers in position one, here's position two.

417
00:41:31,350 --> 00:41:37,140
I'm not telling you those position two, you just know that that's three. And then when we get to the new line, it's saying this is position four.

418
00:41:37,590 --> 00:41:40,650
So just tells you the positions of like the first one. So.

419
00:41:42,210 --> 00:41:48,060
And was there another hand that I met because I bring a lot of curiosity to this IRA, she said.

420
00:41:51,900 --> 00:41:54,660
All right, let's check back into the slides. We'll talk about functions.

421
00:41:54,720 --> 00:41:59,070
So this is one of those things and they've been coming up along the way, but we haven't formally talked about that.

422
00:41:59,100 --> 00:42:13,210
So. Our goal with functions is to learn how to implement them, to perform actions on data.

423
00:42:14,590 --> 00:42:18,520
So functions are verbs in the language of our these are our actions.

424
00:42:18,580 --> 00:42:21,130
This is how we're going to perform any kind of task in our.

425
00:42:21,490 --> 00:42:28,510
And so what functions we'll do is they'll accept some input object, and then they will provide some kind of transformed output.

426
00:42:29,170 --> 00:42:32,770
So there's a number of example based functions that are available.

427
00:42:32,770 --> 00:42:38,380
As soon as you open are, you don't even have to load anything and they play these have kind of intuitive hopefully means.

428
00:42:38,650 --> 00:42:45,610
So like mean would be if you want to calculate the average minimum if you want to calculate the minimum value in a vector.

429
00:42:45,910 --> 00:42:48,340
Max if you want to calculate the maximum value.

430
00:42:48,970 --> 00:42:57,010
So these are all actions we can take and perform on our objects and it will provide us some value on the other side.

431
00:43:00,430 --> 00:43:05,500
There's a basic structure to function coding that looks like this. So we'll provide the name of the function.

432
00:43:06,540 --> 00:43:08,820
And then there's going to be a round in parentheses.

433
00:43:09,270 --> 00:43:16,680
So that's your that's your tag, that's your sign, that's your signal that the whatever is preceding the round in parentheses is a function.

434
00:43:17,360 --> 00:43:23,310
Right? So I want you to be thinking whenever you see those round in parentheses, if there's a word in front of it, that's probably a function.

435
00:43:23,910 --> 00:43:30,450
Okay. So whenever we see rounded parentheses, they're always going to be pair and the word in front of it is going to be the function.

436
00:43:30,930 --> 00:43:35,970
And generally when you're providing a function, you perform it on some kind of object.

437
00:43:36,510 --> 00:43:40,530
So we got a function name and then here's the object that we want that action performed on.

438
00:43:41,310 --> 00:43:44,630
And then if you want, you can specify options after the comma.

439
00:43:44,670 --> 00:43:45,360
You don't have to.

440
00:43:45,390 --> 00:43:52,980
You can write down all the default settings, so you can just do a function object, close those parentheses and get out of there if you want to do it.

441
00:43:52,990 --> 00:43:58,110
If you want to change any of the options, that's going to be all separated by commas for each option you want to change.

442
00:44:02,890 --> 00:44:09,130
So if we run it like that. So here's our command prompt. This is the thing we don't type this is just are telling us it's ready to accept input.

443
00:44:09,670 --> 00:44:15,160
But if we provide this function on this object, then those results get printed in the console for viewing.

444
00:44:16,510 --> 00:44:21,460
Or you can take the output of that function instead of just looking at the output.

445
00:44:21,880 --> 00:44:25,120
We can assign that as a new object. You call it whatever you want.

446
00:44:25,810 --> 00:44:29,620
So we're starting to see that we can. The number of objects we can have can.

447
00:44:30,720 --> 00:44:34,200
Pearl proliferate dramatically, your environment can get really huge.

448
00:44:34,470 --> 00:44:36,720
So you can take that function, perform it on object,

449
00:44:36,900 --> 00:44:41,700
and assign it as a new object so that you can do things well that will do this all the way throughout the class.

450
00:44:41,700 --> 00:44:48,300
Like we might perform a regression, assign it as an object so that then we could plot that regression.

451
00:44:48,960 --> 00:44:53,790
So you can see how steps along the way in epidemiology that you might want to build on each other.

452
00:44:53,940 --> 00:44:58,340
And once you've done a function, you might want to use the output for that for something else.

453
00:44:58,350 --> 00:45:07,380
So everything all right, so the next step. That's the traditional like base on our way of coding.

454
00:45:07,620 --> 00:45:12,180
There's also a newer style of coding with a something called a pipe operator.

455
00:45:12,540 --> 00:45:17,910
So this is a three keystroke command and it's called the pipe.

456
00:45:19,500 --> 00:45:23,280
This is equivalent way of coding. So what I just showed you is on the side.

457
00:45:23,820 --> 00:45:26,820
So you can choose for yourself which style of coding is more intuitive for you.

458
00:45:28,450 --> 00:45:35,200
So running a function on an object is equivalent to saying Take that object and pipe

459
00:45:35,200 --> 00:45:39,970
it into the function so you can see which one of these makes more sense to you.

460
00:45:40,540 --> 00:45:45,040
I think the advantage of this one might be if you want to string a bunch of things together because

461
00:45:45,040 --> 00:45:49,329
you could take that object and pipe it into a ton of functions and you only have to type that object.

462
00:45:49,330 --> 00:45:55,930
Once I go back and forth, I do both times see which missile is more resonant with you.

463
00:45:58,940 --> 00:46:02,800
So this is helpful if you're if you're trying to perform multiple functions on contacts.

464
00:46:04,660 --> 00:46:09,970
So this three keystroke command the percent right place and arrow and another percent Mozart type operator.

465
00:46:09,980 --> 00:46:17,710
Yeah, if you are linking multiple functions, you put like copies in between them like median median, for example.

466
00:46:18,040 --> 00:46:28,450
But you are, you put more types of more oh so you could do like object type, mean pipe man type.

467
00:46:28,630 --> 00:46:38,190
Yeah. Every question. Where do these functions comfort?

468
00:46:39,810 --> 00:46:43,440
Where do we get them? They're stored in packages.

469
00:46:43,800 --> 00:46:52,140
Or you might see them help libraries. So these are these units that contain a whole bunch of packages in them and some of them are default built in.

470
00:46:52,140 --> 00:46:58,560
So you can see just coding right now, right out the gate, we already have some functions available to us.

471
00:46:58,560 --> 00:47:03,840
Like we were using the C function, we're using the length function, we tried the seek function.

472
00:47:04,050 --> 00:47:10,260
So there's some of these default packages and functions that are just assumed you're going to want every time you open it up.

473
00:47:11,410 --> 00:47:16,090
There's other packages. There's tens of thousands of packages out there on the Internet.

474
00:47:16,330 --> 00:47:17,409
So you could pull those.

475
00:47:17,410 --> 00:47:25,360
And specifically when you need them to use that, you could also start creating packages yourself once you get excited about this deal.

476
00:47:27,280 --> 00:47:34,720
They're kept in your memory during our interactive session, so they're a load up and queued up for as long as you're running out right then.

477
00:47:35,080 --> 00:47:39,040
But then the next time, if you restart are you're going to have to load those again.

478
00:47:39,050 --> 00:47:42,220
So every time you restart, ah, it'll give like a fresh session.

479
00:47:45,750 --> 00:47:50,820
These libraries are packages. We can use a function called library to just check to see what's there.

480
00:47:51,000 --> 00:47:56,220
There's also in the lower right hand corner. You know how there's the files tab, the help, your tab.

481
00:47:56,460 --> 00:48:00,750
One of those tabs is about packages and you can see what are the packages that

482
00:48:00,750 --> 00:48:03,810
are already installed and then what are the packages that are that are loaded?

483
00:48:04,020 --> 00:48:11,790
Here's just a screenshot from my personal computer. You can see where like just at the beginning of the alphabet and it got cut off.

484
00:48:11,790 --> 00:48:15,810
There's just a ton of packages out there, so this list can get quite big.

485
00:48:21,050 --> 00:48:28,430
Working with packages are two steps. If we want to use a new package because it has some specialized function in it that we really need.

486
00:48:29,030 --> 00:48:36,500
The first step we're going to do is install it. This is the action of taking that package from the Internet and downloading it to our computer.

487
00:48:37,460 --> 00:48:42,550
So this would be like if you're trying to grab a new program on your computer from the Internet,

488
00:48:42,560 --> 00:48:47,960
this is like when you do that initial download and a little like box will show up and be like, Do you want to install it?

489
00:48:48,270 --> 00:48:53,180
And so you only have to do this once. This is when you're grabbing something from the Internet and installing it.

490
00:48:56,250 --> 00:48:58,260
Every single time you want to use it.

491
00:48:58,260 --> 00:49:06,570
Now you have to queue it up because you might have hundreds of packages installed, but maybe only a couple of you want to use this session.

492
00:49:07,170 --> 00:49:13,950
So this is something you do every time in your current session. You're going to take something that you've already installed and load it on.

493
00:49:14,910 --> 00:49:19,630
So by using the library function on whatever the package name is, this is activating it.

494
00:49:19,650 --> 00:49:24,210
Now all of the functions that are in that package are ready and available for you to use.

495
00:49:25,480 --> 00:49:37,469
So let's review once as we do every time. So to recap functions is our actions.

496
00:49:37,470 --> 00:49:40,770
These are verbs and are we perform them on objects.

497
00:49:41,940 --> 00:49:47,430
They come from packages or library and they have to be loaded to be available for use.

498
00:49:48,400 --> 00:49:53,950
One of the most common errors you might see is like this package does not exist.

499
00:49:54,430 --> 00:49:59,320
So that's a sign for me that I need to load that package to activate it and make sure it exists.

500
00:50:00,520 --> 00:50:05,170
When we're running a function. They have default settings, but we can specify other options if we want.

501
00:50:06,640 --> 00:50:10,950
And one way of coding the functions if we want, we can pipe objects into the.

502
00:50:12,000 --> 00:50:16,080
If you like. Let's pause here. How are we doing with those functions?

503
00:50:17,010 --> 00:50:21,210
Activity. Purpose. Goals of this. Earlier.

504
00:50:21,230 --> 00:50:24,410
The language barrier gets really expansive with the number of functions that are out there.

505
00:50:29,760 --> 00:50:33,960
All right, then we're going to jump back into the car and see if we can't run some functions.

506
00:50:38,350 --> 00:50:42,750
All right. Now rejoin that introduction class that we were just in.

507
00:50:46,810 --> 00:50:49,840
All right. And so we are somewhere around. And your line number.

508
00:50:50,980 --> 00:50:55,480
I love it more. Feel free to let me know if visibility is challenged.

509
00:50:56,380 --> 00:50:59,600
So somewhere around. 196.

510
00:50:59,600 --> 00:51:02,180
It might be a different line for you as the one all about object classes.

511
00:51:02,870 --> 00:51:06,770
So we're going to start performing functions on some of those objects we made.

512
00:51:07,550 --> 00:51:13,040
And one useful function we can have, we can ask our question What class of objects is number of apples?

513
00:51:13,340 --> 00:51:18,680
So you see our object number performing it on is number of apples.

514
00:51:18,860 --> 00:51:24,650
And our function is class. We know that class is a function because it's right in front of that round in parentheses.

515
00:51:25,910 --> 00:51:30,650
So do we have an expectation before we even do this? What, based on our environment, what?

516
00:51:30,800 --> 00:51:34,610
What class of vector or what type of vector are you expecting it to say?

517
00:51:39,340 --> 00:51:43,510
Yeah. Yeah. I see an integer here, so I'm expecting this to tell me.

518
00:51:43,510 --> 00:51:48,720
We've got some numeric information. Run that.

519
00:51:49,860 --> 00:51:56,310
So this is timely. That's the class of information that objects is integer, which matches what's up here.

520
00:51:57,720 --> 00:52:02,880
We do the same thing with fruit farms. So whatever is in the parentheses, that's the object that we're performing it on.

521
00:52:06,860 --> 00:52:10,280
A related function to class is the structure function.

522
00:52:10,280 --> 00:52:14,240
This is my favorites. It gives you a ton of information so you can run the structure function on it.

523
00:52:15,910 --> 00:52:19,340
And that's all of us. Okay. So there some class of information.

524
00:52:19,390 --> 00:52:22,770
I'll go to the number of positions and I'll get the first few values.

525
00:52:26,260 --> 00:52:29,620
So when you start to see some of these functions that perform overlapping roles,

526
00:52:30,100 --> 00:52:34,870
just pick one that you like and hold onto that one and ignore the rest.

527
00:52:42,460 --> 00:52:48,280
All right. Let's play around a little bit with the differences between square brackets and random brackets.

528
00:52:48,850 --> 00:52:53,440
So anytime we see the round in parentheses, I want you to think about a function.

529
00:52:54,490 --> 00:52:56,260
And any time you see those square brackets,

530
00:52:57,010 --> 00:53:02,020
I want you to think about an object that's we've got different symbols for the different types of information.

531
00:53:02,410 --> 00:53:07,360
Rounded parentheses are functions and square brackets are objects.

532
00:53:08,260 --> 00:53:16,690
All right, so here I'm performing function, which runs our function here is for friends or length, our function minus our function.

533
00:53:16,930 --> 00:53:20,950
So we're asking, how long is this for friends object. I'm expecting it to have a value for.

534
00:53:24,310 --> 00:53:27,850
And that's what we see. Say we've got a value of four. What about here?

535
00:53:27,880 --> 00:53:34,660
What do you expect to come up if I'm saying index? So the square brackets are for indexing or looking around at positions and an object.

536
00:53:34,960 --> 00:53:38,620
What value do you think it's going to come up in position? Three of the fruit farms.

537
00:53:39,400 --> 00:53:57,210
Now we feel that out. But I made it so that the value and position three of the fruit brands object is the loss of time.

538
00:53:58,290 --> 00:54:02,310
The value and position to the fruit firms object I think is happening.

539
00:54:05,220 --> 00:54:10,720
So this is how we can pull out observations based on their position if you want to ground multiple of them.

540
00:54:10,920 --> 00:54:18,540
This is saying grab the values in positions one through three that like colon has a special meaning in a where it

541
00:54:18,540 --> 00:54:28,410
means like count through those two numbers here even selecting based on positions we can also select based on values.

542
00:54:29,670 --> 00:54:35,340
So here, if I'm saying let's see, where does the number of apples have values?

543
00:54:35,340 --> 00:54:40,290
Less than four. And also position one is true.

544
00:54:40,390 --> 00:54:43,969
Position one has a value less than four because I think position one has a value of one.

545
00:54:43,970 --> 00:54:48,320
One is less than four. Decision two is also true. Position three is also true.

546
00:54:48,530 --> 00:54:52,160
And then position four is false because I think position four is equal to four.

547
00:54:53,720 --> 00:54:57,860
So here we're starting to select based on values, but we haven't quite got to the positions yet.

548
00:54:57,860 --> 00:55:02,210
It's just choosing all. So if we want to get those through the process, here's how we can do that.

549
00:55:03,020 --> 00:55:08,270
So this is saying positions using the wedge function positions one, two and three have values less than four.

550
00:55:09,020 --> 00:55:12,200
You might be doing this in reverse. In fact, we will be doing it in our homework next week.

551
00:55:12,200 --> 00:55:17,660
Being like which rows have participants with ages less than 50?

552
00:55:18,050 --> 00:55:22,360
This type of like selecting based on different criteria is very common.

553
00:55:22,490 --> 00:55:28,910
We might want to select which rows have participants who do not have our disease categorization.

554
00:55:29,120 --> 00:55:33,440
So we'll be doing these types of a selection along the way.

555
00:55:35,030 --> 00:55:39,720
Is equivalency. How we done.

556
00:55:46,100 --> 00:55:49,759
So far we've been working on this side of the border. We've been working with Vector.

557
00:55:49,760 --> 00:55:55,300
So we've had information in one dimension let's stitch them together and make them in two dimensions.

558
00:55:55,310 --> 00:55:59,480
And this is more true to our most common experiences with public health data.

559
00:56:00,080 --> 00:56:06,620
So I want to make our first data frame. Here.

560
00:56:06,620 --> 00:56:13,850
I'm using a new function called DataFrame, and I'm going to stitch together three of our existing vectors a number of apples,

561
00:56:14,570 --> 00:56:20,120
short names in the Wall Street firms name. Before we even do it, does anybody have a guess or a hypothesis?

562
00:56:20,120 --> 00:56:23,149
Like What do you think this is going to look like? What do you think?

563
00:56:23,150 --> 00:56:27,350
How many rows? How many columns? How do you think it's going to organize those vectors?

564
00:56:32,250 --> 00:56:37,270
Is. And they already survive.

565
00:56:38,260 --> 00:56:44,620
Yeah. In order to be supplied. Yeah. So we're expected a number of apples to come first, so it's going to stitch them together in the order we said.

566
00:56:44,620 --> 00:56:50,499
But I'm also expecting them to come out in the columns because we learned that our likes have

567
00:56:50,500 --> 00:56:55,000
all the same type of information in the columns as opposed to like having those each few rows.

568
00:56:55,530 --> 00:56:58,209
But let's see what we got and then what am I going to do with that?

569
00:56:58,210 --> 00:57:03,880
I'm assigning it as a new object apple, and then we'll look, I'll just type the name of that object.

570
00:57:03,880 --> 00:57:10,900
We'll see what that object looks like. Oh, sweet.

571
00:57:12,010 --> 00:57:19,040
Here we go. So we've got a dataframe. And we see that we've got three columns and they came out in the order we expected.

572
00:57:19,520 --> 00:57:23,930
This is kind of nice to give us the type of information tells us that first one is an integer.

573
00:57:24,260 --> 00:57:28,220
The second one is a character. The third one is a character. Yeah.

574
00:57:28,490 --> 00:57:34,370
Would it still, like do this if for fruit farms and got like five or six and everything else had four,

575
00:57:34,370 --> 00:57:37,430
but it still show up just like the perceived values in the first two columns.

576
00:57:38,000 --> 00:57:42,860
Oh, that's a great question. What's going to happen? Let's try it. So I'm going to make a now vector.

577
00:57:43,010 --> 00:57:52,729
I'm going to call I'm just going to call it long and I'm going to give it a new I'm going to use the C function and I'll just give it a rose.

578
00:57:52,730 --> 00:57:57,050
I'm calling one, two.

579
00:57:59,510 --> 00:58:05,540
I'm law and creativity today. I apologize. Three, four and five.

580
00:58:08,550 --> 00:58:15,180
And they were 6 to 1. So what what we did in this first data frame, these all vectors all had the same length.

581
00:58:15,930 --> 00:58:18,760
What happens if we give it a vector that does not have the same line?

582
00:58:18,780 --> 00:58:23,400
So here's this long vector and I'm going to stitch it there on the right hand side and see what happens.

583
00:58:26,780 --> 00:58:29,130
Well, it doesn't like it. And what kind of air?

584
00:58:29,400 --> 00:58:33,920
I get so excited when those error messages are sometimes we don't get them and it just precedes forward.

585
00:58:34,220 --> 00:58:37,760
So what does it tell us? And let's see if we can interpret this error message.

586
00:58:37,760 --> 00:58:38,750
So it's going to tell us.

587
00:58:39,110 --> 00:58:46,910
Error in the data frame, the arguments imply differing numbers of rows, and it even tells us what some of them are for and some of them are six.

588
00:58:47,990 --> 00:58:50,990
So that's nice. That's good. It keeps us from stitching them together.

589
00:58:51,170 --> 00:58:56,780
An alternate approach would be like what you're describing. How are you? We got nice in those missing ones, but this stops us right there.

590
00:58:58,220 --> 00:59:04,370
I think if we use a different function instead of data, I think of our use like C bein.

591
00:59:04,430 --> 00:59:06,110
I think that what I've stitched them together.

592
00:59:06,110 --> 00:59:10,190
So I think there's different functions you could do that would coerce them together even if they have a different life.

593
00:59:10,610 --> 00:59:15,960
But this one does not want to do that. Yeah.

594
00:59:16,380 --> 00:59:19,709
So is it safe to say that a dataframe is a dataset?

595
00:59:19,710 --> 00:59:23,170
Like we just created a dataset? Yeah, and let's look at it.

596
00:59:23,190 --> 00:59:28,560
So something that I really like about it is once it shows up in the global environment,

597
00:59:28,830 --> 00:59:34,620
you notice that all these victims are missing, are in a different section of this data.

598
00:59:34,890 --> 00:59:41,610
So now that we have two dimensions, it comes up in a different area and has a little blue plus a blue arrow next to it.

599
00:59:41,610 --> 00:59:47,830
Just click on that and see what happens. Or not.

600
00:59:47,850 --> 00:59:55,950
Let's click on the name there. So when I clicked on the arrow, it just gave me the information about the columns, which is helpful.

601
00:59:56,130 --> 01:00:03,880
But when I double clicked on the name, it popped up a new window where it gives me that little data set, which is nice.

602
01:00:03,880 --> 01:00:06,960
So and it tells me what are the values in rows? One, two, three, four.

603
01:00:07,290 --> 01:00:12,050
And it gives us the names of the columns. And we notice that the names of the columns are not in the first row.

604
01:00:12,060 --> 01:00:16,950
They're like metadata information on top of that column.

605
01:00:18,180 --> 01:00:21,780
So it's almost like a Excel spreadsheet right here. You can look at it any time.

606
01:00:22,200 --> 01:00:27,130
So, yeah, I would say we made our first dataset. That's nice. There's one way to make this next.

607
01:00:27,210 --> 01:00:31,200
At the next step, we'll also worry about how to read any dataset from other places.

608
01:00:31,200 --> 01:00:35,290
But this could be how you want to make data within our design.

609
01:00:35,310 --> 01:00:43,840
So. So I did that just by double clicking on the data set and it popped up in a new window up here.

610
01:00:44,440 --> 01:00:49,120
Sometimes it's helpful for me to just like, see it and like get a grasp on it where we can do this.

611
01:00:49,480 --> 01:01:02,590
You can also do that with the. I think the function capital V view I think that I'll also I think that I'll also pop it up in a new window.

612
01:01:03,280 --> 01:01:07,070
So that's like a code in a way to make that pop up as opposed to the Queen clips.

613
01:01:10,470 --> 01:01:15,060
I'm just gonna put a hashtag in front of that for right now, because at the end of class,

614
01:01:15,060 --> 01:01:20,130
when we click Render, you don't want to have these like pop ups going metal.

615
01:01:20,730 --> 01:01:27,030
That's a little stall it out. We didn't get some information about us.

616
01:01:27,030 --> 01:01:33,240
So some of those functions we were using along the way, like the structure function, we can perform this on that object.

617
01:01:34,230 --> 01:01:38,330
So now we see, it'll tell us this data that we made is a dataframe.

618
01:01:38,610 --> 01:01:42,210
A That's the type of object and it gives us the dimensions.

619
01:01:42,600 --> 01:01:46,320
Do you have a sense do you think it's giving us the rows first or the columns first?

620
01:01:47,190 --> 01:01:53,560
Or is this information being provided in? Yeah.

621
01:01:53,750 --> 01:01:59,960
It's giving us a rose first with a number of observations. Just like before, I was always going to be Rose first and second.

622
01:02:00,500 --> 01:02:05,899
And then it tells us you've got three variables or three columns. And then here's some information about those three columns.

623
01:02:05,900 --> 01:02:09,500
This one's an integer. This one's a character. All right.

624
01:02:09,500 --> 01:02:15,979
So some of these functions are flexible. Some of the functions you can provide, you can run that same function on a vector or a data frame.

625
01:02:15,980 --> 01:02:19,370
Other functions are more specialized. They only work on a certain object type.

626
01:02:20,250 --> 01:02:30,170
Another concern that I'm getting instead of, Oh yeah, that's fine, that some people are getting a variable type here for numeric.

627
01:02:30,170 --> 01:02:34,879
I think a couple of the difference. I think we made this variable a couple of different ways,

628
01:02:34,880 --> 01:02:41,330
like with the C function or the C cruncher and one of them makes it in one integer, one makes it a numeric function.

629
01:02:41,510 --> 01:02:44,510
For me those are equivalent and and that's every. Yeah.

630
01:02:45,230 --> 01:02:54,120
So there might be some variability there. If we want to call up specific problems, we can use that dollar sign.

631
01:02:55,440 --> 01:03:01,590
So to do that structure, we're always going to do it just like before the name of the dataset Dollar Sign, the name of the problem.

632
01:03:02,190 --> 01:03:09,070
So here I'm doing the name of the Dataset Dollar Sign, the name of the column that I want to do.

633
01:03:09,630 --> 01:03:11,760
So here's all the apples, here's all the fruit farms.

634
01:03:12,660 --> 01:03:17,760
So we use that dollar sign to queue up which parts of the data handler we want to work with at any given time.

635
01:03:18,000 --> 01:03:24,390
Because maybe we want to do our function just on one problem. Maybe we if we have a date, every dataset, we have a column of ages,

636
01:03:24,660 --> 01:03:29,010
maybe we just want to run the mean on the edges and we don't want to run the mean on the whole dataset.

637
01:03:29,370 --> 01:03:33,090
So we can use these dollar signs to pull out just parts of the dataset. So.

638
01:03:36,940 --> 01:03:39,490
We can also look around in that based on position.

639
01:03:40,150 --> 01:03:46,630
So using these square brackets, what position do you think we're grabbing from the data set right here?

640
01:03:46,660 --> 01:03:50,740
So if we've got three comma one. What part of the data set are we looking for?

641
01:03:51,550 --> 01:03:55,270
So let's look. Yeah. Third row.

642
01:03:55,780 --> 01:03:59,920
First column. Yeah, third row. First column. So rows first and second.

643
01:04:02,760 --> 01:04:07,190
If we leave off one of those. The default is going to show us everything.

644
01:04:07,820 --> 01:04:11,540
So here's saying, show me the fourth row and all the columns you got.

645
01:04:14,480 --> 01:04:18,350
Does anybody have a guess what happens here if we leave off over here?

646
01:04:19,550 --> 01:04:25,130
So say blank comma one. What do you what rows or columns do you think it's gonna show us everything?

647
01:04:26,690 --> 01:04:29,730
Yeah, all rows. Because we're not seeing anything in front of a comma.

648
01:04:30,250 --> 01:04:35,870
Comma. So I always, like, anchor myself on that comma, and I think to the left of the comma reversed arrows.

649
01:04:35,870 --> 01:04:47,109
And then from the right of that comma, reverse. You know, based on value like we just did in the other one bug.

650
01:04:47,110 --> 01:04:52,149
And we had to specify rows versus columns anchored on that comma.

651
01:04:52,150 --> 01:04:57,040
And we'll practice this going forward with like ages and participants and more concrete examples.

652
01:05:02,450 --> 01:05:06,710
Sometimes we mean we know there's an error in the data that we need to record it.

653
01:05:07,280 --> 01:05:17,730
We can use this information. That's like a battleship, kind of coordinate some rows and columns to help us record values if we need to.

654
01:05:18,240 --> 01:05:27,250
So here we can look at the data, see what's it look like? We say, Oh, somebody noticed that there was an error in the data set.

655
01:05:29,690 --> 01:05:32,690
So what position do you think we're going to recode here?

656
01:05:37,560 --> 01:05:42,030
Yeah. Roe three column one. So Roe three, one, two, three, column one.

657
01:05:42,360 --> 01:05:45,330
So I'm expecting to recode this three to a five.

658
01:05:45,810 --> 01:05:53,980
So this is saying take the value of five and assign it to the Apple firm's object input in row three column.

659
01:05:54,690 --> 01:05:57,959
So we can use this assignment operator to help us recode the data set.

660
01:05:57,960 --> 01:06:01,260
And now we have like a record of any changes we've made.

661
01:06:01,260 --> 01:06:04,350
So we're not just going in and clicking and changing things.

662
01:06:04,560 --> 01:06:12,060
People will know you can document, you can say why things are being done. And then we run it again to say, okay, that was successful.

663
01:06:12,060 --> 01:06:15,630
We see there's a value of five plugged in there where we thought there was a value of three before.

664
01:06:16,980 --> 01:06:22,950
So that's trying to give you some examples of why being able to navigate the positional information in the dataset might be useful.

665
01:06:30,230 --> 01:06:34,970
Let's do some options on how we wanted instead of recording to five.

666
01:06:35,210 --> 01:06:39,010
And we wanted it to be bling or to have a period to indicate that it's boiling.

667
01:06:39,140 --> 01:06:46,050
Who wouldn't do the same thing? Does anybody know from their other experiences how does are like missing data coded.

668
01:06:48,120 --> 01:07:00,180
So preference and are missing data. This will be different from those of you that have experienced previously our likes missing coded with capital N,

669
01:07:01,170 --> 01:07:04,440
capital X and when we type that we'll see it all.

670
01:07:04,440 --> 01:07:09,329
Change colors will be like purple font. So if we wanted to try that, that's a cool idea.

671
01:07:09,330 --> 01:07:13,860
What if we say actually this value instead of being five, maybe this should be missing?

672
01:07:14,220 --> 01:07:19,230
I'm going to type capital and capital X and if you do that, you see it shows up in purple.

673
01:07:20,870 --> 01:07:27,050
Now let's play Madden. Oh, yeah. Oh, now we've got a missing and a value in there.

674
01:07:28,710 --> 01:07:35,010
Currently. Okay.

675
01:07:35,620 --> 01:07:36,640
So we're missing data.

676
01:07:36,670 --> 01:07:42,790
That'll be one of the data cleaning steps if we're, like, bringing our data over from SAP, because you might have your data quotas, period.

677
01:07:43,780 --> 01:07:47,680
I don't know why one of the surveys I work with, they called Missing Data as a number eight,

678
01:07:47,980 --> 01:07:52,860
which particularly a pain to adjust because it'll show up as numeric.

679
01:07:52,870 --> 01:08:00,460
So I don't like notice that missing but missing data is one of those things where we spend a ton of time cleaning,

680
01:08:00,500 --> 01:08:07,600
clearing data, making sure it's handled in the way the software is expecting and R is expecting this to be with any.

681
01:08:10,840 --> 01:08:17,059
The question. Let's work with a function.

682
01:08:17,060 --> 01:08:23,450
Let's play with this. Somebody asked this question earlier about what about these default settings within a function and where do we find those?

683
01:08:23,760 --> 01:08:30,190
So I'm not looking to help viewer. You can see I haven't been doing this every time right now.

684
01:08:31,430 --> 01:08:38,330
With the interest of speed. But pretty much in my regular coding life, every time I use a new function, I look it up in the Help viewer.

685
01:08:38,420 --> 01:08:46,469
So what I do is I navigate to the Help tab. And I look up their function in this little magnifying glass.

686
01:08:46,470 --> 01:08:49,680
So here I'm looking up the seat function and seeing it here.

687
01:08:50,940 --> 01:08:56,640
So what this is telling us is that sleep is a function located in the base package.

688
01:08:57,480 --> 01:09:02,190
So if you ever get a situation where it's like that package is not available or that function is not available,

689
01:09:02,190 --> 01:09:06,810
and you're like, How do I know which package to even load is the one in the curly brackets here?

690
01:09:06,870 --> 01:09:09,200
So this is saying the SEC as a function in the base package,

691
01:09:09,210 --> 01:09:13,890
this is one of these packages that is just available for you when you turn our on every time I file.

692
01:09:15,700 --> 01:09:20,920
But essentially what the default settings here are to count from 1 to 1 by one.

693
01:09:21,730 --> 01:09:24,880
So any time we can leave something out, it's just hard to do those steps.

694
01:09:25,150 --> 01:09:30,160
So if you want, you can say, hey, let's count from 10 to 23 by one.

695
01:09:34,920 --> 01:09:40,030
And that's give us. A vector of numbers counting by one.

696
01:09:40,560 --> 01:09:45,690
But if we don't want if we don't want to lift that by one, because that's a default setting, we could leave that out.

697
01:09:51,580 --> 01:10:00,910
Whichever style you like. We also can leave out this like from equals and two equals if we give it the numbers in the order that it's expecting.

698
01:10:01,690 --> 01:10:05,530
Sometimes I like to leave these in because they help remind me like what are those settings actually mean?

699
01:10:05,530 --> 01:10:08,230
But you can always just give it the numbers and I'll do the exact same thing.

700
01:10:08,650 --> 01:10:12,760
So these three lines of code are exactly the same and functions don't care.

701
01:10:14,500 --> 01:10:20,320
Either way. So you can leave off defaults. You can leave off these explainers if you want.

702
01:10:21,640 --> 01:10:25,709
However you like to go. Here.

703
01:10:25,710 --> 01:10:28,710
We can tell it to count from 10 to -3.

704
01:10:29,090 --> 01:10:33,030
You can give it different values here. We can count it, tell it to count by three.

705
01:10:33,030 --> 01:10:35,730
So anything you want to change on the defaults, you have to actually do it.

706
01:10:39,370 --> 01:10:45,009
Start to develop your own personal preferences and likely some pet peeves along the way of what you like.

707
01:10:45,010 --> 01:10:55,950
Including. When we're navigating this help, you are just like, feels kind of strange in the beginning.

708
01:10:55,950 --> 01:11:00,179
Let's start to get more used to it. Let's do it. It starts off by telling us, what's the package?

709
01:11:00,180 --> 01:11:05,900
It said, this is the name of the function. Some general descriptions, the default settings.

710
01:11:06,570 --> 01:11:11,310
And if we keep going down, it explains to us what each of those settings mean.

711
01:11:11,940 --> 01:11:15,330
So what does that by option mean? What does that from option mean?

712
01:11:18,140 --> 01:11:21,379
It'll give us some more detail. Sometimes there's, like, manuscripts or papers.

713
01:11:21,380 --> 01:11:28,430
It'll tell you to read if you want more information. It'll tell us some typical usage if you need to read more about it.

714
01:11:29,990 --> 01:11:35,950
So here it's giving us some references and that's something I like if I really get stuck, there is a bunch of examples at the bottom.

715
01:11:36,620 --> 01:11:40,070
So this is called they'll give you example code that will just work independently.

716
01:11:40,460 --> 01:11:47,150
So if I'm ever stuck with a package and I'm like, is it is this my problem with my dataset or is this a problem with the function?

717
01:11:47,390 --> 01:11:50,750
I'll just run their example code and see how that goes is can help me in the

718
01:11:50,750 --> 01:11:55,040
troubleshooting one out and then you notice at the bottom and also tells you the version.

719
01:11:56,450 --> 01:11:58,670
Because these packages get updated all the time.

720
01:11:59,000 --> 01:12:06,290
And so this will help them feel like, okay, I'm working with version 4.0, 2.2, but somebody else might be working with version 3.7.1.

721
01:12:06,590 --> 01:12:10,490
There can be some differences across those.

722
01:12:12,140 --> 01:12:20,230
So in practice, looking through those help viewers, one might. We can perform actions on that data frame.

723
01:12:21,190 --> 01:12:25,000
So, for example, if anybody have a guess, what do you think the sum function's going to do?

724
01:12:25,060 --> 01:12:28,210
If we perform this on just the number of apples.

725
01:12:28,670 --> 01:12:32,530
Well, problem of the Apple firms dataset, I guess.

726
01:12:32,530 --> 01:12:35,909
There. Yeah.

727
01:12:35,910 --> 01:12:41,160
It's going to add up all of the entries. We can calculate the mean.

728
01:12:42,370 --> 01:12:47,650
Well, it's got an end. And there I'm going to take care of that record that we put in.

729
01:12:50,890 --> 01:12:54,940
We'll learn about how missing values can interrupt functions. That's very common.

730
01:12:55,780 --> 01:12:59,680
But once I put that value back in, we're able to calculate some and mean in that stuff.

731
01:13:03,270 --> 01:13:09,810
So here is this base, our way of coding where we've got the function in front and the object within the parentheses.

732
01:13:10,590 --> 01:13:12,540
We can also code with types.

733
01:13:15,270 --> 01:13:21,160
So to be able to activate the ability to use the pipe, this operator is located in one of these packages, the categories package.

734
01:13:21,210 --> 01:13:30,130
So first we got queued up to that package up. But now we can, I bet.

735
01:13:31,070 --> 01:13:35,960
So this is saying take the number of Apple's object and pipe it into the sun function.

736
01:13:36,240 --> 01:13:39,580
So I think it's going to have that same value of 12 that we have to force me from.

737
01:13:39,800 --> 01:13:46,460
Stop coding or um, we're able to calculate it in this way.

738
01:13:50,030 --> 01:13:54,829
The power, potentially the pipes as you can feel. Everything into each other.

739
01:13:54,830 --> 01:14:02,990
So here, let's say I want to take that object, pipe it into the log transformation function, and then pipe it into so I can start performing.

740
01:14:04,400 --> 01:14:08,900
There was a question earlier about like, how do we string together multiple functions within a pipe?

741
01:14:08,900 --> 01:14:15,160
And here we just do each one separated by another pipe. Now it'll do them in order.

742
01:14:15,170 --> 01:14:21,180
So we'll do this one first and then I'll do the. You'd store that as an object.

743
01:14:23,730 --> 01:14:29,220
So you see, which South Korean do you like? Do you like types? Do you like traditional and see what you like?

744
01:14:29,250 --> 01:14:34,149
I want to encourage you. No matter what you're doing to take. Notes everywhere.

745
01:14:34,150 --> 01:14:38,310
Take notes like crazy. You're going to forget I forget stuff all the time.

746
01:14:38,320 --> 01:14:43,720
If I revisit my code a month later, right on earth, was I doing this or how do I interpret this output?

747
01:14:44,320 --> 01:14:47,740
So give yourself a lot of notes. Give yourself kind of like a.

748
01:14:48,930 --> 01:14:51,930
A treasure map to follow, to revisit your work in the future.

749
01:14:52,980 --> 01:14:56,420
And you can do as many hashtags as you want to me on New Line.

750
01:14:56,430 --> 01:15:01,110
I can be on the end of a line. Any of this stuff in green is comments.

751
01:15:02,480 --> 01:15:06,350
Any of this white space here is completely optional.

752
01:15:07,370 --> 01:15:12,710
I like to put spaces between things. You don't have to. You can.

753
01:15:14,530 --> 01:15:18,110
Put spaces after commas or you can switch it up together.

754
01:15:18,460 --> 01:15:24,140
Totally fine. You can put entries on new lines or you can put them all together.

755
01:15:24,160 --> 01:15:28,840
These are all equivalent statements. So you put some here.

756
01:15:29,260 --> 01:15:37,660
Yeah. And then to reminder to use the PR, if you want to do this with the code, you can use the help function and that'll pop it up in help you.

757
01:15:37,750 --> 01:15:45,380
So this will grab the class function and so this will pop up the class function and the help viewer we see that's also in the base package.

758
01:15:45,500 --> 01:15:52,340
Here's how to use that. Not a lot of information.

759
01:15:52,550 --> 01:15:56,660
Let's try to try it out ourselves. So I want you to create a vector.

760
01:16:00,080 --> 01:16:05,270
A numeric vector that repeats the number seven in the first four positions.

761
01:16:06,920 --> 01:16:12,590
To do this, you could use the rec function which stands for repeat, but you probably need to look it up.

762
01:16:13,370 --> 01:16:20,060
So practice looking up the rec function and the help viewer and see if you can implement the RAC function in this way.

763
01:16:20,210 --> 01:16:25,850
So let's pause as you can do this activity. You may have argued your colleagues.

764
01:16:28,630 --> 01:17:32,850
Work together. And I guess I had this whole.

765
01:17:45,190 --> 01:17:52,040
The. Yeah.

766
01:17:52,770 --> 01:17:56,380
Yeah, yeah. There's a phone.

767
01:18:02,700 --> 01:18:10,140
Yeah, absolutely. You can find a manufacturer or you could do that.

768
01:18:10,800 --> 01:18:29,940
Like, here, I have a feeling that you have to do what you want to do every time that you do so.

769
01:18:30,780 --> 01:18:37,710
All right. Because before, we are not sure we don't have a supply or something.

770
01:18:41,750 --> 01:18:54,740
Yeah. So it's kind of circumstance and not, oh, this is a good thing.

771
01:18:56,020 --> 01:19:02,180
So you can see if you want to go and see who can help me get started.

772
01:19:02,190 --> 01:19:05,310
How are you going to make a new cogen so you have some place to work?

773
01:19:08,530 --> 01:19:21,210
We're going to put on. Chunks come from seven.

774
01:19:23,210 --> 01:19:29,700
Yeah. You can click the the green button at the top of this page.

775
01:19:30,320 --> 01:19:33,469
As Jonathan said, yes, we can make a little white space to work in.

776
01:19:33,470 --> 01:19:36,470
And then you can click, click the green, see, plus to get a code chunk.

777
01:19:37,130 --> 01:19:40,550
And then once you have a coach on, what are some of the idea? What was the next step somebody took?

778
01:19:40,550 --> 01:19:46,700
How did you approach solving a problem in Minecraft?

779
01:19:46,970 --> 01:19:51,520
So I do the same thing.

780
01:19:51,860 --> 01:19:56,600
Oh, nice. Okay, so that's this another way of calling up the help?

781
01:19:56,900 --> 01:20:02,060
That's excellent. So it put the question mark, then the function in. Did anybody else take a different approach to getting that open?

782
01:20:06,470 --> 01:20:09,710
I turned to the help and in the search bar.

783
01:20:10,790 --> 01:20:17,810
Oh, perfect. Yeah. So we got options. Another way to do it might be to use the help function onramp.

784
01:20:19,610 --> 01:20:26,030
So you got three ways to do it. So once we get this open, we see rap is a function in the base package.

785
01:20:26,450 --> 01:20:35,150
We use it to replicate values and s and essentially how we do it is we provide a some value and then we tell it how many times we want it to repeat.

786
01:20:37,500 --> 01:20:40,830
So what value do we want repeated?

787
01:20:41,860 --> 01:20:50,010
So on the value seven and nine, how many times do we want to repeat it or time to go for it?

788
01:20:50,730 --> 01:20:56,010
So if you want, you can do x equals seven. And times equals four.

789
01:20:58,040 --> 01:21:05,900
If you want, you can leave that out. You just wrap. Seven promo for this is their equivalent ways of coding.

790
01:21:07,370 --> 01:21:12,620
They generate the exact same thing and the way I've got these values or these

791
01:21:13,100 --> 01:21:17,249
options is I looked in your and saw that these are the options it's looking for.

792
01:21:17,250 --> 01:21:22,550
If it's looking for X and it's looking for the number of times and there's information here on how to do it.

793
01:21:22,910 --> 01:21:27,500
So, so far we've looked at that output. What if I want to assign this output as a new object?

794
01:21:27,500 --> 01:21:33,240
How can I do that? Yeah.

795
01:21:33,320 --> 01:21:41,830
On the same line you can. But at the very beginning you can hear it and then the green arrow and then you can name it whatever you want.

796
01:21:41,840 --> 01:21:48,379
So I didn't read it again. Okay. I would just avoid naming an object after a function you use commonly.

797
01:21:48,380 --> 01:21:52,430
We don't want to like override it. So we could call us and we could call it whatever.

798
01:21:54,770 --> 01:22:01,400
Okay, so I'm expecting a numeric object to show up in my environment or whatever that has a value of seven repeated four times.

799
01:22:03,000 --> 01:22:10,110
And if we look at the environment, we see that that shows up with all of our other vectors are organized here alphabetically.

800
01:22:13,600 --> 01:22:21,250
Right. So whenever you're done, whenever you're ready. So this is like we finished this code at the end and we're ready to click Render.

801
01:22:23,070 --> 01:22:26,400
This is going to rerun all of the code we've had so far.

802
01:22:27,450 --> 01:22:30,930
Well, let's check in here. Is upset about something.

803
01:22:31,740 --> 01:22:35,130
Oh, can anybody help me here? What kind of error message are we getting?

804
01:22:35,580 --> 01:22:40,530
Does this look familiar? Yeah. Yeah. This is like Cobra, where you're trying to stitch together.

805
01:22:42,030 --> 01:22:46,889
Yeah. Equal length. And we can figure out where this is.

806
01:22:46,890 --> 01:22:50,940
It's telling us around which lines that are current so I can scroll back up to those lines.

807
01:22:52,640 --> 01:23:01,340
It's totally normal to get these kinds of errors. So this was when I was trying to do this and I was trying to add another one object.

808
01:23:01,790 --> 01:23:10,320
If I ever just want to tell it to ignore code, I can put a hashtag in front of it and then I will treat that like notes so it will ignore it.

809
01:23:11,300 --> 01:23:16,460
So if there's a line of code that's really tripping me up, put a hash tag in front of it and we can try render again.

810
01:23:19,560 --> 01:23:22,650
Render nice because they're all going to be getting up and running everything straight through.

811
01:23:22,650 --> 01:23:26,070
So it'll figure out if you have any little troubles along the way.

812
01:23:26,700 --> 01:23:30,749
So we got a pop of blocker issue. Any issues there?

813
01:23:30,750 --> 01:23:35,210
We can just say cancel. Is there another way to find the output?

814
01:23:35,360 --> 01:23:43,220
If we're having issues there, we can look in the files. You can see that there is an HTML file that we've just made just now.

815
01:23:44,090 --> 01:23:49,040
How do I get this HTML file out of the cloud and onto my personal computer?

816
01:23:49,160 --> 01:24:00,190
So give me an idea there. Going to click the little checkbox next to the on the lot.

817
01:24:01,900 --> 01:24:06,720
Click the more an expert. Download it.

818
01:24:08,290 --> 01:24:10,869
And now we've got a new website.

819
01:24:10,870 --> 01:24:20,530
So we've got here's all of our code that we ran over and now we have all of our like code output, code output, code output.

820
01:24:20,540 --> 01:24:30,260
So it's all stitched together nicely for us. Oh, I lost her in time, and it's a little too late for a break, so let's just take a break anyway.

821
01:24:30,280 --> 01:24:36,520
I feel like we could all use a break and we'll come back in 5 minutes and we'll do some slides about data management.

822
01:24:47,250 --> 01:24:53,650
Former President Bill Clinton.

823
01:24:54,970 --> 01:25:11,050
Yeah, well, everyone in the world. So you deny you're still in power and that it was good intelligence just because it's to go between?

824
01:25:13,180 --> 01:25:18,080
I don't know. Because I like accountability.

825
01:25:18,100 --> 01:25:25,590
So. Because I'm sorry that we should be like students now that we're like, I think in that way.

826
01:25:25,710 --> 01:25:33,870
Like in recent events, like before, I think that that would be relaxed, more relaxing, but it should be.

827
01:25:33,870 --> 01:25:48,540
And I think that, you know, I'm so glad that the iron, the sound got everybody in the room capacity of people has rolled over to this morning.

828
01:25:48,540 --> 01:25:53,090
They were like, Oh, absolutely. Okay, that was kind of my all.

829
01:25:53,100 --> 01:25:58,460
Yeah, so do you are you folks in here? Even though I just was.

830
01:25:58,540 --> 01:26:09,869
Yeah. You know, and I didn't think that this city was on the way.

831
01:26:09,870 --> 01:26:21,540
This was the night before this, you know, that was on me that there were probably 94 year news.

832
01:26:21,620 --> 01:26:26,530
And it just also gives me the option. It doesn't work like that.

833
01:26:28,250 --> 01:26:44,100
And if you are no longer around, like you're no longer and Isaiah is only a person, so it may not be there.

834
01:26:46,040 --> 01:26:52,230
So I don't I'm alone. I don't want it rolled out. But everybody I disagree with.

835
01:26:53,340 --> 01:26:56,800
Yeah, yeah, yeah, yeah.

836
01:26:58,850 --> 01:27:14,610
0a0 yeah. But I just wondered why this is still going on.

837
01:27:15,530 --> 01:27:21,549
So what's your, what's your name only.

838
01:27:21,550 --> 01:27:29,580
Right? Oh, I'm on the run. Why didn't you? Is there anything that makes it so hurt?

839
01:27:29,670 --> 01:27:39,959
Oh, no, you're right. You know, like I'm using the same person, so, like, okay, I'll go real quick, because it was like, oh, I think those.

840
01:27:39,960 --> 01:27:43,470
I think those are just going to be there. I would have done that. Oh, no, I didn't.

841
01:27:43,470 --> 01:27:53,700
I worked, but I still haven't had the opportunity to learn, actually listen to it and maybe it'll take some time.

842
01:27:53,770 --> 01:27:57,959
Yeah. Yeah. So I just came back, I believe.

843
01:27:57,960 --> 01:28:03,330
I think so. Yeah. And I was like, I'm like, I do nothing volunteer.

844
01:28:04,050 --> 01:28:08,340
I'm not even grandmother, but thank God it is okay.

845
01:28:08,340 --> 01:28:12,490
Yeah. Because even though I haven't done it yet, can I'll take it like that.

846
01:28:12,510 --> 01:28:16,750
It's mine today. Yeah, yeah, yeah.

847
01:28:16,900 --> 01:28:19,950
But you are still coming a lot.

848
01:28:19,950 --> 01:28:25,260
It's like the kids are. It's there.

849
01:28:26,010 --> 01:28:29,339
And just like, not in your past.

850
01:28:29,340 --> 01:28:33,970
Like, I'm taking a stand and I'm not sure if I have.

851
01:28:34,080 --> 01:28:38,370
I'm in charge if it's not true. And I'm telling you, the information is coming out.

852
01:28:38,400 --> 01:28:50,860
Can you distracted? Yeah. If we could still submit stuff that, you know, like, I think you might like the kind of information on you today,

853
01:28:50,970 --> 01:29:01,410
but it's just like like, oh, I don't wanna buy something right now.

854
01:29:02,340 --> 01:29:09,239
Let me know what you think. He said they don't talk because it's hilarious.

855
01:29:09,240 --> 01:29:18,230
And all they know is that even just,

856
01:29:18,250 --> 01:29:32,610
oh you're not like I'm not of the other guys are you know they have to be like now until I think like I work, I got a promotion for you.

857
01:29:32,940 --> 01:29:37,349
Okay, so if you can't see it, then I could be more like I don't know why I did it twice.

858
01:29:37,350 --> 01:30:00,720
I mean, you can access we can access the libertarians as long as you want to be an arbiter of which is one here.

859
01:30:01,170 --> 01:30:04,990
Yes, this one's I'm here.

860
01:30:05,010 --> 01:30:11,550
I'm in my life. So how many? I'm sorry.

861
01:30:11,970 --> 01:30:16,290
You know, that one has five and can't. You might be a short man.

862
01:30:17,270 --> 01:30:24,829
And how long? I would say of five.

863
01:30:24,830 --> 01:30:31,030
I know this isn't something that someone put up for her that wasn't true.

864
01:30:31,270 --> 01:30:41,100
So let's find out the other part.

865
01:30:41,210 --> 01:30:42,140
You know, let's see.

866
01:30:43,250 --> 01:30:56,970
You know, I'm not lately with anything that you didn't or doesn't care about or anything like it was just here yesterday, she said.

867
01:30:59,390 --> 01:31:05,030
So, like, there's even a nod to like shortening the number of.

868
01:31:05,070 --> 01:31:08,700
I was like, Oh yeah.

869
01:31:08,800 --> 01:31:20,990
But anyway, so what happened was my mistake that I used to, you know, I'm a 36 year old here, really.

870
01:31:20,990 --> 01:31:31,940
So I learned how to do that derby around what is the reality at this point.

871
01:31:33,380 --> 01:31:38,570
So what is like looking to that?

872
01:31:38,630 --> 01:31:49,380
Oh, I don't to know exactly what. So you really lucky that it was a wedding?

873
01:31:50,050 --> 01:32:04,030
Yes, I think I think pushing your end of the world can make it even easier.

874
01:32:06,300 --> 01:32:09,760
Yeah. So then I just. I don't know. I don't know.

875
01:32:12,820 --> 01:32:16,479
Yeah, I don't get any sleep last night. Yeah. All right. Great work, folks.

876
01:32:16,480 --> 01:32:20,350
Want to jump back in. And now we're going to talk about reading and data.

877
01:32:20,350 --> 01:32:24,740
So you have indulged my farmers market related made up data.

878
01:32:24,770 --> 01:32:27,910
Now we're going to talk about reading an actual public health data.

879
01:32:28,560 --> 01:32:29,290
So when we're doing this,

880
01:32:29,290 --> 01:32:36,370
we're gonna learn how to apply functions three data sets into our and how to write data sets for our collaborators outside of our.

881
01:32:38,680 --> 01:32:41,200
So in general, the the language that women use,

882
01:32:41,200 --> 01:32:47,320
men are bringing data into an out of our when we're bringing data into are from external source when to call this reading.

883
01:32:47,530 --> 01:32:54,570
So read that data into our. In other documentation, you might hear this called importing data.

884
01:32:54,810 --> 01:33:02,610
You might hear this called loading data. We tend to have a lot of words for the same general concept when we want to bring data out of our.

885
01:33:02,640 --> 01:33:06,330
We call this writing data or exporting data or saving data.

886
01:33:06,560 --> 01:33:10,230
Okay. So these are these two processes in and out, read and write.

887
01:33:14,020 --> 01:33:21,090
In general, there's two sets of these processes. The first is to figure out the file extension of the file you want.

888
01:33:22,580 --> 01:33:29,260
File extensions are. These character expressions that come after the name of the file.

889
01:33:29,710 --> 01:33:35,170
So you might have that file called something like Flu Data 2017.

890
01:33:35,500 --> 01:33:40,980
And the file extension is that information that comes in after the period after the file name.

891
01:33:41,500 --> 01:33:45,640
So for example, you might have a file that ends in the extension TSB.

892
01:33:45,980 --> 01:33:51,460
Likely you might have been working in Excel or CSV since a comma separated values.

893
01:33:51,820 --> 01:33:57,010
This is tab separated values. You might have an Excel spreadsheet, Excel us x.

894
01:33:57,790 --> 01:34:05,350
Okay, so that those might be some common file extensions if you are working in SAS, these are some of those export files.

895
01:34:06,230 --> 01:34:10,420
I'm one of my colleagues versus data, so we get these DTA files.

896
01:34:11,290 --> 01:34:17,170
So usually whatever file, whatever other program you're working with is going to have some kind of value like this.

897
01:34:17,800 --> 01:34:22,630
All right. So your job first as the analyst is to figure out what is this file extension?

898
01:34:24,080 --> 01:34:27,680
And then step two of two is there's a function for that.

899
01:34:28,430 --> 01:34:31,580
So we want to match the rec function to the right file extension.

900
01:34:32,210 --> 01:34:39,290
So if your extension is CSP, we've got a read CSP function and each of these functions come from different packages.

901
01:34:39,630 --> 01:34:44,660
So we're all going to match them up. It's all going to go back to whatever type of file.

902
01:34:44,840 --> 01:34:52,340
So if you've got one of these SAS seven V that's from SAS, we can use the SAS function that's in the High Haven package.

903
01:34:52,550 --> 01:34:56,660
So, so we need to queue up that package to make it accessible so you can see how those,

904
01:34:56,660 --> 01:35:03,110
like some of these specialized packages that we need to activate to be able to use these specialized functions.

905
01:35:04,370 --> 01:35:08,809
So you might have any questions or comments about like how we find these file extensions.

906
01:35:08,810 --> 01:35:18,130
Where do those come from? Does anybody work with any file extensions that are not listed here or are there other ones that are should be included?

907
01:35:22,910 --> 01:35:37,819
So those are two main steps. So for example, let's say we're working with a file we got from the Department of Education and we got a file that ends.

908
01:35:37,820 --> 01:35:44,220
And the extension that seems to be. So we're going to use the read CSP function.

909
01:35:44,430 --> 01:35:52,840
So those two things match. And then you notice that I'm not just reading that CSP, I'm also assigning the output as a new object.

910
01:35:53,530 --> 01:35:57,910
So I don't just want to like look at the table in the console.

911
01:35:58,330 --> 01:36:02,260
I want to assign that as an object so now I can perform functions on that object.

912
01:36:03,940 --> 01:36:07,240
So I'm going to start with what's the file extension?

913
01:36:08,200 --> 01:36:11,980
So one step to find a function of match.

914
01:36:12,520 --> 01:36:16,600
And then three, I'm going to assign it as an object. So now I can perform functions on that object.

915
01:36:21,450 --> 01:36:28,260
Sometimes you'll have datasets like that, like somebody might email it to you or you have to log on to some secure connection to download it.

916
01:36:28,770 --> 01:36:36,750
Other times, some some of our big epidemiology studies have online data repositories that already come through on our package,

917
01:36:36,870 --> 01:36:41,220
and we'll use one of these in this class for facilitating this use.

918
01:36:41,640 --> 01:36:47,580
This is nice. It's going to reduce a lot of errors. You don't have to like download it on your computer and then upload it in the ah,

919
01:36:47,580 --> 01:36:54,150
there's already a package for all that and we can also directly query all that data just takes thousands of steps along the way.

920
01:36:55,500 --> 01:37:03,540
So for example, here's some online ah packages for pulling in epidemiology data that I use every day in my work.

921
01:37:03,960 --> 01:37:08,280
So there's something called the genome expression omnibus. This is put out by the National Institutes of Health.

922
01:37:08,580 --> 01:37:12,930
This is where you can find molecular data, gene expression data, DNA, methylation data.

923
01:37:12,930 --> 01:37:18,059
If you're into molecular epidemiology, there's one called the Cancer Genome Atlas.

924
01:37:18,060 --> 01:37:20,610
If you're interested in different types of cancer around the body,

925
01:37:21,090 --> 01:37:25,890
another one we're going to use for this class is for the US National Health and Nutrition Examination Survey.

926
01:37:26,490 --> 01:37:33,060
So there's a package for each of these online repositories to help you bring in that data directly.

927
01:37:34,740 --> 01:37:43,380
Very convenient. But this also means is if you are curious about analysis, about coding or you don't have access to a research group or a data set,

928
01:37:43,650 --> 01:37:47,700
these are only out there you can get going on these on your own at any time.

929
01:37:47,790 --> 01:37:52,349
Yes. Could you describe again how you don't have to download that data?

930
01:37:52,350 --> 01:37:58,530
Like I understand that you're opening a file using a specific function, but doesn't that file have to be downloaded somewhere?

931
01:37:59,010 --> 01:38:04,200
These packages are going to actually talk to the Internet for you and grab it.

932
01:38:04,830 --> 01:38:08,910
Yeah. And we'll do this in our current session.

933
01:38:10,350 --> 01:38:17,219
So some of you may have worked with the National Health and Nutrition Examination Survey data previously.

934
01:38:17,220 --> 01:38:22,320
I have a year in biostatistics 521 Instructor get using this as an example.

935
01:38:22,320 --> 01:38:29,580
Data set is just it's very convenient for this type of purpose, but they release data 5000, 5000 people every two years.

936
01:38:29,790 --> 01:38:36,960
So we'll use this in the US. So it provides some experience with a relatively large dataset that we can get going with.

937
01:38:37,710 --> 01:38:41,310
We're going to use a package called Enhanced Capital X.

938
01:38:42,510 --> 01:38:45,750
It will allow you to pick what years you want the data.

939
01:38:46,530 --> 01:38:54,420
There's different types of datasets like diet, demographics, laboratory data, pick which ones are those you want, and they are functions to pull it.

940
01:38:55,110 --> 01:39:00,540
So they'll talk to the Internet and they'll grab those datasets that are currently on the Internet and put them in your workspace.

941
01:39:03,220 --> 01:39:07,350
So whether you load data from an Excel spreadsheet that you downloaded,

942
01:39:07,560 --> 01:39:15,870
whether you pull in data from one of these specialized packages, where are they being stored there temporarily in our environment.

943
01:39:15,870 --> 01:39:21,330
So they're in that upper right hand corner. We're all in those like apples objects we're showing.

944
01:39:24,150 --> 01:39:30,790
These objects in the environment are temporary. They are only there as long as your current hour session is active.

945
01:39:32,860 --> 01:39:36,909
And so they're not safe to your hard drive unless you tell it to do so.

946
01:39:36,910 --> 01:39:40,690
Just like we had to do that stuff to read data into our.

947
01:39:41,830 --> 01:39:48,040
If we want to write data for our part to share our data with our other collaborators, we have to take an extra step to do that.

948
01:39:48,640 --> 01:39:52,180
Okay, so there's an extra step to take it out of our environment and save it.

949
01:39:55,490 --> 01:40:01,760
So if you close our eyes, saving your system crashes. These things in our environment might not be stable.

950
01:40:03,740 --> 01:40:09,140
And this is analogous to this generalized computing concept.

951
01:40:09,570 --> 01:40:14,240
Is anybody familiar with this idea? Does anybody know what the difference is on your laptop or your tablet?

952
01:40:14,270 --> 01:40:18,710
What's the difference between active memory RAM and your hard drive storage?

953
01:40:18,980 --> 01:40:25,070
At least familiar concepts. Maybe when you're buying your computer, you're like, I want higher numbers of these things.

954
01:40:25,070 --> 01:40:28,490
But like, what do they mean? What do you what are you trying to do there?

955
01:40:34,060 --> 01:40:40,410
This isn't RAM or related to processing speeds and your processing abilities.

956
01:40:40,410 --> 01:40:48,780
Like you get 16 gigabytes of RAM and hard drive storage, be on your local machine, you can have like 500 gigabytes,

957
01:40:48,780 --> 01:40:52,080
but that would be a matter of storing to another um,

958
01:40:52,350 --> 01:40:57,690
that doesn't input the RAM is what influences your ability to process things when you're working on a computer.

959
01:40:58,230 --> 01:41:02,970
That's a really nice way of thinking about it. So your hard drive storage is a bigger total value.

960
01:41:03,090 --> 01:41:08,760
This is like what you can archive, what you can store there long term your ram,

961
01:41:08,760 --> 01:41:14,040
this active memory, this is a smaller amount, but this is your actual like what you want.

962
01:41:14,040 --> 01:41:16,260
Your computer can hold this brain at a given time.

963
01:41:16,530 --> 01:41:23,249
So we have this same analogy and ah, this would be like using your environment, things that are active,

964
01:41:23,250 --> 01:41:30,690
it's been held in the current session versus things that are saved for long term use and calling it back up again.

965
01:41:31,350 --> 01:41:37,260
So a number of things in our compute part of our active memory, it's like current brain session.

966
01:41:37,680 --> 01:41:40,710
These can include data objects, which is what I'm talking about here.

967
01:41:41,100 --> 01:41:46,350
This would also include functions. So like some of those specialized functions, we might call in with packages.

968
01:41:47,860 --> 01:41:53,560
The kind of results objects. These are like temporary things, like holding these in its brain at any given moment.

969
01:41:54,730 --> 01:42:02,950
And then if we want to if any of those objects are in good and we want to keep them, we have to do an extra step to save it and put it in a data file.

970
01:42:03,490 --> 01:42:07,960
So I have to do an extra step if we want to take some of those results objects and save them.

971
01:42:12,820 --> 01:42:20,799
So just like we matched our file extension with a function when we were reading and now

972
01:42:20,800 --> 01:42:24,190
we're going to do the same thing we want to export data to share with our colleagues.

973
01:42:24,700 --> 01:42:31,030
So based on what type of data our collaborators want, maybe your collaborator wants an Excel spreadsheet.

974
01:42:31,810 --> 01:42:36,250
Then I'm going to use the right Excel X function to make them a spreadsheet.

975
01:42:36,610 --> 01:42:44,260
So what I'll do is I'll take that object and I'll feed it into the right Excel X function and I'll store that as a file,

976
01:42:45,040 --> 01:42:46,960
an Excel spreadsheet, so I can share one.

977
01:42:47,650 --> 01:42:52,720
So in this side, you would ask your colleagues what format you want the data in, and let me write it out for you.

978
01:42:54,800 --> 01:43:02,900
So, for example, here's how we might do it. We could write the Excel function and here's the object's name.

979
01:43:03,350 --> 01:43:08,000
And then we say, Where do we want that to go? What file name? Make sure the file extension matches.

980
01:43:15,440 --> 01:43:20,930
That's for exporting data for use in other software. I will also often want the data for use and R.

981
01:43:21,170 --> 01:43:27,050
So if I'm working on a dataset and I'm partway through and I want to come back to that dataset later on,

982
01:43:27,410 --> 01:43:33,980
I will often store it in a format that our likes. So I don't need one of those specialized functions to read it in next time.

983
01:43:35,420 --> 01:43:38,450
So there are specialized extensions for our data.

984
01:43:39,080 --> 01:43:42,230
So, for example, our day stands for our data.

985
01:43:43,100 --> 01:43:48,739
So if I have an object I like, for example, I have the object schools that I like, I'm working on it.

986
01:43:48,740 --> 01:43:53,270
I clean this data so that I can see it as an our dataset.

987
01:43:54,090 --> 01:44:01,590
So now I'm saving it as an art form. And next time, when I come back to it, I can load it already comes in with an object name.

988
01:44:01,590 --> 01:44:05,900
I don't even need an assignment operator. It's more in an art format.

989
01:44:07,140 --> 01:44:10,380
So this process of writing data.

990
01:44:11,380 --> 01:44:13,810
I generally do for when I want to share it with other people.

991
01:44:13,810 --> 01:44:20,770
But when I'm working myself in horror, I'll save it in an hour compatible data format so that I can come back in the next time when I want to use.

992
01:44:20,770 --> 01:44:29,929
Ah, it's available for me. Here's a summary table of some of these are file types that we're starting to get used to.

993
01:44:29,930 --> 01:44:33,890
So that's markdown file type that we're using for coding in class.

994
01:44:34,250 --> 01:44:40,190
This has code and output. If you want, you can code and capital R that's just going to have the code.

995
01:44:40,190 --> 01:44:43,759
No output. This RDA is this one we just learned about.

996
01:44:43,760 --> 01:44:44,900
This isn't our object.

997
01:44:45,770 --> 01:44:52,310
So if we want to save our data set and then there's a number here, we're also using our projects, which is a way of storing everything together.

998
01:44:53,780 --> 01:44:57,470
So here's our recap. I'm reading in data and we'll do coding related to this next time.

999
01:44:57,950 --> 01:45:02,690
But in general, we can bring data into our and export it from our in many formats is very flexible.

1000
01:45:02,900 --> 01:45:06,050
We can go between our and pretty much every other software that exists.

1001
01:45:06,530 --> 01:45:11,120
But essentially your step is to find the file extension of that data set and a function that matches that.

1002
01:45:11,870 --> 01:45:18,590
And then when we want to save data for R, we're going to use this RDA file extension for easy load access.

1003
01:45:19,280 --> 01:45:22,580
So thank you all for your attention and I'm excited to see you all next week.

